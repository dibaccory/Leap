{"ast":null,"code":"var _jsxFileName = \"/Users/bacchus/git/Leap/client/src/App.js\";\nimport React, { useState } from 'react';\nimport socketIOClient from \"socket.io-client\";\nimport crypto from 'crypto';\nimport './css/App.css';\nimport './lib/fa/css/all.min.css';\nimport { CSSTransition } from 'react-transition-group';\nimport Settings from './Settings';\nimport Leap from './Leap';\nimport Menu from './Menu';\nconst CONFIG = {\n  difficulty: 0,\n  online: true,\n  port: 3001,\n  player: {},\n  size: 8\n};\n\nclass App extends React.Component {\n  // add back   <Menu/>\n  //If roomURL isn't empty, then Multiplayer\n  //go to roomURL.\n  constructor() {\n    super();\n    this.socket = socketIOClient(`http://localhost:${CONFIG.port}`);\n    var name;\n\n    do {\n      name = prompt(\"username?\");\n    } while (!name);\n\n    const player = {\n      name: name,\n      bot: false,\n      color: 'white',\n      first: true\n    };\n    CONFIG.player = player;\n    this.socket.on('connect', () => {\n      this.socket.emit('login', {\n        player\n      });\n      this.socket.on('lobbyLoadSuccess', games => {\n        console.log('update lobby');\n\n        for (let game in games) {\n          lobby.push(React.createElement(\"button\", {\n            onClick: () => this.setState({\n              inGame: game.id\n            }),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 42\n            },\n            __self: this\n          }, `Game with ${game.users}`));\n        }\n      });\n    });\n    this.socket.emit('lobbyLoad');\n    let lobby = [];\n    this.state = {\n      player: player,\n      inGame: '' //  lobby: [],\n\n    };\n  }\n\n  componentDidMount() {}\n\n  exitGame() {}\n\n  render() {\n    const createGame = () => {\n      this.socket.emit('gameCreate', {\n        id: crypto.randomBytes(16, (err, buffer) => {\n          buffer.toString('hex');\n        }),\n        whitelist: false,\n        host: this.state.player.name,\n        users: {}\n      }); //this.socket.emit('sendGames');\n    };\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(Settings, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"gameroonis\", lobby), React.createElement(\"button\", {\n      className: \"start-game-btn\",\n      onClick: () => createGame(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Create new game\"), this.state.inGame && React.createElement(Leap, {\n      gameid: this.state.inGame,\n      config: CONFIG,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/bacchus/git/Leap/client/src/App.js"],"names":["React","useState","socketIOClient","crypto","CSSTransition","Settings","Leap","Menu","CONFIG","difficulty","online","port","player","size","App","Component","constructor","socket","name","prompt","bot","color","first","on","emit","games","console","log","game","lobby","push","setState","inGame","id","users","state","componentDidMount","exitGame","render","createGame","randomBytes","err","buffer","toString","whitelist","host"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport socketIOClient from \"socket.io-client\";\nimport crypto from 'crypto';\nimport './css/App.css';\nimport './lib/fa/css/all.min.css';\nimport { CSSTransition } from 'react-transition-group';\nimport Settings from './Settings';\nimport Leap from './Leap';\nimport Menu from './Menu';\n\nconst CONFIG = {\n  difficulty: 0,\n  online: true,\n  port: 3001,\n  player: {},\n  size: 8,\n};\n\nclass App extends React.Component {\n  // add back   <Menu/>\n  //If roomURL isn't empty, then Multiplayer\n  //go to roomURL.\n  constructor () {\n    super();\n    this.socket = socketIOClient(`http://localhost:${CONFIG.port}`);\n    var name;\n    do { name = prompt(\"username?\");}while(!name);\n    const player = {\n      name: name,\n      bot: false,\n      color: 'white',\n      first: true,\n    };\n    CONFIG.player = player;\n    this.socket.on('connect', ()=> {\n      this.socket.emit('login', {player});\n\n      this.socket.on('lobbyLoadSuccess', games => {\n        console.log('update lobby');\n        for (let game in games) {\n          lobby.push(\n            <button\n              onClick={ () => this.setState({inGame: game.id}) }>\n              { `Game with ${game.users}`}\n            </button>\n          );\n      }});\n    });\n\n    this.socket.emit('lobbyLoad');\n    let lobby = [];\n\n\n    this.state = {\n      player: player,\n      inGame: '',\n    //  lobby: [],\n    };\n  }\n\n\n  componentDidMount () {\n\n  }\n\n\n\n  exitGame() {\n\n  }\n\n\n  render () {\n\n\n\n    const createGame = () => {\n      this.socket.emit('gameCreate', {\n        id: crypto.randomBytes(16, (err, buffer)=> { buffer.toString('hex') }),\n        whitelist: false,\n        host: this.state.player.name,\n        users : {},\n      });\n\n      //this.socket.emit('sendGames');\n    }\n\n    return (\n      <div className=\"App\">\n        <Settings/>\n        <div>\n          gameroonis\n          { lobby }\n        </div>\n        <button\n          className='start-game-btn'\n          onClick={ () => createGame() }>\n          Create new game\n        </button>\n        { this.state.inGame && <Leap gameid= { this.state.inGame } config={ CONFIG }/> }\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}