{"ast":null,"code":"var _jsxFileName = \"/Users/bacchus/git/Leap/client/src/App.js\";\nimport React, { useState } from 'react';\nimport socketIOClient from \"socket.io-client\";\nimport crypto from 'crypto';\nimport './css/App.css';\nimport './lib/fa/css/all.min.css';\nimport { CSSTransition } from 'react-transition-group';\nimport Settings from './Settings';\nimport Leap from './Leap';\nimport Menu from './Menu';\nconst CONFIG = {\n  id: '',\n  difficulty: 0,\n  online: true,\n  port: 3001,\n  player: {},\n  size: 8\n};\n\nclass App extends React.Component {\n  // add back   <Menu/>\n  //If roomURL isn't empty, then Multiplayer\n  //go to roomURL.\n  constructor() {\n    super();\n    this.socket = socketIOClient(`http://localhost:${CONFIG.port}`);\n    var name;\n\n    do {\n      name = prompt(\"username?\");\n    } while (!name);\n\n    const player = {\n      name: name,\n      bot: false,\n      color: 'white',\n      first: true\n    };\n    CONFIG.player = player;\n    this.socket.on('connect', () => {\n      this.socket.emit('login', {\n        player\n      });\n    });\n    this.state = {\n      player: player,\n      inGame: ''\n    };\n  }\n\n  componentDidMount() {//make new process on server to set CONFIG.port. right now it's static\n  }\n\n  enterGame(id) {\n    this.setState({\n      inGame: id\n    });\n    CONFIG.id = id;\n  }\n\n  exitGame() {}\n\n  createGame() {\n    this.socket.emit('gameCreate', {\n      id: crypto.randomBytes(16, (err, buffer) => {\n        buffer.toString('hex');\n      }),\n      whitelist: false,\n      host: this.state.player.name,\n      users: {}\n    });\n  }\n\n  render() {\n    let lobby = [];\n    this.socket.emit('sendGames');\n    this.socket.on('gamesSent', games => {\n      for (let game in games) {\n        lobby.push(React.createElement(\"button\", {\n          onClick: () => {\n            this.setState({\n              inGame: game.id\n            });\n            CONFIG.id = game.id;\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }, `Game with ${game.users}`));\n      }\n    });\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(Settings, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"gameroonis\", lobby), React.createElement(\"button\", {\n      className: \"start-game-btn\",\n      onClick: () => createGame(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Create new game\"), this.state.inGame && React.createElement(Leap, {\n      config: CONFIG,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/bacchus/git/Leap/client/src/App.js"],"names":["React","useState","socketIOClient","crypto","CSSTransition","Settings","Leap","Menu","CONFIG","id","difficulty","online","port","player","size","App","Component","constructor","socket","name","prompt","bot","color","first","on","emit","state","inGame","componentDidMount","enterGame","setState","exitGame","createGame","randomBytes","err","buffer","toString","whitelist","host","users","render","lobby","games","game","push"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport socketIOClient from \"socket.io-client\";\nimport crypto from 'crypto';\nimport './css/App.css';\nimport './lib/fa/css/all.min.css';\nimport { CSSTransition } from 'react-transition-group';\nimport Settings from './Settings';\nimport Leap from './Leap';\nimport Menu from './Menu';\n\nconst CONFIG = {\n  id: '',\n  difficulty: 0,\n  online: true,\n  port: 3001,\n  player: {},\n  size: 8,\n};\n\nclass App extends React.Component {\n  // add back   <Menu/>\n  //If roomURL isn't empty, then Multiplayer\n  //go to roomURL.\n  constructor () {\n    super();\n    this.socket = socketIOClient(`http://localhost:${CONFIG.port}`);\n    var name;\n    do { name = prompt(\"username?\");}while(!name);\n    const player = {\n      name: name,\n      bot: false,\n      color: 'white',\n      first: true,\n    };\n    CONFIG.player = player;\n    this.socket.on('connect', ()=> {\n      this.socket.emit('login', {player});\n    });\n\n    this.state = {\n      player: player,\n      inGame: '',\n    };\n  }\n\n  componentDidMount () {\n    //make new process on server to set CONFIG.port. right now it's static\n\n  }\n\n  enterGame(id) {\n    this.setState({inGame: id});\n    CONFIG.id = id;\n  }\n\n  exitGame() {\n\n  }\n\n  createGame () {\n    this.socket.emit('gameCreate', {\n      id: crypto.randomBytes(16, (err, buffer)=> { buffer.toString('hex') }),\n      whitelist: false,\n      host: this.state.player.name,\n      users : {},\n    });\n  }\n\n  render () {\n    let lobby = [];\n    this.socket.emit('sendGames');\n    this.socket.on('gamesSent', games => {\n      for (let game in games) {\n        lobby.push(\n          <button\n            onClick={ () => {this.setState({inGame: game.id});\n            CONFIG.id = game.id;} }>\n            { `Game with ${game.users}`}\n          </button>\n        );\n      }\n    });\n    return (\n      <div className=\"App\">\n        <Settings/>\n        <div>\n          gameroonis\n          { lobby }\n        </div>\n        <button\n          className='start-game-btn'\n          onClick={ () => createGame() }>\n          Create new game\n        </button>\n        { this.state.inGame && <Leap config={ CONFIG }/> }\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}