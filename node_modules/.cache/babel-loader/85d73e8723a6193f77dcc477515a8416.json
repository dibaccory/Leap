{"ast":null,"code":"var _jsxFileName = \"/Users/bacchus/git/Leap/client/src/containers/Room/Room.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { bool, array, string, object } from 'prop-types';\nimport { getUsers, getGame, getHost, getMe, getMoveSelectionsForActiveGame, getMoveStatusForActiveGame } from '../../selectors/';\nimport { bindActionCreators } from 'redux';\nimport { submitMove, enter, exit } from '../../actions/room.actions';\nimport Game from '../../components/Game';\nimport './Room.css';\n\nconst Room = ({\n  active,\n  roomID,\n  me,\n  users,\n  host,\n  game,\n  move,\n  isMoveReadyToSubmit,\n  enter\n}) => {\n  move = move || {\n    to: undefined,\n    from: undefined,\n    captured: undefined\n  };\n  if (active) enter(me, roomID);\n  return React.createElement(\"div\", {\n    className: \"room-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(Game, {\n    game: game,\n    move: move,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: () => {\n      isMoveReadyToSubmit ? submitMove(game, move) : console.log('boopies');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, \"Play\"));\n}; //<PlayerHeader user={}/>\n//\n//<PlayerHeader user={}/>\n\n\nRoom.propTypes = {\n  me: object,\n  users: array.isRequired,\n  host: string.isRequired,\n  //userID string?\n  game: object.isRequired,\n  move: object,\n  isMoveReadyToSubmit: bool\n}; //TODO: make selectors\n\nconst mapStateToProps = state => ({\n  me: getMe(state),\n  users: getUsers(state),\n  host: getHost(state),\n  game: getGame(state),\n  move: getMoveSelectionsForActiveGame(state),\n  isMoveReadyToSubmit: getMoveStatusForActiveGame(state) //errorMessage: getErrorMessage(state),\n  //modalMessage: getModalMessage(state),\n\n});\n\nconst actions = {\n  submitMove,\n  enter,\n  exit\n};\n\nconst mapDispatchToProps = dispatch => bindActionCreators(actions, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Room);","map":{"version":3,"sources":["/Users/bacchus/git/Leap/client/src/containers/Room/Room.js"],"names":["React","connect","bool","array","string","object","getUsers","getGame","getHost","getMe","getMoveSelectionsForActiveGame","getMoveStatusForActiveGame","bindActionCreators","submitMove","enter","exit","Game","Room","active","roomID","me","users","host","game","move","isMoveReadyToSubmit","to","undefined","from","captured","console","log","propTypes","isRequired","mapStateToProps","state","actions","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,MAAtB,EAA8BC,MAA9B,QAA4C,YAA5C;AACA,SAASC,QAAT,EAAmBC,OAAnB,EAA4BC,OAA5B,EAAqCC,KAArC,EAA4CC,8BAA5C,EAA4EC,0BAA5E,QAA8G,kBAA9G;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,UAAT,EAAqBC,KAArB,EAA4BC,IAA5B,QAAwC,4BAAxC;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,OAAO,YAAP;;AAEA,MAAMC,IAAI,GAAG,CAAC;AACZC,EAAAA,MADY;AAEZC,EAAAA,MAFY;AAGZC,EAAAA,EAHY;AAIZC,EAAAA,KAJY;AAKZC,EAAAA,IALY;AAMZC,EAAAA,IANY;AAOZC,EAAAA,IAPY;AAQZC,EAAAA,mBARY;AASZX,EAAAA;AATY,CAAD,KAUP;AACJU,EAAAA,IAAI,GAAGA,IAAI,IAAI;AAACE,IAAAA,EAAE,EAAEC,SAAL;AAAgBC,IAAAA,IAAI,EAAED,SAAtB;AAAiCE,IAAAA,QAAQ,EAAEF;AAA3C,GAAf;AACA,MAAIT,MAAJ,EAAYJ,KAAK,CAACM,EAAD,EAAKD,MAAL,CAAL;AACZ,SACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAEI,IAAZ;AAAkB,IAAA,IAAI,EAAEC,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAQ,IAAA,OAAO,EAAE,MAAM;AAACC,MAAAA,mBAAmB,GAAGZ,UAAU,CAACU,IAAD,EAAOC,IAAP,CAAb,GAA2BM,OAAO,CAACC,GAAR,CAAY,SAAZ,CAA9C;AAAqE,KAA7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,CADF;AAMD,CAnBD,C,CAoBA;AACA;AACA;;;AACAd,IAAI,CAACe,SAAL,GAAiB;AACfZ,EAAAA,EAAE,EAAEf,MADW;AAEfgB,EAAAA,KAAK,EAAElB,KAAK,CAAC8B,UAFE;AAGfX,EAAAA,IAAI,EAAElB,MAAM,CAAC6B,UAHE;AAGU;AACzBV,EAAAA,IAAI,EAAElB,MAAM,CAAC4B,UAJE;AAKfT,EAAAA,IAAI,EAAEnB,MALS;AAMfoB,EAAAA,mBAAmB,EAAEvB;AANN,CAAjB,C,CAQA;;AACA,MAAMgC,eAAe,GAAGC,KAAK,KAAK;AAChCf,EAAAA,EAAE,EAAEX,KAAK,CAAC0B,KAAD,CADuB;AAEhCd,EAAAA,KAAK,EAAEf,QAAQ,CAAC6B,KAAD,CAFiB;AAGhCb,EAAAA,IAAI,EAAEd,OAAO,CAAC2B,KAAD,CAHmB;AAIhCZ,EAAAA,IAAI,EAAEhB,OAAO,CAAC4B,KAAD,CAJmB;AAKhCX,EAAAA,IAAI,EAAEd,8BAA8B,CAACyB,KAAD,CALJ;AAMhCV,EAAAA,mBAAmB,EAAEd,0BAA0B,CAACwB,KAAD,CANf,CAOhC;AACA;;AARgC,CAAL,CAA7B;;AAWA,MAAMC,OAAO,GAAG;AACdvB,EAAAA,UADc;AAEdC,EAAAA,KAFc;AAGdC,EAAAA;AAHc,CAAhB;;AAMA,MAAMsB,kBAAkB,GAAGC,QAAQ,IAAI1B,kBAAkB,CAACwB,OAAD,EAAUE,QAAV,CAAzD;;AAEA,eAAerC,OAAO,CAACiC,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CpB,IAA7C,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { bool, array, string, object } from 'prop-types';\nimport { getUsers, getGame, getHost, getMe, getMoveSelectionsForActiveGame, getMoveStatusForActiveGame } from '../../selectors/';\nimport { bindActionCreators } from 'redux';\nimport { submitMove, enter, exit } from '../../actions/room.actions';\nimport Game from '../../components/Game';\nimport './Room.css';\n\nconst Room = ({\n  active,\n  roomID,\n  me,\n  users,\n  host,\n  game,\n  move,\n  isMoveReadyToSubmit,\n  enter,\n}) => {\n  move = move || {to: undefined, from: undefined, captured: undefined};\n  if (active) enter(me, roomID);\n  return (\n    <div className=\"room-container\">\n      <Game game={game} move={move}/>\n      <button onClick={() => {isMoveReadyToSubmit ? submitMove(game, move): console.log('boopies')} }>Play</button>\n    </div>\n  );\n}\n//<PlayerHeader user={}/>\n//\n//<PlayerHeader user={}/>\nRoom.propTypes = {\n  me: object,\n  users: array.isRequired,\n  host: string.isRequired, //userID string?\n  game: object.isRequired,\n  move: object,\n  isMoveReadyToSubmit: bool,\n};\n//TODO: make selectors\nconst mapStateToProps = state => ({\n  me: getMe(state),\n  users: getUsers(state),\n  host: getHost(state),\n  game: getGame(state),\n  move: getMoveSelectionsForActiveGame(state),\n  isMoveReadyToSubmit: getMoveStatusForActiveGame(state),\n  //errorMessage: getErrorMessage(state),\n  //modalMessage: getModalMessage(state),\n});\n\nconst actions = {\n  submitMove,\n  enter,\n  exit,\n};\n\nconst mapDispatchToProps = dispatch => bindActionCreators(actions, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Room);\n"]},"metadata":{},"sourceType":"module"}