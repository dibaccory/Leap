{"ast":null,"code":"import _slicedToArray from \"/Users/bacchus/git/Leap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/bacchus/git/Leap/src/NavModalContent.js\";\nimport React, { useState } from 'react';\nimport './css/menu.css';\nimport Slider from 'rc-slider';\nimport { CSSTransition } from 'react-transition-group';\nimport 'rc-slider/assets/index.css';\n\nfunction NavModalContent(props) {\n  const modalType = {\n    'stats': React.createElement(\"div\", {\n      className: \"stats-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10\n      },\n      __self: this\n    }),\n    'create': React.createElement(NewGame, {\n      begin: props.begin,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    }),\n    'friends': React.createElement(\"div\", {\n      className: \"friends-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    })\n  };\n  return React.createElement(\"div\", {\n    className: \"nav-modal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, modalType[props.type]);\n} //playmode\n//FriendRow\n\n\nfunction NewGame(props) {\n  const _useState = useState(true),\n        _useState2 = _slicedToArray(_useState, 2),\n        mode = _useState2[0],\n        setMode = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        first = _useState4[0],\n        isFirst = _useState4[1];\n\n  let botDifficulty = 3;\n\n  const readyGame = mode => {\n    /*\n    mpFirst: TRUE if in mp-new-online, FALSE if mp-room-invite\n     singleplayer -> localPlay\n    multiplayer -> webPlay\n     for this vvvvv\n    This is an instance where localPlay is chosen,\n      one player is a bot, other is user\n    */\n    mode ? props.begin(mode, {\n      difficulty: botDifficulty,\n      first: first,\n      players: [{\n        name: 'Player 1',\n        color: 'white',\n        bot: false,\n        first: true\n      }, {\n        name: 'Botto',\n        color: 'black',\n        bot: false,\n        first: false\n      }]\n    }) : props.begin(mode, {\n      roomURL: 'HASH',\n      first: ''\n    }); //wifi multiplayer\n  };\n\n  return React.createElement(\"div\", {\n    className: \"nav-modal-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"playmode-btn-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"playmode-sp-btn\",\n    onClick: () => setMode(true),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"fas fa-user fa-2x\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), \"Singleplayer\"), React.createElement(\"div\", {\n    className: \"playmode-mp-btn\",\n    onClick: () => setMode(false),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"fas fa-user-friends fa-2x\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }), \"Multiplayer\")), React.createElement(CSSTransition, {\n    in: mode,\n    classNames: \"playmode-container\",\n    timeout: 0,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"playmode-config\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, \"Difficulty\", React.createElement(Slider, {\n    max: 10,\n    defaultValue: botDifficulty,\n    onAfterChange: e => botDifficulty = e,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"Player goes first\", React.createElement(\"input\", {\n    id: \"goFirst\",\n    type: \"checkbox\",\n    className: \"sp-player-goes-first\",\n    checked: first,\n    onChange: () => isFirst(!first),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  })))), React.createElement(CSSTransition, {\n    in: !mode,\n    classNames: \"playmode-container\",\n    timeout: 0,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"playmode-config-mp\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"mp-options\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"mp-new-online\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, \" New Game\", React.createElement(\"div\", {\n    className: \"mp-new-online-desc\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, \"Start a new game.\")), React.createElement(\"div\", {\n    className: \"mp-join\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, \" Have a link? Join Game\", React.createElement(\"input\", {\n    type: \"text\",\n    className: \"mp-room-invite\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }))))), React.createElement(\"button\", {\n    /*TODO: only appear when required input satisfied (sp: just click the playmode, mp: select one of three options)*/\n    className: \"start-game-btn\",\n    onClick: () => readyGame(mode),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, \"Start\"));\n}\n\nexport default NavModalContent;","map":{"version":3,"sources":["/Users/bacchus/git/Leap/src/NavModalContent.js"],"names":["React","useState","Slider","CSSTransition","NavModalContent","props","modalType","begin","type","NewGame","mode","setMode","first","isFirst","botDifficulty","readyGame","difficulty","players","name","color","bot","roomURL","e"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport './css/menu.css';\nimport Slider from 'rc-slider';\nimport { CSSTransition } from 'react-transition-group';\nimport 'rc-slider/assets/index.css';\n\n\nfunction NavModalContent(props){\n  const modalType = {\n    'stats':    <div className='stats-container'/>,\n    'create':   <NewGame begin={props.begin}/>,\n    'friends':  <div className='friends-container'/>,\n  };\n\n  return (\n    <div className='nav-modal'>\n     { modalType[props.type] }\n    </div>\n  );\n}\n//playmode\n//FriendRow\n\nfunction NewGame(props) {\n  const [mode, setMode] = useState(true);\n  const [first, isFirst] = useState(true);\n  let botDifficulty = 3;\n\n  const readyGame = (mode) => {\n    /*\n    mpFirst: TRUE if in mp-new-online, FALSE if mp-room-invite\n\n    singleplayer -> localPlay\n    multiplayer -> webPlay\n\n    for this vvvvv\n    This is an instance where localPlay is chosen,\n      one player is a bot, other is user\n    */\n    mode ? props.begin(mode, {\n      difficulty: botDifficulty,\n      first: first,\n      players: [{\n        name: 'Player 1',\n        color: 'white',\n        bot: false,\n        first: true,\n      },{\n        name: 'Botto',\n        color: 'black',\n        bot: false,\n        first: false,\n      }]\n    })\n         : props.begin(mode, {roomURL: 'HASH', first: ''}); //wifi multiplayer\n  };\n\n  return (<div className='nav-modal-container'>\n    <div className='playmode-btn-container'>\n      <div className='playmode-sp-btn' onClick={ () => setMode(true) }>\n        <i className='fas fa-user fa-2x'/>\n        Singleplayer\n      </div>\n      <div className='playmode-mp-btn' onClick={ () => setMode(false) }>\n        <i className='fas fa-user-friends fa-2x'/>\n        Multiplayer\n      </div>\n    </div>\n    <CSSTransition\n      in={mode}\n      classNames= 'playmode-container'\n      timeout={0}\n    >\n      <div className='playmode-config'>\n        Difficulty\n        <Slider\n          max={10}\n          defaultValue={botDifficulty}\n          onAfterChange={(e) => botDifficulty = e}\n        />\n        <label>\n          Player goes first\n          <input\n            id='goFirst' type='checkbox'\n            className='sp-player-goes-first'\n            checked={first}\n            onChange= {() => isFirst(!first)}\n            />\n        </label>\n      </div>\n    </CSSTransition>\n    <CSSTransition\n      in={!mode}\n      classNames= 'playmode-container'\n      timeout={0}\n    >\n      <div className='playmode-config-mp'>\n        <div className='mp-options'>\n          <div className='mp-new-online'> New Game\n            <div className='mp-new-online-desc'>\n              Start a new game.\n            </div>\n          </div>\n          <div className='mp-join'> Have a link? Join Game\n            <input type='text' className='mp-room-invite'/>\n          </div>\n        </div>\n      </div>\n    </CSSTransition>\n    <button /*TODO: only appear when required input satisfied (sp: just click the playmode, mp: select one of three options)*/\n      className='start-game-btn'\n      onClick={ () => readyGame(mode)}>\n      Start\n    </button>\n    </div>\n  );\n}\n\nexport default NavModalContent;\n"]},"metadata":{},"sourceType":"module"}