{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction compare(tree1, tree2) {\n  var patches = [];\n  generate(tree1, tree2, patches, []);\n  return patches;\n}\n\nexports.compare = compare;\n\nfunction concat(arr, value) {\n  var newArr = arr.slice();\n  newArr.push(value);\n  return newArr;\n}\n\nfunction objectKeys(obj) {\n  if (Array.isArray(obj)) {\n    var keys_1 = new Array(obj.length);\n\n    for (var k = 0; k < keys_1.length; k++) {\n      keys_1[k] = \"\" + k;\n    }\n\n    return keys_1;\n  }\n\n  if (Object.keys) {\n    return Object.keys(obj);\n  }\n\n  var keys = [];\n\n  for (var i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      keys.push(i);\n    }\n  }\n\n  return keys;\n}\n\n; // Dirty check if obj is different from mirror, generate patches and update mirror\n\nfunction generate(mirror, obj, patches, path) {\n  var newKeys = objectKeys(obj);\n  var oldKeys = objectKeys(mirror);\n  var deleted = false;\n\n  for (var t = oldKeys.length - 1; t >= 0; t--) {\n    var key = oldKeys[t];\n    var oldVal = mirror[key];\n\n    if (obj.hasOwnProperty(key) && !(obj[key] === undefined && oldVal !== undefined && Array.isArray(obj) === false)) {\n      var newVal = obj[key];\n\n      if (typeof oldVal == \"object\" && oldVal != null && typeof newVal == \"object\" && newVal != null) {\n        generate(oldVal, newVal, patches, concat(path, key));\n      } else {\n        if (oldVal !== newVal) {\n          patches.push({\n            operation: \"replace\",\n            path: concat(path, key),\n            value: newVal,\n            previousValue: oldVal\n          });\n        }\n      }\n    } else {\n      patches.push({\n        operation: \"remove\",\n        path: concat(path, key)\n      });\n      deleted = true; // property has been deleted\n    }\n  }\n\n  if (!deleted && newKeys.length == oldKeys.length) {\n    return;\n  }\n\n  for (var t = newKeys.length - 1; t >= 0; t--) {\n    var key = newKeys[t];\n\n    if (!mirror.hasOwnProperty(key) && obj[key] !== undefined) {\n      var newVal = obj[key];\n      var addPath = concat(path, key); // compare deeper additions\n\n      if (typeof newVal == \"object\" && newVal != null) {\n        generate({}, newVal, patches, addPath);\n      }\n\n      patches.push({\n        operation: \"add\",\n        path: addPath,\n        value: newVal\n      });\n    }\n  }\n}","map":{"version":3,"sources":["/Users/bacchus/git/Leap/node_modules/@gamestdio/state-listener/lib/compare.js"],"names":["Object","defineProperty","exports","value","compare","tree1","tree2","patches","generate","concat","arr","newArr","slice","push","objectKeys","obj","Array","isArray","keys_1","length","k","keys","i","hasOwnProperty","mirror","path","newKeys","oldKeys","deleted","t","key","oldVal","undefined","newVal","operation","previousValue","addPath"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction compare(tree1, tree2) {\n    var patches = [];\n    generate(tree1, tree2, patches, []);\n    return patches;\n}\nexports.compare = compare;\nfunction concat(arr, value) {\n    var newArr = arr.slice();\n    newArr.push(value);\n    return newArr;\n}\nfunction objectKeys(obj) {\n    if (Array.isArray(obj)) {\n        var keys_1 = new Array(obj.length);\n        for (var k = 0; k < keys_1.length; k++) {\n            keys_1[k] = \"\" + k;\n        }\n        return keys_1;\n    }\n    if (Object.keys) {\n        return Object.keys(obj);\n    }\n    var keys = [];\n    for (var i in obj) {\n        if (obj.hasOwnProperty(i)) {\n            keys.push(i);\n        }\n    }\n    return keys;\n}\n;\n// Dirty check if obj is different from mirror, generate patches and update mirror\nfunction generate(mirror, obj, patches, path) {\n    var newKeys = objectKeys(obj);\n    var oldKeys = objectKeys(mirror);\n    var deleted = false;\n    for (var t = oldKeys.length - 1; t >= 0; t--) {\n        var key = oldKeys[t];\n        var oldVal = mirror[key];\n        if (obj.hasOwnProperty(key) && !(obj[key] === undefined && oldVal !== undefined && Array.isArray(obj) === false)) {\n            var newVal = obj[key];\n            if (typeof oldVal == \"object\" && oldVal != null && typeof newVal == \"object\" && newVal != null) {\n                generate(oldVal, newVal, patches, concat(path, key));\n            }\n            else {\n                if (oldVal !== newVal) {\n                    patches.push({\n                        operation: \"replace\",\n                        path: concat(path, key),\n                        value: newVal,\n                        previousValue: oldVal\n                    });\n                }\n            }\n        }\n        else {\n            patches.push({ operation: \"remove\", path: concat(path, key) });\n            deleted = true; // property has been deleted\n        }\n    }\n    if (!deleted && newKeys.length == oldKeys.length) {\n        return;\n    }\n    for (var t = newKeys.length - 1; t >= 0; t--) {\n        var key = newKeys[t];\n        if (!mirror.hasOwnProperty(key) && obj[key] !== undefined) {\n            var newVal = obj[key];\n            var addPath = concat(path, key);\n            // compare deeper additions\n            if (typeof newVal == \"object\" && newVal != null) {\n                generate({}, newVal, patches, addPath);\n            }\n            patches.push({ operation: \"add\", path: addPath, value: newVal });\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"script"}