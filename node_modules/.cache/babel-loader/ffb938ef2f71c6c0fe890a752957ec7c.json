{"ast":null,"code":"var _jsxFileName = \"/Users/bacchus/git/Leap/client/src/game/GameBoard.js\";\nimport React from 'react';\nimport { cellType, CELL_COLORS } from './assets/util.js';\nvar BOARD_SIZE;\nvar PLAYERS;\nexport function GameBoard(props) {\n  //let selectedRow = props.selectedPiece ? props.selectedPiece.row : null;\n  BOARD_SIZE = props.size;\n  PLAYERS = props.players;\n  let rows = [];\n\n  for (let r = 0; r < BOARD_SIZE; r++) {\n    rows.push(React.createElement(Row, {\n      key: r,\n      row: r,\n      board: props.board,\n      selectedPiece: props.selectedPiece,\n      selectCell: props.selectCell,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    }));\n  }\n\n  return React.createElement(\"div\", {\n    className: \"board\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, \" \", rows, \" \");\n}\n\nfunction Row(props) {\n  let cells = [],\n      index,\n      cell;\n\n  for (let c = 0; c < BOARD_SIZE; c++) {\n    index = props.row * BOARD_SIZE + c;\n    cell = props.board.board[index];\n    cells.push(React.createElement(Cell, {\n      key: index //board index\n      ,\n      index: index,\n      val: cell //cell info\n      ,\n      row: props.row,\n      col: c,\n      highlight: props.board.board[index] & 2,\n      selected: index === props.selectedPiece,\n      selectCell: props.selectCell,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }));\n  }\n\n  return React.createElement(\"span\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \" \", cells, \" \");\n}\n\nfunction Cell(props) {\n  let color = CELL_COLORS[cellType(props.row, props.col)];\n  let highlight = props.highlight ? \" highlight\" : \"\";\n  let classes = \"cell \" + color + highlight; //TODO: (props.val & 12) > 0) also counts for \"special cell\" replace this in future\n\n  return React.createElement(\"div\", {\n    className: classes,\n    onClick: () => props.selectCell(props.val, props.index),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, (props.val & 12) > 0 && React.createElement(Piece, {\n    key: props.val >> 5,\n    player: props.val & 12,\n    cloned: props.val >> 4 & 16,\n    selected: props.selected,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }));\n}\n\nfunction Piece(p) {\n  let classes = \"\";\n  classes += PLAYERS[p.player].class;\n  if (p.cloned) classes += \" cloned\";\n\n  if (p.selected) {\n    classes += \" selected\";\n  }\n\n  return React.createElement(\"div\", {\n    className: classes,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  });\n}\n\nexport default GameBoard;","map":{"version":3,"sources":["/Users/bacchus/git/Leap/client/src/game/GameBoard.js"],"names":["React","cellType","CELL_COLORS","BOARD_SIZE","PLAYERS","GameBoard","props","size","players","rows","r","push","board","selectedPiece","selectCell","Row","cells","index","cell","c","row","Cell","color","col","highlight","classes","val","selected","Piece","p","player","class","cloned"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {cellType, CELL_COLORS} from './assets/util.js';\nvar BOARD_SIZE;\nvar PLAYERS;\nexport function GameBoard(props) {\n  //let selectedRow = props.selectedPiece ? props.selectedPiece.row : null;\n  BOARD_SIZE = props.size;\n  PLAYERS = props.players;\n  let rows = [];\n  for(let r=0; r<BOARD_SIZE; r++) {\n    rows.push(<Row\n      key={r}\n      row={r}\n      board={props.board}\n      selectedPiece={props.selectedPiece}\n      selectCell={props.selectCell} />);\n  }\n  return (<div className=\"board\"> {rows} </div>);\n}\n\nfunction Row(props) {\n  let cells = [], index, cell;\n  for(let c=0; c< BOARD_SIZE; c++) {\n    index = props.row*BOARD_SIZE + c;\n    cell = props.board.board[index];\n    cells.push(<Cell\n      key={index} //board index\n      index={index}\n      val={cell} //cell info\n      row={props.row}\n      col={c}\n      highlight={props.board.board[index] & 2}\n      selected={index === props.selectedPiece}\n      selectCell={props.selectCell} />);\n  }\n  return (<span className=\"row\"> {cells} </span>);\n}\n\nfunction Cell(props) {\n  let color = CELL_COLORS[cellType(props.row, props.col)];\n  let highlight = props.highlight ? \" highlight\" : \"\";\n  let classes = \"cell \" + color + highlight;\n  //TODO: (props.val & 12) > 0) also counts for \"special cell\" replace this in future\n  return (\n    <div className={classes} onClick={ () => props.selectCell(props.val, props.index) }>\n      { ((props.val & 12) > 0) && <Piece\n        key={props.val >> 5}\n        player={props.val & 12}\n        cloned={(props.val >> 4) & 16}\n        selected={props.selected} />}\n    </div>\n  );\n}\n\nfunction Piece(p) {\n  let classes = \"\";\n  classes += PLAYERS[p.player].class;\n  if (p.cloned) classes += \" cloned\";\n  if (p.selected) {\n    classes += \" selected\";\n  }\n  return (<div className={classes}></div>)\n}\n\nexport default GameBoard;\n"]},"metadata":{},"sourceType":"module"}