{"ast":null,"code":"import _slicedToArray from \"/Users/bacchus/git/Leap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/bacchus/git/Leap/src/NavModalContent.js\";\nimport React, { useState } from 'react';\nimport './css/menu.css';\nimport Slider from 'rc-slider';\nimport { CSSTransition } from 'react-transition-group';\nimport 'rc-slider/assets/index.css';\n\nfunction NavModalContent(props) {\n  const modalType = {\n    'stats': React.createElement(\"div\", {\n      className: \"stats-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10\n      },\n      __self: this\n    }),\n    'create': React.createElement(NewGame, {\n      begin: props.begin,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    }),\n    'friends': React.createElement(\"div\", {\n      className: \"friends-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    })\n  };\n  return React.createElement(\"div\", {\n    className: \"nav-modal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, modalType[props.type]);\n} //playmode\n//FriendRow\n\n\nfunction NewGame(props) {\n  const _useState = useState(true),\n        _useState2 = _slicedToArray(_useState, 2),\n        mode = _useState2[0],\n        setMode = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        first = _useState4[0],\n        isFirst = _useState4[1];\n\n  let botDifficulty = 5;\n\n  const readyGame = mode => {\n    /*\n    mpFirst: TRUE if in mp-new-online, FALSE if mp-room-invite\n    */\n    mode ? props.begin(mode, {\n      difficulty: botDifficulty,\n      first: first\n    }) : props.begin(mode, {\n      roomURL: 'HASH',\n      first: ''\n    });\n  };\n\n  return React.createElement(\"div\", {\n    className: \"nav-modal-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"playmode-btn-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"playmode-sp-btn\",\n    onClick: () => setMode(true),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"fas fa-user fa-2x\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), \"Singleplayer\"), React.createElement(\"div\", {\n    className: \"playmode-mp-btn\",\n    onClick: () => setMode(false),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"fas fa-user-friends fa-2x\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }), \"Multiplayer\")), React.createElement(CSSTransition, {\n    in: mode,\n    classNames: \"playmode-container\",\n    timeout: 0,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"playmode-config\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"Difficulty\", React.createElement(Slider, {\n    step: 10,\n    defaultValue: botDifficulty,\n    onAfterChange: e => botDifficulty = e / 10,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"Player goes first\", React.createElement(\"input\", {\n    id: \"goFirst\",\n    type: \"checkbox\",\n    className: \"sp-player-goes-first\",\n    checked: first,\n    onChange: () => isFirst(!first),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  })))), React.createElement(CSSTransition, {\n    in: !mode,\n    classNames: \"playmode-container\",\n    timeout: 0,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"playmode-config-mp\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"mp-options\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"mp-new-online\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, \" New Game\", React.createElement(\"div\", {\n    className: \"mp-new-online-desc\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"Start a new game.\")), React.createElement(\"div\", {\n    className: \"mp-new-local\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \" New Local Game\", React.createElement(\"div\", {\n    className: \"mp-new-local-desc\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"If you want to play on the same machine.\")), React.createElement(\"div\", {\n    className: \"mp-join\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \" Have a link? Join Game\", React.createElement(\"input\", {\n    type: \"text\",\n    className: \"mp-room-invite\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }))))), React.createElement(\"button\", {\n    /*TODO: only appear when required input satisfied (sp: just click the playmode, mp: select one of three options)*/\n    className: \"start-game-btn\",\n    onClick: () => readyGame(mode),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, \"Start\"));\n}\n\nexport default NavModalContent;","map":{"version":3,"sources":["/Users/bacchus/git/Leap/src/NavModalContent.js"],"names":["React","useState","Slider","CSSTransition","NavModalContent","props","modalType","begin","type","NewGame","mode","setMode","first","isFirst","botDifficulty","readyGame","difficulty","roomURL","e"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport './css/menu.css';\nimport Slider from 'rc-slider';\nimport { CSSTransition } from 'react-transition-group';\nimport 'rc-slider/assets/index.css';\n\n\nfunction NavModalContent(props){\n  const modalType = {\n    'stats':    <div className='stats-container'/>,\n    'create':   <NewGame begin={props.begin}/>,\n    'friends':  <div className='friends-container'/>,\n  };\n\n  return (\n    <div className='nav-modal'>\n     { modalType[props.type] }\n    </div>\n  );\n}\n//playmode\n//FriendRow\n\nfunction NewGame(props) {\n  const [mode, setMode] = useState(true);\n  const [first, isFirst] = useState(true);\n  let botDifficulty = 5;\n\n  const readyGame = (mode) => {\n    /*\n    mpFirst: TRUE if in mp-new-online, FALSE if mp-room-invite\n    */\n    mode ? props.begin(mode, {difficulty: botDifficulty, first: first})\n         : props.begin(mode, {roomURL: 'HASH', first: ''});\n  };\n\n  return (<div className='nav-modal-container'>\n    <div className='playmode-btn-container'>\n      <div className='playmode-sp-btn' onClick={ () => setMode(true) }>\n        <i className='fas fa-user fa-2x'/>\n        Singleplayer\n      </div>\n      <div className='playmode-mp-btn' onClick={ () => setMode(false) }>\n        <i className='fas fa-user-friends fa-2x'/>\n        Multiplayer\n      </div>\n    </div>\n    <CSSTransition\n      in={mode}\n      classNames= 'playmode-container'\n      timeout={0}\n    >\n      <div className='playmode-config'>\n        Difficulty\n        <Slider\n          step={10}\n          defaultValue={botDifficulty}\n          onAfterChange={(e) => botDifficulty = e/10}\n        />\n        <label>\n          Player goes first\n          <input\n            id='goFirst' type='checkbox'\n            className='sp-player-goes-first'\n            checked={first}\n            onChange= {() => isFirst(!first)}\n            />\n        </label>\n      </div>\n    </CSSTransition>\n    <CSSTransition\n      in={!mode}\n      classNames= 'playmode-container'\n      timeout={0}\n    >\n      <div className='playmode-config-mp'>\n        <div className='mp-options'>\n          <div className='mp-new-online'> New Game\n            <div className='mp-new-online-desc'>\n              Start a new game.\n            </div>\n          </div>\n          <div className='mp-new-local'> New Local Game\n            <div className='mp-new-local-desc'>\n              If you want to play on the same machine.\n            </div>\n          </div>\n          <div className='mp-join'> Have a link? Join Game\n            <input type='text' className='mp-room-invite'/>\n          </div>\n        </div>\n      </div>\n    </CSSTransition>\n    <button /*TODO: only appear when required input satisfied (sp: just click the playmode, mp: select one of three options)*/\n      className='start-game-btn'\n      onClick={ () => readyGame(mode)}>\n      Start\n    </button>\n    </div>\n  );\n}\n\nexport default NavModalContent;\n"]},"metadata":{},"sourceType":"module"}