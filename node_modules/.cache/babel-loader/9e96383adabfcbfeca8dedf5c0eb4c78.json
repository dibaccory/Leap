{"ast":null,"code":"var _jsxFileName = \"/Users/bacchus/git/Leap/client/src/components/Game/index.js\";\nimport React, { useEffect, useState } from 'react';\nimport { object } from 'prop-types';\nimport { connect } from 'react-redux';\nimport { select } from '../../actions/game';\nimport Cell from '../Cell';\nexport class Game extends React.Component {\n  constructor({\n    game\n  }) {\n    super();\n    const player = 4;\n    this.state = {\n      game: game,\n      player: player,\n      move: {\n        to: undefined,\n        from: undefined,\n        captured: undefined\n      },\n      continuedMove: false\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    /*\n    THIS SHOULD BE HANDLED IN SERVER\n    const { game, player } = this.state;\n    if (game.turn === player) {\n      if (!game.getAllMoves(game.turn)) {\n        console.log(`${game.turn} has no more moves!`);\n        this.endTurn(true);\n      }\n    }\n    */\n  }\n\n  selectCell(cell, index) {\n    //call implies it's this user's turn\n    const _this$state = this.state,\n          game = _this$state.game,\n          player = _this$state.player;\n    const highlighted = cell & 2;\n\n    if (game.continuedMove) {\n      //implies current user is moving\n      if (highlighted) this.setDestination(index);else {\n        //TODO: prompt \"end turn?\" option\n        game.switchPlayer(); //sketchy\n\n        this.endTurn();\n      }\n    } else {\n      const pieceType = cell & (8 | 10 | 12);\n\n      if (pieceType) {\n        //if piece\n        const canSelectPiece = !(pieceType ^ player) || pieceType === 10;\n        const hasMoves = game.moves[cell >> 5].length > 0;\n        if (canSelectPiece && hasMoves) this.setPiece(cell, index);else try {\n          if (canSelectPiece) throw 'PIECE HAS NO MOVES';\n          if (hasMoves) throw 'OPPONENT PIECE';\n        } catch (error) {\n          console.log(`CANNOT SELECT: ${error}`);\n        }\n      } else {\n        //if empty cell\n        if (cell & 2) this.move();else console.log('CANNOT SELECT: NOT EMPTY');\n      }\n    }\n  }\n\n  setPiece(cell, index) {\n    const game = this.state.game;\n    const pi = cell >> 5;\n    game.removeHighlight();\n    game.highlightMoves(pi);\n    this.setState({\n      move: {\n        from: index,\n        to: undefined,\n        captured: undefined\n      }\n    });\n  }\n\n  setDestination(to) {\n    this.setState({\n      move: {\n        from: this.state.move.from,\n        to: to,\n        captured: this.state.game.getCapturedPiece(to)\n      }\n    });\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          game = _this$state2.game,\n          move = _this$state2.move;\n    /*  display: grid for the cells  */\n\n    let cells = [];\n\n    for (let index = 0; index < game.board.length; index++) {\n      const cell = game.board[index];\n      const moveType = move.to === index && 'to' || move.from === index && 'from' || move.captured === index && 'captured' || '';\n      cells.push(React.createElement(Cell, {\n        key: index,\n        index: index,\n        cell: cell,\n        highlight: cell & 2,\n        moveType: moveType,\n        select: select.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }));\n    }\n\n    return React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \" \", cells, \" \");\n  }\n\n} //Game.propTypes = { game: object.isRequired, move: object };\n//TODO: make selectors\n//const mapStateToProps = state => ({move: getMoveSelections(state)});\n\nexport default connect()(Game);","map":{"version":3,"sources":["/Users/bacchus/git/Leap/client/src/components/Game/index.js"],"names":["React","useEffect","useState","object","connect","select","Cell","Game","Component","constructor","game","player","state","move","to","undefined","from","captured","continuedMove","componentDidUpdate","prevProps","prevState","selectCell","cell","index","highlighted","setDestination","switchPlayer","endTurn","pieceType","canSelectPiece","hasMoves","moves","length","setPiece","error","console","log","pi","removeHighlight","highlightMoves","setState","getCapturedPiece","render","cells","board","moveType","push","bind"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport { object } from 'prop-types';\nimport { connect } from 'react-redux';\nimport { select } from '../../actions/game';\nimport Cell from '../Cell';\n\nexport class Game extends React.Component {\n  constructor ({ game }) {\n    super();\n    const player = 4;\n    this.state = {\n      game: game,\n      player: player,\n      move: {to: undefined, from: undefined, captured: undefined},\n      continuedMove: false,\n    }\n  }\n\n  componentDidUpdate (prevProps, prevState) {\n    /*\n    THIS SHOULD BE HANDLED IN SERVER\n    const { game, player } = this.state;\n    if (game.turn === player) {\n      if (!game.getAllMoves(game.turn)) {\n        console.log(`${game.turn} has no more moves!`);\n        this.endTurn(true);\n      }\n    }\n    */\n  }\n\n  selectCell (cell, index) { //call implies it's this user's turn\n    const { game, player } = this.state;\n    const highlighted = (cell & 2);\n\n    if (game.continuedMove) { //implies current user is moving\n      if (highlighted) this.setDestination(index);\n      else {\n        //TODO: prompt \"end turn?\" option\n        game.switchPlayer(); //sketchy\n        this.endTurn();\n      }\n    } else {\n      const pieceType = cell & (8 | 10 | 12);\n      if (pieceType) {  //if piece\n        const canSelectPiece = !(pieceType ^ player) || pieceType === 10;\n        const hasMoves = game.moves[cell >> 5].length > 0;\n\n        if (canSelectPiece && hasMoves) this.setPiece(cell, index);\n        else try {\n          if (canSelectPiece) throw 'PIECE HAS NO MOVES';\n          if (hasMoves) throw 'OPPONENT PIECE';\n        } catch (error) {\n          console.log(`CANNOT SELECT: ${error}`);\n        }\n      }\n      else {  //if empty cell\n        if (cell & 2) this.move();\n        else console.log('CANNOT SELECT: NOT EMPTY');\n      }\n  }\n}\n\nsetPiece (cell, index) {\n  const { game } = this.state;\n  const pi = cell >> 5;\n  game.removeHighlight();\n  game.highlightMoves(pi);\n  this.setState({ move: {from: index, to: undefined, captured: undefined} });\n}\n\nsetDestination (to) {\n  this.setState({ move: {from: this.state.move.from, to: to, captured: this.state.game.getCapturedPiece(to)} });\n}\n\nrender () {\n  const { game, move } = this.state;\n  /*  display: grid for the cells  */\n  let cells = [];\n  for (let index = 0; index < game.board.length; index++) {\n    const cell = game.board[index];\n    const moveType = (move.to === index && 'to')\n     || (move.from === index && 'from')\n     || (move.captured === index && 'captured')\n     || '';\n\n    cells.push(<Cell\n      key={index}\n      index={index}\n      cell={cell}\n      highlight={cell & 2}\n      moveType={moveType}\n      select={select.bind(this)} />);\n  }\n  return (<div className=\"board\"> { cells } </div>);\n};\n\n}\n\n//Game.propTypes = { game: object.isRequired, move: object };\n//TODO: make selectors\n//const mapStateToProps = state => ({move: getMoveSelections(state)});\n\nexport default connect(/*mapStateToProps*/)(Game);\n"]},"metadata":{},"sourceType":"module"}