{"ast":null,"code":"var _jsxFileName = \"/Users/bacchus/git/Leap/client/src/components/Game/Game.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { select, moveReady, cacheMove } from '../../actions/game.actions';\nimport Leap from '../../assets/leap';\nimport './Game.css';\nimport Cell from '../Cell';\nexport class Game extends React.Component {\n  constructor({\n    game,\n    move\n  }) {\n    super();\n    const player = 4;\n    this.state = {\n      game: game,\n      player: player,\n      move: move,\n      continuedMove: false\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    /*\n    THIS SHOULD BE HANDLED IN SERVER\n    const { game, player } = this.state;\n    if (game.turn === player) {\n      if (!game.getAllMoves(game.turn)) {\n        console.log(`${game.turn} has no more moves!`);\n        this.endTurn(true);\n      }\n    }\n    */\n  }\n\n  selectCell(cell, index) {\n    //call implies it's this user's turn\n    const _this$state = this.state,\n          game = _this$state.game,\n          player = _this$state.player;\n    const highlighted = cell & 2;\n\n    if (game.continuedMove) {\n      //implies current user is moving\n      if (highlighted) this.setDestination(index);else {\n        //TODO: prompt \"end turn?\" option\n        game.switchPlayer(); //sketchy\n\n        this.endTurn();\n      }\n    } else {\n      const pieceType = cell & (4 | 8 | 12);\n\n      if (pieceType) {\n        //if piece\n        const canSelectPiece = !(pieceType ^ player) || pieceType === 10;\n        const hasMoves = game.moves[cell >> 5].length > 0;\n        if (canSelectPiece && hasMoves) this.setPiece(cell, index);else try {\n          if (!canSelectPiece) throw 'OPPONENT PIECE';\n          if (!hasMoves) throw 'PIECE HAS NO MOVES';\n        } catch (error) {\n          console.log(`CANNOT SELECT: ${error}`);\n        }\n      } else {\n        //if empty cell\n        if (cell & 2) this.setDestination(index);else console.log('CANNOT SELECT: NOT EMPTY');\n      }\n    }\n  }\n\n  setPiece(cell, index) {\n    const game = this.state.game;\n    const pi = cell >> 5;\n    game.removeHighlight();\n    game.highlightMoves(pi);\n    const move = {\n      from: index,\n      to: undefined,\n      captured: undefined\n    };\n    this.setState({\n      move: move\n    });\n    cacheMove(move);\n  }\n\n  setDestination(to) {\n    this.setState({\n      move: {\n        from: this.state.move.from,\n        to: to,\n        captured: this.state.game.getCapturedPiece(to)\n      }\n    });\n    moveReady();\n  }\n  /*\n  move() {\n    const { game, move } = this.state;\n    const { from, to } = move;\n    const pi = game.board[from] >> 5;\n  \n    if (game.doMove(from, to)) { //win\n      this.endTurn(true);\n      return;\n    } else if (game.continuedMove) {\n      game.highlightMoves(pi);\n      this.setState({ game: game, move: {to: to, from: undefined, captured: undefined} });\n    } else {\n      this.endTurn();\n    }\n  }\n  */\n\n\n  render() {\n    const _this$state2 = this.state,\n          game = _this$state2.game,\n          move = _this$state2.move;\n\n    const _game$getConfig = game.getConfig(),\n          BOARD_AREA = _game$getConfig.BOARD_AREA;\n    /*  display: grid for the cells  */\n\n\n    let cells = [];\n\n    for (let index = 0; index < BOARD_AREA; index++) {\n      const cell = game.board[index];\n      const moveType = move.to === index && 'to' || move.from === index && 'from' || move.captured === index && 'captured' || '';\n      cells.push(React.createElement(Cell, {\n        key: index,\n        index: index,\n        cell: cell,\n        highlight: cell & 2,\n        moveType: moveType,\n        select: this.selectCell.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }));\n    }\n\n    return React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \" \", cells, \" \");\n  }\n\n} //Game.propTypes = { game: object.isRequired, move: object };\n//TODO: make selectors\n//const mapStateToProps = state => ({move: getMoveSelections(state)});\n\nconst actions = {\n  cacheMove,\n  moveReady\n};\nexport default connect()(Game);","map":{"version":3,"sources":["/Users/bacchus/git/Leap/client/src/components/Game/Game.js"],"names":["React","connect","select","moveReady","cacheMove","Leap","Cell","Game","Component","constructor","game","move","player","state","continuedMove","componentDidUpdate","prevProps","prevState","selectCell","cell","index","highlighted","setDestination","switchPlayer","endTurn","pieceType","canSelectPiece","hasMoves","moves","length","setPiece","error","console","log","pi","removeHighlight","highlightMoves","from","to","undefined","captured","setState","getCapturedPiece","render","getConfig","BOARD_AREA","cells","board","moveType","push","bind","actions"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { select, moveReady, cacheMove } from '../../actions/game.actions';\nimport Leap from '../../assets/leap';\nimport './Game.css';\nimport Cell from '../Cell';\n\nexport class Game extends React.Component {\n  constructor ({ game, move, }) {\n    super();\n    const player = 4;\n    this.state = {\n      game: game,\n      player: player,\n      move: move,\n      continuedMove: false,\n    }\n  }\n\n  componentDidUpdate (prevProps, prevState) {\n    /*\n    THIS SHOULD BE HANDLED IN SERVER\n    const { game, player } = this.state;\n    if (game.turn === player) {\n      if (!game.getAllMoves(game.turn)) {\n        console.log(`${game.turn} has no more moves!`);\n        this.endTurn(true);\n      }\n    }\n    */\n  }\n\n  selectCell (cell, index) { //call implies it's this user's turn\n    const { game, player } = this.state;\n    const highlighted = (cell & 2);\n\n    if (game.continuedMove) { //implies current user is moving\n      if (highlighted) this.setDestination(index);\n      else {\n        //TODO: prompt \"end turn?\" option\n        game.switchPlayer(); //sketchy\n        this.endTurn();\n      }\n    } else {\n      const pieceType = cell & (4 | 8 | 12);\n      if (pieceType) {  //if piece\n        const canSelectPiece = !(pieceType ^ player) || pieceType === 10;\n        const hasMoves = game.moves[cell >> 5].length > 0;\n\n        if (canSelectPiece && hasMoves) this.setPiece(cell, index);\n        else try {\n          if (!canSelectPiece) throw 'OPPONENT PIECE';\n          if (!hasMoves) throw 'PIECE HAS NO MOVES';\n        } catch (error) {\n          console.log(`CANNOT SELECT: ${error}`);\n        }\n      }\n      else {  //if empty cell\n        if (cell & 2) this.setDestination(index);\n        else console.log('CANNOT SELECT: NOT EMPTY');\n      }\n  }\n}\n\nsetPiece (cell, index) {\n  const { game } = this.state;\n  const pi = cell >> 5;\n  game.removeHighlight();\n  game.highlightMoves(pi);\n  const move = {from: index, to: undefined, captured: undefined};\n  this.setState({ move: move });\n  cacheMove(move);\n}\n\nsetDestination (to) {\n  this.setState({ move: {from: this.state.move.from, to: to, captured: this.state.game.getCapturedPiece(to)} });\n  moveReady();\n}\n/*\nmove() {\n  const { game, move } = this.state;\n  const { from, to } = move;\n  const pi = game.board[from] >> 5;\n\n  if (game.doMove(from, to)) { //win\n    this.endTurn(true);\n    return;\n  } else if (game.continuedMove) {\n    game.highlightMoves(pi);\n    this.setState({ game: game, move: {to: to, from: undefined, captured: undefined} });\n  } else {\n    this.endTurn();\n  }\n}\n*/\n\nrender () {\n  const { game, move } = this.state;\n  const { BOARD_AREA } = game.getConfig();\n  /*  display: grid for the cells  */\n  let cells = [];\n  for (let index = 0; index < BOARD_AREA; index++) {\n    const cell = game.board[index];\n    const moveType = (move.to === index && 'to')\n     || (move.from === index && 'from')\n     || (move.captured === index && 'captured')\n     || '';\n\n    cells.push(<Cell\n      key={index}\n      index={index}\n      cell={cell}\n      highlight={cell & 2}\n      moveType={moveType}\n      select={this.selectCell.bind(this)} />);\n  }\n  return (<div className=\"board\"> { cells } </div>);\n};\n\n}\n\n//Game.propTypes = { game: object.isRequired, move: object };\n//TODO: make selectors\n//const mapStateToProps = state => ({move: getMoveSelections(state)});\n\nconst actions = {\n  cacheMove,\n  moveReady,\n};\n\nexport default connect(/*mapStateToProps*/)(Game);\n"]},"metadata":{},"sourceType":"module"}