{"ast":null,"code":"import socketIOClient from 'socket.io-client'; //import store from '../store/';\n\nimport { ENDPOINT } from '../constants/socket.types';\nimport { USER, LOBBY, ROOM, GAME, CHAT } from '../constants/';\nimport ACTION from '../actions';\n\nconst socketMiddleware = () => {\n  let socket = null;\n\n  const onConnect = store => event => {\n    console.log('Howdy!');\n  };\n\n  const onDisconnect = store => event => {\n    console.log('Bowdy?');\n  };\n\n  const onMessage = dispatch => action => {\n    //TODO: I guess this is where we handle the server data\n    console.log(JSON.stringify(action));\n    if (action.type === LOBBY.UPDATE) dispatch(action);\n  };\n\n  return dispatch => action => {\n    console.log(dispatch);\n\n    switch (action.type) {\n      case 'connect':\n        if (socket) break;\n        socket = socketIOClient(action.host);\n        socket.on('connect', onConnect(dispatch(action))).on('message', onMessage(dispatch(action))).on('disconnect', onDisconnect(dispatch(action)));\n        break;\n\n      case 'disconnect':\n        if (socket) socket.close();\n        socket = null;\n        console.log('Disconnected.');\n        break;\n\n      case USER.LOGIN:\n      case USER.LOGOUT:\n        socket.emit('eventUser', action);\n        dispatch(ACTION.USER.userLogin(action.payload));\n        break;\n\n      case LOBBY.ADD_ROOM:\n      case LOBBY.REMOVE_ROOM:\n      case LOBBY.UPDATE:\n        socket.emit('eventLobby', action);\n        break;\n\n      case ROOM.ENTER:\n      case ROOM.EXIT:\n      case ROOM.SUBMIT_MOVE:\n      case ROOM.END_GAME:\n        socket.emit('eventRoom', action);\n        break;\n\n      case GAME.START:\n      case GAME.SELECT:\n      case GAME.END:\n        socket.emit('eventGame', action);\n        break;\n\n      default:\n        return dispatch(action);\n    }\n  };\n}; // function Socket () {\n//   this.io = socketIOClient.connect('ws://localhost:3001');\n//\n//   this.io\n//     .on('connect', () => console.log('howdy'))\n//     .on(LOBBY.UPDATE, (data) => store.dispatch(ACTION.LOBBY.update(data)))\n//     .on(LOBBY.ADD_ROOM, (data) => store.dispatch(ACTION.LOBBY.update(data)))\n//     .on('recieveMove', data => {\n//       console.log(data);\n//     });\n// }\n//\n// const socket = new Socket();\n\n\nexport default socketMiddleware;","map":{"version":3,"sources":["/Users/bacchus/git/Leap/client/src/middleware/socket.js"],"names":["socketIOClient","ENDPOINT","USER","LOBBY","ROOM","GAME","CHAT","ACTION","socketMiddleware","socket","onConnect","store","event","console","log","onDisconnect","onMessage","dispatch","action","JSON","stringify","type","UPDATE","host","on","close","LOGIN","LOGOUT","emit","userLogin","payload","ADD_ROOM","REMOVE_ROOM","ENTER","EXIT","SUBMIT_MOVE","END_GAME","START","SELECT","END"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,kBAA3B,C,CACA;;AACA,SAASC,QAAT,QAAyB,2BAAzB;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,IAAtB,EAA4BC,IAA5B,EAAkCC,IAAlC,QAA8C,eAA9C;AACA,OAAOC,MAAP,MAAmB,YAAnB;;AAGA,MAAMC,gBAAgB,GAAG,MAAM;AAC7B,MAAIC,MAAM,GAAG,IAAb;;AAEA,QAAMC,SAAS,GAAGC,KAAK,IAAIC,KAAK,IAAI;AAClCC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACD,GAFD;;AAIA,QAAMC,YAAY,GAAGJ,KAAK,IAAIC,KAAK,IAAI;AACrCC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACD,GAFD;;AAIA,QAAME,SAAS,GAAGC,QAAQ,IAAIC,MAAM,IAAI;AACtC;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAYK,IAAI,CAACC,SAAL,CAAeF,MAAf,CAAZ;AACA,QAAIA,MAAM,CAACG,IAAP,KAAgBlB,KAAK,CAACmB,MAA1B,EAAkCL,QAAQ,CAACC,MAAD,CAAR;AACnC,GAJD;;AAMA,SAAOD,QAAQ,IAAIC,MAAM,IAAI;AAC3BL,IAAAA,OAAO,CAACC,GAAR,CAAYG,QAAZ;;AACA,YAAQC,MAAM,CAACG,IAAf;AACE,WAAK,SAAL;AACE,YAAIZ,MAAJ,EAAY;AAEZA,QAAAA,MAAM,GAAGT,cAAc,CAACkB,MAAM,CAACK,IAAR,CAAvB;AACAd,QAAAA,MAAM,CACHe,EADH,CACM,SADN,EACiBd,SAAS,CAACO,QAAQ,CAACC,MAAD,CAAT,CAD1B,EAEGM,EAFH,CAEM,SAFN,EAEiBR,SAAS,CAACC,QAAQ,CAACC,MAAD,CAAT,CAF1B,EAGGM,EAHH,CAGM,YAHN,EAGoBT,YAAY,CAACE,QAAQ,CAACC,MAAD,CAAT,CAHhC;AAIA;;AAEF,WAAK,YAAL;AACE,YAAIT,MAAJ,EAAYA,MAAM,CAACgB,KAAP;AACZhB,QAAAA,MAAM,GAAG,IAAT;AACAI,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA;;AAEF,WAAKZ,IAAI,CAACwB,KAAV;AACA,WAAKxB,IAAI,CAACyB,MAAV;AACElB,QAAAA,MAAM,CAACmB,IAAP,CAAY,WAAZ,EAAyBV,MAAzB;AACAD,QAAAA,QAAQ,CAACV,MAAM,CAACL,IAAP,CAAY2B,SAAZ,CAAsBX,MAAM,CAACY,OAA7B,CAAD,CAAR;AACA;;AAEF,WAAK3B,KAAK,CAAC4B,QAAX;AACA,WAAK5B,KAAK,CAAC6B,WAAX;AACA,WAAK7B,KAAK,CAACmB,MAAX;AACEb,QAAAA,MAAM,CAACmB,IAAP,CAAY,YAAZ,EAA0BV,MAA1B;AACA;;AAEF,WAAKd,IAAI,CAAC6B,KAAV;AACA,WAAK7B,IAAI,CAAC8B,IAAV;AACA,WAAK9B,IAAI,CAAC+B,WAAV;AACA,WAAK/B,IAAI,CAACgC,QAAV;AACE3B,QAAAA,MAAM,CAACmB,IAAP,CAAY,WAAZ,EAAyBV,MAAzB;AACA;;AAEF,WAAKb,IAAI,CAACgC,KAAV;AACA,WAAKhC,IAAI,CAACiC,MAAV;AACA,WAAKjC,IAAI,CAACkC,GAAV;AACE9B,QAAAA,MAAM,CAACmB,IAAP,CAAY,WAAZ,EAAyBV,MAAzB;AACA;;AAGF;AACA,eAAOD,QAAQ,CAACC,MAAD,CAAf;AA5CF;AA8CD,GAhDD;AAiDD,CAlED,C,CAoEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeV,gBAAf","sourcesContent":["import socketIOClient from 'socket.io-client';\n//import store from '../store/';\nimport { ENDPOINT } from '../constants/socket.types';\nimport { USER, LOBBY, ROOM, GAME, CHAT } from '../constants/';\nimport ACTION from '../actions';\n\n\nconst socketMiddleware = () => {\n  let socket = null;\n\n  const onConnect = store => event => {\n    console.log('Howdy!');\n  };\n\n  const onDisconnect = store => event => {\n    console.log('Bowdy?');\n  };\n\n  const onMessage = dispatch => action => {\n    //TODO: I guess this is where we handle the server data\n    console.log(JSON.stringify(action));\n    if (action.type === LOBBY.UPDATE) dispatch(action);\n  };\n\n  return dispatch => action => {\n    console.log(dispatch);\n    switch (action.type) {\n      case 'connect':\n        if (socket) break;\n\n        socket = socketIOClient(action.host);\n        socket\n          .on('connect', onConnect(dispatch(action)))\n          .on('message', onMessage(dispatch(action)))\n          .on('disconnect', onDisconnect(dispatch(action)));\n        break;\n\n      case 'disconnect':\n        if (socket) socket.close();\n        socket = null;\n        console.log('Disconnected.');\n        break;\n\n      case USER.LOGIN:\n      case USER.LOGOUT:\n        socket.emit('eventUser', action);\n        dispatch(ACTION.USER.userLogin(action.payload));\n        break;\n\n      case LOBBY.ADD_ROOM:\n      case LOBBY.REMOVE_ROOM:\n      case LOBBY.UPDATE:\n        socket.emit('eventLobby', action);\n        break;\n\n      case ROOM.ENTER:\n      case ROOM.EXIT:\n      case ROOM.SUBMIT_MOVE:\n      case ROOM.END_GAME:\n        socket.emit('eventRoom', action);\n        break;\n\n      case GAME.START:\n      case GAME.SELECT:\n      case GAME.END:\n        socket.emit('eventGame', action);\n        break;\n\n\n      default:\n      return dispatch(action);\n    }\n  };\n};\n\n// function Socket () {\n//   this.io = socketIOClient.connect('ws://localhost:3001');\n//\n//   this.io\n//     .on('connect', () => console.log('howdy'))\n//     .on(LOBBY.UPDATE, (data) => store.dispatch(ACTION.LOBBY.update(data)))\n//     .on(LOBBY.ADD_ROOM, (data) => store.dispatch(ACTION.LOBBY.update(data)))\n//     .on('recieveMove', data => {\n//       console.log(data);\n//     });\n// }\n//\n// const socket = new Socket();\n\nexport default socketMiddleware;\n"]},"metadata":{},"sourceType":"module"}