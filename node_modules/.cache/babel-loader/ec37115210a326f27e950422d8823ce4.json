{"ast":null,"code":"var _jsxFileName = \"/Users/bacchus/git/Leap/client/src/containers/App/App.js\";\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { bool, array, funca, string, number, object } from 'prop-types';\nimport { getMe, getIsLoggedIn } from '../../selectors/';\nimport ViewStack from '../ViewStack/';\nimport Login from '../Login/';\nimport Room from '../Room/';\nimport BottomNavigation from '../BottomNavigation/';\nimport './app.css';\nimport { v4 as getUUID } from 'uuid';\n\nclass App extends React.Component {\n  constructor({\n    socket,\n    me,\n    isLoggedIn,\n    userLogin\n  }) {\n    super();\n    this.me = me;\n    this.socket = socket;\n    this.isLoggedIn = isLoggedIn;\n\n    if (me.name == '') {\n      var name;\n\n      do {\n        name = prompt(\"username?\");\n      } while (!name);\n\n      userLogin({\n        me: {\n          id: getUUID(),\n          name: name\n        }\n      });\n    } else userLogin({\n      me: me\n    });\n  } //const ClientSocket = React.createContext();\n\n\n  render() {\n    return this.isLoggedIn ? React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(ViewStack, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(Login, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }));\n  }\n\n} //{!isLoggedIn && <Splash/>}\n//<BannerContainer />\n//<HeaderContainer me={me}/> //has settings at upper righthand\n//<CreateGameModal io={io}/>\n//<BottomNavigation/>\n\n\nApp.propTypes = {\n  me: object.isRequired,\n  isLoggedIn: bool.isRequired\n}; //\n\nconst actions = {\n  userLogin\n};\n\nconst mapDispatchToProps = dispatch => bindActionCreators(actions, dispatch);\n\nconst mapStateToProps = state => ({\n  me: getMe(state),\n  isLoggedIn: getIsLoggedIn(state)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/bacchus/git/Leap/client/src/containers/App/App.js"],"names":["React","useState","connect","bindActionCreators","bool","array","funca","string","number","object","getMe","getIsLoggedIn","ViewStack","Login","Room","BottomNavigation","v4","getUUID","App","Component","constructor","socket","me","isLoggedIn","userLogin","name","prompt","id","render","propTypes","isRequired","actions","mapDispatchToProps","dispatch","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,KAAtB,EAA6BC,MAA7B,EAAqCC,MAArC,EAA6CC,MAA7C,QAA2D,YAA3D;AACA,SAASC,KAAT,EAAgBC,aAAhB,QAAqC,kBAArC;AAEA,OAAOC,SAAP,MAAsB,eAAtB;AACA,OAAOC,KAAP,MAAkB,WAAlB;AACA,OAAOC,IAAP,MAAiB,UAAjB;AACA,OAAOC,gBAAP,MAA6B,sBAA7B;AACA,OAAO,WAAP;AAEA,SAASC,EAAE,IAAIC,OAAf,QAA8B,MAA9B;;AAEA,MAAMC,GAAN,SAAkBlB,KAAK,CAACmB,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,CAAC;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,EAAV;AAAcC,IAAAA,UAAd;AAA0BC,IAAAA;AAA1B,GAAD,EAAuC;AAChD;AACA,SAAKF,EAAL,GAAUA,EAAV;AACA,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKE,UAAL,GAAkBA,UAAlB;;AAEA,QAAGD,EAAE,CAACG,IAAH,IAAW,EAAd,EAAkB;AAChB,UAAIA,IAAJ;;AACA,SAAG;AAAEA,QAAAA,IAAI,GAAGC,MAAM,CAAC,WAAD,CAAb;AAA4B,OAAjC,QAAuC,CAACD,IAAxC;;AACAD,MAAAA,SAAS,CAAC;AAACF,QAAAA,EAAE,EAAE;AAACK,UAAAA,EAAE,EAAEV,OAAO,EAAZ;AAAgBQ,UAAAA,IAAI,EAACA;AAArB;AAAL,OAAD,CAAT;AACD,KAJD,MAIOD,SAAS,CAAC;AAACF,MAAAA,EAAE,EAAEA;AAAL,KAAD,CAAT;AACR,GAZ+B,CAchC;;;AACAM,EAAAA,MAAM,GAAI;AACR,WAAO,KAAKL,UAAL,GAEH;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAFG,GAMH;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CANJ;AAUD;;AA1B+B,C,CA4BlC;AACA;AACA;AACA;AACA;;;AAEAL,GAAG,CAACW,SAAJ,GAAgB;AACdP,EAAAA,EAAE,EAAEb,MAAM,CAACqB,UADG;AAEdP,EAAAA,UAAU,EAAEnB,IAAI,CAAC0B;AAFH,CAAhB,C,CAIA;;AACA,MAAMC,OAAO,GAAG;AACZP,EAAAA;AADY,CAAhB;;AAIA,MAAMQ,kBAAkB,GAAGC,QAAQ,IAAI9B,kBAAkB,CAAC4B,OAAD,EAAUE,QAAV,CAAzD;;AAEA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AAChCb,EAAAA,EAAE,EAAEZ,KAAK,CAACyB,KAAD,CADuB;AAEhCZ,EAAAA,UAAU,EAAEZ,aAAa,CAACwB,KAAD;AAFO,CAAL,CAA7B;;AAKA,eAAejC,OAAO,CAACgC,eAAD,EAAkBF,kBAAlB,CAAP,CAA6Cd,GAA7C,CAAf","sourcesContent":["import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { bool, array, funca, string, number, object } from 'prop-types';\nimport { getMe, getIsLoggedIn } from '../../selectors/';\n\nimport ViewStack from '../ViewStack/';\nimport Login from '../Login/';\nimport Room from '../Room/';\nimport BottomNavigation from '../BottomNavigation/';\nimport './app.css';\n\nimport { v4 as getUUID } from 'uuid';\n\nclass App extends React.Component {\n  constructor({ socket, me, isLoggedIn, userLogin}) {\n    super();\n    this.me = me;\n    this.socket = socket;\n    this.isLoggedIn = isLoggedIn;\n\n    if(me.name == '') {\n      var name;\n      do { name = prompt(\"username?\");}while(!name);\n      userLogin({me: {id: getUUID(), name:name} });\n    } else userLogin({me: me });\n  }\n\n  //const ClientSocket = React.createContext();\n  render () {\n    return this.isLoggedIn\n      ? (\n        <div className=\"App\">\n          <ViewStack/>\n          </div>\n      ) : (\n        <div className=\"App\">\n          <Login/>\n        </div>\n      );\n  }\n}\n//{!isLoggedIn && <Splash/>}\n//<BannerContainer />\n//<HeaderContainer me={me}/> //has settings at upper righthand\n//<CreateGameModal io={io}/>\n//<BottomNavigation/>\n\nApp.propTypes = {\n  me: object.isRequired,\n  isLoggedIn: bool.isRequired,\n}\n//\nconst actions = {\n    userLogin,\n};\n\nconst mapDispatchToProps = dispatch => bindActionCreators(actions, dispatch);\n\nconst mapStateToProps = state => ({\n  me: getMe(state),\n  isLoggedIn: getIsLoggedIn(state),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}