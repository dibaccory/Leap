{"ast":null,"code":"var _jsxFileName = \"/Users/bacchus/git/Leap/src/Leap.js\";\nimport React, { Component } from 'react';\nimport './css/ui.css';\nimport { cell_type, in_bounds } from './js/util.js'; //import Board from './js/board.js';\n\nimport Countdown from 'react-countdown-now';\n/*\nTODO:\nhighlight pieces\n\nGame description:\n\n\n\"How to Play\":\n-directions\n-tutorial?\n\nCheck HTML integrity (if somebody is editing it, get mad lol)\n\nmultiplayer\n\n\n\n*/\n\nconst BOARD_SIZE = 8;\nconst PLAYER_ONE = 1;\nconst PLAYER_TWO = 2;\nconst PLAYERS = {\n  [PLAYER_ONE]: {\n    name: \"Player One\",\n    class: \"player-one\"\n  },\n  [PLAYER_TWO]: {\n    name: \"Player Two\",\n    class: \"player-two\"\n  }\n};\nconst CELL_COLORS = [\"gray1\", \"gray2\", \"pink\", \"red\", \"orange\", \"yellow\", \"green\", \"blue\"];\n\nclass Leap extends Component {\n  constructor() {\n    super();\n    this.state = {\n      board: new Board(BOARD_SIZE, PLAYER_ONE, PLAYER_TWO),\n      turn: PLAYER_ONE,\n      continued_move: false,\n      selected_piece: null,\n      winner: null\n    };\n  } //React update method\n\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.turn != this.state.turn) {\n      let board = this.state.board;\n\n      if (!board.moves_left(this.state.turn)) {\n        console.log(\"${this.state.turn} has no more moves!\");\n        this.setState({\n          winner: this.next_player()\n        });\n      }\n    } else {//if is a move continuation, start the timer\n    }\n  }\n\n  select_cell(row, col, cell_highlighted) {\n    //If a move is not a continuation, default case,\n    if (!this.state.continued_move) {\n      if (this.can_select_piece(row, col)) this.set_piece(row, col);else if (this.state.selected_piece) this.handle_move(row, col);\n    } else if (cell_highlighted) this.handle_move(row, col); //if continuation + selects valid move\n\n  }\n\n  handle_move(row, col) {\n    //row, col of destination\n    console.log(\"handling move...\");\n    let board = this.state.board;\n    let sel = this.state.selected_piece;\n    let pi = board.board[sel.row][sel.col];\n\n    if (!board.valid_move(pi, row, col)) {\n      console.log(\"Invalid move!\");\n      return;\n    }\n\n    let is_capture; //Check if move is a clone move; If it is, we need not call do_move\n\n    if (board.is_clone_spawn(pi, row, col)) board.make_clone(pi, row, col);else is_capture = board.do_move(pi, row, col); //if this move is a capturing move and there are more capturing moves\n\n    is_capture && board.can_continue_move(pi) ? this.setState({\n      board: board,\n      turn: this.state.turn,\n      continued_move: is_capture,\n      selected_piece: {\n        row: row,\n        col: col\n      }\n    }) : this.setState({\n      board: board,\n      turn: this.next_player(this.state.turn),\n      continued_move: false,\n      selected_piece: null\n    });\n  }\n\n  can_select_piece(row, col) {\n    let s = this.state;\n    let cell = s.board.board[row][col];\n    if (cell !== null) return false;\n    let player = s.board.pieces[cell].player;\n    return player == s.turn;\n  }\n\n  set_piece(row, col) {\n    this.setState({\n      selected_piece: {\n        row: row,\n        col: col\n      }\n    });\n  }\n\n  next_player() {\n    return this.state.turn == PLAYER_ONE ? PLAYER_TWO : PLAYER_ONE;\n  }\n\n  restart() {\n    this.setState({\n      board: new Board(BOARD_SIZE, PLAYER_ONE, PLAYER_TWO),\n      continued_move: false,\n      turn: PLAYER_ONE,\n      selected_piece: null,\n      winner: null\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"Leap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Leap\")), this.state.winner && React.createElement(Winner, {\n      player: this.state.winner,\n      restart: this.restart.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"Current turn: \", PLAYERS[this.state.turn].name, React.createElement(\"span\", {\n      className: PLAYERS[this.state.turn].class,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    })), React.createElement(Countdown, {\n      date: Date.now() + 10000,\n      intervalDelay: 0,\n      precision: 3,\n      autoStart: this.state.continued_move,\n      onComplete: this.setState({\n        board: this.state.board,\n        turn: this.next_player(this.state.turn),\n        continued_move: false,\n        selected_piece: null\n      }),\n      renderer: d => React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"countdown-s\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, d.seconds), React.createElement(\"span\", {\n        className: \"countdown-ms\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, \":\", d.milliseconds)),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), React.createElement(GameBoard, {\n      board: this.state.board,\n      selected_piece: this.state.selected_piece,\n      select_cell: this.select_cell.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction Winner(props) {\n  let player = PLAYERS[props.player].name;\n  return React.createElement(\"div\", {\n    id: \"winner\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, player, \" has won the game!\"), React.createElement(\"button\", {\n    onClick: props.restart,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, \"Play again?\")));\n}\n\nclass GameBoard extends Component {\n  render() {\n    let selected_row = this.props.selected_piece ? this.props.selected_piece.row : null;\n    let rows = this.props.board.board.map((row, i) => {\n      return React.createElement(Row, {\n        key: i,\n        row: row //board[row]\n        ,\n        selected_piece: i == selected_row ? this.props.selected_piece : null,\n        row_i: i,\n        pieces: this.props.board.pieces,\n        select_cell: this.props.select_cell,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      });\n    });\n    return React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \" \", rows, \" \");\n  }\n\n}\n\nclass Row extends Component {\n  render() {\n    let selected_col = this.props.selected_piece ? this.props.selected_piece.column : null;\n    let cells = this.props.row.map((cell, i) => {\n      return React.createElement(Cell, {\n        key: i,\n        val: cell != null ? this.props.pieces[cell] : null //so this.board[row][col] = {who: p.player | null, highlight: {row: some_row, col: some_col} | null\n        ,\n        row: this.props.row_i,\n        column: i,\n        selected: i == selected_col ? true : false,\n        select_cell: this.props.select_cell,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      });\n    });\n    return React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, \" \", cells, \" \");\n  }\n\n}\n\nclass Cell extends Component {\n  render() {\n    let color = CELL_COLORS[cell_type(this.props.row, this.props.column)];\n    let selection = this.props.selected ? \" selected\" : \"\";\n    let classes = \"cell \" + color + selection;\n    return React.createElement(\"div\", {\n      className: classes,\n      onClick: () => this.props.select_cell(this.props.row, this.props.column),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, this.props.val != null && React.createElement(Piece, {\n      piece: this.props.val,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction Piece(props) {\n  console.log(props.piece);\n  let classes = \"\";\n\n  if (props.piece) {\n    classes += PLAYERS[props.piece.player].class;\n    if (props.piece.cloned) classes += \" cloned\";\n  }\n\n  return React.createElement(\"div\", {\n    className: classes,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  });\n}\n\nexport default Leap;","map":{"version":3,"sources":["/Users/bacchus/git/Leap/src/Leap.js"],"names":["React","Component","cell_type","in_bounds","Countdown","BOARD_SIZE","PLAYER_ONE","PLAYER_TWO","PLAYERS","name","class","CELL_COLORS","Leap","constructor","state","board","Board","turn","continued_move","selected_piece","winner","componentDidUpdate","prevProps","prevState","moves_left","console","log","setState","next_player","select_cell","row","col","cell_highlighted","can_select_piece","set_piece","handle_move","sel","pi","valid_move","is_capture","is_clone_spawn","make_clone","do_move","can_continue_move","s","cell","player","pieces","restart","render","bind","Date","now","d","seconds","milliseconds","Winner","props","GameBoard","selected_row","rows","map","i","Row","selected_col","column","cells","row_i","Cell","color","selection","selected","classes","val","Piece","piece","cloned"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './css/ui.css';\nimport {cell_type, in_bounds} from './js/util.js';\n//import Board from './js/board.js';\nimport Countdown from 'react-countdown-now';\n\n/*\nTODO:\nhighlight pieces\n\nGame description:\n\n\n\"How to Play\":\n-directions\n-tutorial?\n\nCheck HTML integrity (if somebody is editing it, get mad lol)\n\nmultiplayer\n\n\n\n*/\n\nconst BOARD_SIZE = 8;\nconst PLAYER_ONE = 1;\nconst PLAYER_TWO = 2;\nconst PLAYERS = {\n  [PLAYER_ONE]: {\n    name: \"Player One\",\n    class: \"player-one\"\n  },\n  [PLAYER_TWO]: {\n    name: \"Player Two\",\n    class: \"player-two\"\n  }\n}\n\nconst CELL_COLORS = [ \"gray1\", \"gray2\", \"pink\", \"red\", \"orange\", \"yellow\", \"green\", \"blue\"];\n\nclass Leap extends Component {\n  constructor() {\n    super();\n    this.state = { board: new Board(BOARD_SIZE, PLAYER_ONE, PLAYER_TWO),\n                  turn: PLAYER_ONE,\n                  continued_move: false,\n                  selected_piece: null, winner: null };\n  }\n\n  //React update method\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.turn != this.state.turn) {\n      let board = this.state.board;\n      if (!board.moves_left(this.state.turn)) {\n        console.log(\"${this.state.turn} has no more moves!\");\n        this.setState({winner: this.next_player()});\n      }\n    } else {\n      //if is a move continuation, start the timer\n    }\n  }\n\n  select_cell(row, col, cell_highlighted) {\n    //If a move is not a continuation, default case,\n    if (!this.state.continued_move) {\n      if (this.can_select_piece(row, col)) this.set_piece(row, col);\n      else if (this.state.selected_piece)  this.handle_move(row, col);\n    } else if (cell_highlighted) this.handle_move(row, col); //if continuation + selects valid move\n  }\n\n  handle_move(row, col) { //row, col of destination\n\n    console.log(\"handling move...\");\n    let board = this.state.board;\n    let sel = this.state.selected_piece;\n    let pi = board.board[sel.row][sel.col];\n    if (!board.valid_move(pi, row, col)) {\n      console.log(\"Invalid move!\");\n      return;\n    }\n    let is_capture;\n    //Check if move is a clone move; If it is, we need not call do_move\n    if(board.is_clone_spawn(pi,row, col)) board.make_clone(pi, row, col);\n    else is_capture = board.do_move(pi, row, col);\n\n    //if this move is a capturing move and there are more capturing moves\n    (is_capture && board.can_continue_move(pi))\n    ? this.setState( {board: board, turn: this.state.turn, continued_move: is_capture, selected_piece: {row: row, col: col}})\n    : this.setState({board: board, turn: this.next_player(this.state.turn), continued_move: false, selected_piece: null});\n  }\n\n  can_select_piece(row, col) {\n    let s = this.state;\n    let cell = s.board.board[row][col];\n    if (cell !== null) return false;\n    let player = s.board.pieces[cell].player;\n    return player == s.turn;\n  }\n\n  set_piece(row, col) {\n      this.setState({selected_piece: {row: row, col: col}});\n  }\n\n  next_player() {\n    return (this.state.turn == PLAYER_ONE ? PLAYER_TWO : PLAYER_ONE);\n  }\n\n  restart() {\n    this.setState({ board: new Board(BOARD_SIZE, PLAYER_ONE, PLAYER_TWO),\n                    continued_move: false, turn: PLAYER_ONE,\n                    selected_piece: null, winner: null });\n  }\n\n  render() {\n    return (\n      <div className=\"Leap\">\n        <div className=\"App-header\">\n          <h2>Leap</h2>\n        </div>\n        { this.state.winner && <Winner player={this.state.winner} restart={this.restart.bind(this)} /> }\n        <h3>Current turn: {PLAYERS[this.state.turn].name}<span className={PLAYERS[this.state.turn].class}></span></h3>\n        <Countdown date={Date.now() + 10000}\n                   intervalDelay={0}\n                   precision={3}\n                   autoStart={this.state.continued_move}\n                   onComplete={this.setState({\n                      board: this.state.board,\n                      turn: this.next_player(this.state.turn),\n                      continued_move: false, selected_piece: null})}\n                   renderer={d => <div>\n                      <span className=\"countdown-s\">{d.seconds}</span>\n                      <span className=\"countdown-ms\">:{d.milliseconds}</span>\n                   </div>}/>\n        <GameBoard board={this.state.board}\n                   selected_piece={this.state.selected_piece}\n                   select_cell={this.select_cell.bind(this)} />\n      </div>\n    );\n  }\n}\n\n\nfunction Winner(props) {\n  let player = PLAYERS[props.player].name;\n  return (\n    <div id=\"winner\">\n      <div>\n        <p>{player} has won the game!</p>\n        <button onClick={props.restart}>Play again?</button>\n      </div>\n    </div>\n  );\n}\n\nclass GameBoard extends Component {\n  render() {\n    let selected_row = this.props.selected_piece ? this.props.selected_piece.row : null;\n    let rows = this.props.board.board.map((row, i) => {\n      return <Row key={i}\n              row={row} //board[row]\n              selected_piece={i == selected_row ? this.props.selected_piece : null}\n              row_i={i}\n              pieces={this.props.board.pieces}\n              select_cell={this.props.select_cell} />;\n    });\n    return (<div className=\"board\"> {rows} </div>)\n  }\n}\n\nclass Row extends Component {\n  render() {\n    let selected_col = this.props.selected_piece ? this.props.selected_piece.column : null;\n    let cells = this.props.row.map((cell, i) => {\n      return <Cell key={i}\n              val={cell != null ? this.props.pieces[cell] : null} //so this.board[row][col] = {who: p.player | null, highlight: {row: some_row, col: some_col} | null\n              row={this.props.row_i}\n              column={i}\n              selected={i == selected_col ? true : false}\n              select_cell={this.props.select_cell} />\n    });\n    return (<div className=\"row\"> {cells} </div>)\n  }\n}\n\nclass Cell extends Component {\n  render() {\n    let color = CELL_COLORS[cell_type(this.props.row, this.props.column)];\n\n    let selection = this.props.selected ? \" selected\" : \"\";\n    let classes = \"cell \" + color + selection;\n    return (\n      <div className={classes} onClick={() => this.props.select_cell(this.props.row, this.props.column)}>\n        {this.props.val != null && <Piece piece={this.props.val} />}\n      </div>\n    )\n  }\n}\n\nfunction Piece(props) {\n  console.log(props.piece);\n  let classes = \"\";\n  if (props.piece) {\n    classes += PLAYERS[props.piece.player].class;\n    if (props.piece.cloned) classes += \" cloned\";\n  }\n  return (<div className={classes}></div>)\n}\n\nexport default Leap;\n"]},"metadata":{},"sourceType":"module"}