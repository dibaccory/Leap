{"ast":null,"code":"import _objectSpread from \"/Users/bacchus/git/Leap/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/bacchus/git/Leap/client/src/Leap.js\";\nimport React, { Component } from 'react';\nimport socketIOClient from \"socket.io-client\";\nimport './css/ui.css';\nimport Countdown from 'react-countdown-now';\nimport { cellType } from './js/util.js';\nimport Board from './js/board.js';\nimport { UCT as Bot } from './js/ai.js';\nexport var BOARD_SIZE; //const BOARD_AREA = BOARD_SIZE*BOARD_SIZE;\n\nconst playerOne = 4;\nconst playerTwo = 12;\nvar PLAYERS;\nconst CELL_COLORS = [\"gray1\", \"gray2\", \"pink\", \"red\", \"orange\", \"yellow\", \"green\", \"blue\"];\n\nclass Leap extends Component {\n  constructor(props) {\n    super(props);\n    BOARD_SIZE = props.config.size;\n    this.firstPlayer = props.config.players[0].first ? playerOne : playerTwo;\n    this.state = {\n      online: props.config.online,\n      endpoint: window.location.origin + \"//:${ props.config.port }\",\n\n      /*...props.config,*/\n      board: new Board(this.firstPlayer, BOARD_SIZE, 0),\n      // 0 is phaseLayout\n      turn: this.firstPlayer,\n      continuedMove: false,\n      selectedPiece: null,\n      winner: null\n    };\n    /*\n    When we implement colyseus,\n      name: 'Player X' default, change in 'more' section or something\n      class: 'piece '+ chosen color\n      bot: true | false\n    */\n\n    PLAYERS = {\n      [playerOne]: _objectSpread({}, props.config.players[0], {\n        class: \"player-one\"\n      }),\n      [playerTwo]: _objectSpread({}, props.config.players[1], {\n        class: \"player-two\"\n      })\n    }; //if true at this point, then port has been established\n\n    if (props.config.online) {\n      this.send = new CustomEvent('move');\n      this.gameHandler.on('move', this.onUpdateRemote.bind(this));\n    }\n  }\n\n  componentDidMount() {\n    if (this.state.online) {\n      this.send = new CustomEvent('move');\n      this.socket = socketIOClient(this.state.endpoint); //this.socket.on()\n    } //Check if first player is bot\n\n\n    if (PLAYERS[this.state.turn].bot) {\n      var ai = Bot(this.state.board, 5000);\n      this.handleMove(ai.from, ai.to);\n    } else this.state.board.getAllMoves(this.state.turn);\n  } //GOOD PLACE FOR NETWORK REQUEST\n\n  /*\n    componentDidUpdate(prevProps, prevState, snapshot) {\n  \n      //check if current player is bot\n      if(PLAYERS[this.state.turn].bot) {\n        console.log('BOT TIME: ');\n  \n      }\n    }\n    */\n  //React update method\n\n\n  componentDidUpdate(prevProps, prevState) {\n    //this.state.board.highlightPieceMoves();\n    if (prevState.turn !== this.state.turn) {\n      let board = this.state.board;\n\n      if (!board.getAllMoves(this.state.turn)) {\n        console.log(\"${this.state.turn} has no more moves!\");\n        this.setState({\n          winner: board.switchPlayer()\n        });\n      }\n\n      if (PLAYERS[this.state.turn].bot) setTimeout(() => this.botMove(), 200);\n    } else if (this.state.selectedPiece) {//HIGHLIGHT MOVES\n      //if is a move continuation and Counter hasn't started, start the timer\n      //if (this.state.contined_move) {}\n    }\n  }\n\n  botMove() {\n    var ai = new Bot(this.state.board, 1000);\n    this.handleMove(ai.from, ai.to);\n  }\n\n  selectCell(cell, index) {\n    //If a move is not a continuation, default case,\n    if (!this.state.continuedMove) {\n      if (this.canSelectPiece(cell)) this.setPiece(cell, index);else if (this.state.selectedPiece !== null) this.handleMove(this.state.selectedPiece, index);\n    } else {\n      //if continuation\n      //check if move = true..\n      let board = this.state.board;\n      if (cell & 2) this.handleMove(this.state.selectedPiece, index);else {\n        board.removeHighlight(); //TODO: prompt \"end turn?\" option.\n        //right now, let's just end the turn otherwise\n\n        this.setState({\n          board: board,\n          turn: board.switchPlayer(),\n          continuedMove: false,\n          selectedPiece: null\n        });\n      }\n    }\n  }\n\n  handleMove(from, to) {\n    const board = this.state.board;\n    const pi = board.board[from] >> 5; //Have shake animation effect on piece.\n\n    if (!board.validMove(pi, to)) {\n      console.log(\"Invalid move!\");\n      return;\n    }\n\n    console.log(\"handling move...\"); //debugger;\n    //check if win\n\n    if (board.doMove(from, to)) {\n      this.setState({\n        winner: board.switchPlayer()\n      });\n      return;\n    } //If we can jump or leap, or phase\n\n\n    if (board.continuedMove) {\n      board.highlightMoves(pi);\n      this.setState({\n        board: board,\n        turn: board.player,\n        continuedMove: board.continuedMove,\n        selectedPiece: to\n      });\n    } else this.setState({\n      board: board,\n      turn: board.player,\n      continuedMove: false,\n      selectedPiece: null\n    }); //If multiplayer, send board\n\n\n    if (this.send !== undefined) this.dispatchEvent(this.send);\n  }\n\n  canSelectPiece(cell) {\n    //true if cell contains current player's piece AND current player isn't a bot\n    return cell & 4 && (cell & 12) === this.state.turn && !PLAYERS[this.state.turn].bot;\n  }\n\n  setPiece(cell, index) {\n    let board = this.state.board,\n        pi = cell >> 5;\n    board.removeHighlight();\n    board.highlightMoves(pi);\n    this.setState({\n      selectedPiece: index\n    }); //console.log(\"selected piece: \" + this.state.board.board[row][col].who);\n  }\n\n  restart() {\n    this.state.board.removeHighlight();\n    this.state.board.clearMoves();\n    this.setState({\n      board: new Board(this.firstPlayer, BOARD_SIZE, 0),\n      continuedMove: false,\n      turn: this.firstPlayer,\n      //TODO\n      selectedPiece: null,\n      winner: null\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"Leap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, this.state.winner && React.createElement(Winner, {\n      player: this.state.winner,\n      restart: this.restart.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, \"Current turn: \", PLAYERS[this.state.turn].name, React.createElement(\"span\", {\n      className: PLAYERS[this.state.turn].class + \"-token\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"game-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game-options\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }), React.createElement(GameBoard, {\n      board: this.state.board,\n      selectedPiece: this.state.selectedPiece,\n      selectCell: this.selectCell.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"game-menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    })));\n  }\n\n}\n/*\n<Countdown date={Date.now() + 10000}\n           intervalDelay={0}\n           precision={3}\n           autoStart={this.state.continuedMove}\n           renderer={d => <div>\n              <span className=\"countdown-s\">{d.seconds}</span>\n              <span className=\"countdown-ms\">:{d.milliseconds}</span>\n           </div>}/>\n*/\n\n\nfunction Winner(props) {\n  let player = PLAYERS[props.player].name;\n  return React.createElement(\"div\", {\n    id: \"winner\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226\n    },\n    __self: this\n  }, player, \" has won the game!\"), React.createElement(\"button\", {\n    onClick: props.restart,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227\n    },\n    __self: this\n  }, \"Play again?\")));\n}\n\nfunction GameBoard(props) {\n  //let selectedRow = props.selectedPiece ? props.selectedPiece.row : null;\n  let rows = [];\n\n  for (let r = 0; r < BOARD_SIZE; r++) {\n    rows.push(React.createElement(Row, {\n      key: r,\n      row: r,\n      board: props.board,\n      selectedPiece: props.selectedPiece,\n      selectCell: props.selectCell,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }));\n  }\n\n  return React.createElement(\"div\", {\n    className: \"board\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246\n    },\n    __self: this\n  }, \" \", rows, \" \");\n}\n\nfunction Row(props) {\n  let cells = [],\n      index,\n      cell;\n\n  for (let c = 0; c < BOARD_SIZE; c++) {\n    index = props.row * BOARD_SIZE + c;\n    cell = props.board.board[index];\n    cells.push(React.createElement(Cell, {\n      key: index //board index\n      ,\n      index: index,\n      val: cell //cell info\n      ,\n      row: props.row,\n      col: c,\n      highlight: props.board.board[index] & 2,\n      selected: index === props.selectedPiece,\n      selectCell: props.selectCell,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }));\n  }\n\n  return React.createElement(\"span\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264\n    },\n    __self: this\n  }, \" \", cells, \" \");\n}\n\nfunction Cell(props) {\n  let color = CELL_COLORS[cellType(props.row, props.col)];\n  let highlight = props.highlight ? \" highlight\" : \"\";\n  let classes = \"cell \" + color + highlight; //TODO: (props.val & 12) > 0) also counts for \"special cell\" replace this in future\n\n  return React.createElement(\"div\", {\n    className: classes,\n    onClick: () => props.selectCell(props.val, props.index),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273\n    },\n    __self: this\n  }, (props.val & 12) > 0 && React.createElement(Piece, {\n    key: props.val >> 5,\n    player: props.val & 12,\n    cloned: props.val >> 4 & 16,\n    selected: props.selected,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274\n    },\n    __self: this\n  }));\n}\n\nfunction Piece(p) {\n  let classes = \"\";\n  classes += PLAYERS[p.player].class;\n  if (p.cloned) classes += \" cloned\";\n\n  if (p.selected) {\n    classes += \" selected\";\n  }\n\n  return React.createElement(\"div\", {\n    className: classes,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290\n    },\n    __self: this\n  });\n}\n/*\nTODO:\nGame description\n\n\"How to Play\":\n-directions\n-tutorial?\n\n- Pieces are draggable and snap to grid\n    (if center of dragging piece is strictly within calc(cell-margin + cell-height/2) on drop, then select cell where piece dropped)\n    disable animations for all but phase and clone moves.\n\n- Make animations\n    If clone, we animate the original piece and newly created piece with cloning animation\n    If phase, piece fades in/out from center to edges on adj phase  and on far phase\n    if piece has caught:\n      If jump,\n        piece does a small hop to the destinationCell\n        captured bursts into little circles and fades away\n      If leap,\n        piece gets sucked into portal, (SVG points all transform to center of adj phase, timing ease-in-out), and pushed out (reverse animation)\n        if captured on adj phase:\n          captured shakes and does first part of phase animation while piece being sucked in, but then comes out as little circles on other side\n        else:\n          captured bursts into little circles and fades away\n    else:\n      piece does small hop to destination cell\n*/\n\n\nexport default Leap;","map":{"version":3,"sources":["/Users/bacchus/git/Leap/client/src/Leap.js"],"names":["React","Component","socketIOClient","Countdown","cellType","Board","UCT","Bot","BOARD_SIZE","playerOne","playerTwo","PLAYERS","CELL_COLORS","Leap","constructor","props","config","size","firstPlayer","players","first","state","online","endpoint","window","location","origin","board","turn","continuedMove","selectedPiece","winner","class","send","CustomEvent","gameHandler","on","onUpdateRemote","bind","componentDidMount","socket","bot","ai","handleMove","from","to","getAllMoves","componentDidUpdate","prevProps","prevState","console","log","setState","switchPlayer","setTimeout","botMove","selectCell","cell","index","canSelectPiece","setPiece","removeHighlight","pi","validMove","doMove","highlightMoves","player","undefined","dispatchEvent","restart","clearMoves","render","name","Winner","GameBoard","rows","r","push","Row","cells","c","row","Cell","color","col","highlight","classes","val","selected","Piece","p","cloned"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport socketIOClient from \"socket.io-client\";\nimport './css/ui.css';\nimport Countdown from 'react-countdown-now';\nimport {cellType} from './js/util.js';\nimport Board from './js/board.js';\nimport {UCT as Bot} from './js/ai.js';\n\n\nexport var BOARD_SIZE;\n//const BOARD_AREA = BOARD_SIZE*BOARD_SIZE;\nconst playerOne = 4;\nconst playerTwo = 12;\nvar PLAYERS;\n\nconst CELL_COLORS = [ \"gray1\", \"gray2\", \"pink\", \"red\", \"orange\", \"yellow\", \"green\", \"blue\"];\n\nclass Leap extends Component {\n  constructor(props) {\n    super(props);\n    BOARD_SIZE = props.config.size;\n    this.firstPlayer = props.config.players[0].first ? playerOne : playerTwo\n    this.state = {\n      online: props.config.online,\n      endpoint: ( window.location.origin + \"//:${ props.config.port }\" ),\n      /*...props.config,*/\n      board: new Board(this.firstPlayer, BOARD_SIZE, 0), // 0 is phaseLayout\n      turn: this.firstPlayer,\n      continuedMove: false,\n      selectedPiece: null,\n      winner: null\n    };\n\n    /*\n    When we implement colyseus,\n      name: 'Player X' default, change in 'more' section or something\n      class: 'piece '+ chosen color\n      bot: true | false\n    */\n    PLAYERS = {\n      [playerOne]: {\n        ...props.config.players[0],\n        class: \"player-one\"\n      },\n      [playerTwo]: {\n        ...props.config.players[1],\n        class: \"player-two\"\n      }\n    }\n\n    //if true at this point, then port has been established\n    if (props.config.online) {\n      this.send = new CustomEvent('move');\n      this.gameHandler.on('move', this.onUpdateRemote.bind(this));\n    }\n\n  }\n\n  componentDidMount() {\n    if( this.state.online ) {\n      this.send = new CustomEvent('move');\n      this.socket = socketIOClient(this.state.endpoint);\n      //this.socket.on()\n    }\n    //Check if first player is bot\n    if(PLAYERS[this.state.turn].bot) {\n      var ai = Bot(this.state.board, 5000);\n      this.handleMove(ai.from, ai.to);\n    } else this.state.board.getAllMoves(this.state.turn);\n  }\n\n//GOOD PLACE FOR NETWORK REQUEST\n/*\n  componentDidUpdate(prevProps, prevState, snapshot) {\n\n    //check if current player is bot\n    if(PLAYERS[this.state.turn].bot) {\n      console.log('BOT TIME: ');\n\n    }\n  }\n  */\n\n  //React update method\n  componentDidUpdate(prevProps, prevState) {\n    //this.state.board.highlightPieceMoves();\n    if (prevState.turn !== this.state.turn) {\n      let board = this.state.board;\n      if (!board.getAllMoves(this.state.turn)) {\n        console.log(\"${this.state.turn} has no more moves!\");\n        this.setState({winner: board.switchPlayer()});\n      }\n\n      if (PLAYERS[this.state.turn].bot) setTimeout ( () => this.botMove(), 200 );\n\n    } else if (this.state.selectedPiece){\n      //HIGHLIGHT MOVES\n      //if is a move continuation and Counter hasn't started, start the timer\n      //if (this.state.contined_move) {}\n    }\n  }\n\n  botMove() {\n      var ai = new Bot(this.state.board, 1000);\n       this.handleMove(ai.from, ai.to);\n  }\n\n  selectCell(cell, index) {\n    //If a move is not a continuation, default case,\n    if (!this.state.continuedMove) {\n      if (this.canSelectPiece(cell)) this.setPiece(cell, index);\n      else if (this.state.selectedPiece !== null)  this.handleMove(this.state.selectedPiece, index);\n    } else { //if continuation\n      //check if move = true..\n      let board = this.state.board;\n      if (cell & 2) this.handleMove(this.state.selectedPiece, index);\n      else {\n        board.removeHighlight();\n        //TODO: prompt \"end turn?\" option.\n        //right now, let's just end the turn otherwise\n        this.setState({\n          board: board,\n          turn: board.switchPlayer(),\n          continuedMove: false,\n          selectedPiece: null\n        });\n      }\n    }\n  }\n\n  handleMove(from, to) {\n    const board = this.state.board;\n    const pi = board.board[from] >> 5;\n\n    //Have shake animation effect on piece.\n    if (!board.validMove(pi, to)) {\n      console.log(\"Invalid move!\");\n      return;\n    }\n    console.log(\"handling move...\");\n    //debugger;\n\n    //check if win\n    if(board.doMove(from, to)) {\n      this.setState({winner: board.switchPlayer()});\n      return;\n    }\n\n    //If we can jump or leap, or phase\n    if (board.continuedMove) {\n      board.highlightMoves(pi);\n      this.setState({\n        board: board,\n        turn: board.player,\n        continuedMove: board.continuedMove,\n        selectedPiece: to\n      });\n    } else this.setState({\n        board: board,\n        turn: board.player,\n        continuedMove: false,\n        selectedPiece: null\n      });\n\n    //If multiplayer, send board\n    if(this.send !== undefined) this.dispatchEvent(this.send);\n  }\n\n  canSelectPiece(cell) {\n    //true if cell contains current player's piece AND current player isn't a bot\n    return (cell & 4) && ( (cell & 12) === this.state.turn ) && !PLAYERS[this.state.turn].bot;\n  }\n\n  setPiece(cell, index) {\n    let board = this.state.board, pi = cell >> 5;\n    board.removeHighlight();\n    board.highlightMoves(pi);\n    this.setState({selectedPiece: index});\n      //console.log(\"selected piece: \" + this.state.board.board[row][col].who);\n  }\n\n  restart() {\n    this.state.board.removeHighlight();\n    this.state.board.clearMoves();\n    this.setState({ board: new Board(this.firstPlayer, BOARD_SIZE, 0),\n                    continuedMove: false, turn: this.firstPlayer, //TODO\n                    selectedPiece: null, winner: null });\n  }\n\n  render() {\n    return (\n      <div className=\"Leap\">\n        { this.state.winner && <Winner player={this.state.winner} restart={this.restart.bind(this)} /> }\n        <h3>\n          Current turn: {PLAYERS[this.state.turn].name}\n          <span className={PLAYERS[this.state.turn].class+\"-token\"}></span>\n        </h3>\n        <div className=\"game-container\">\n          <div className=\"game-options\"></div>\n          <GameBoard board={this.state.board}\n                     selectedPiece={this.state.selectedPiece}\n                     selectCell={this.selectCell.bind(this)} />\n          <div className=\"game-menu\"></div>\n        </div>\n      </div>\n    );\n  }\n}\n\n/*\n<Countdown date={Date.now() + 10000}\n           intervalDelay={0}\n           precision={3}\n           autoStart={this.state.continuedMove}\n           renderer={d => <div>\n              <span className=\"countdown-s\">{d.seconds}</span>\n              <span className=\"countdown-ms\">:{d.milliseconds}</span>\n           </div>}/>\n*/\n\nfunction Winner(props) {\n  let player = PLAYERS[props.player].name;\n  return (\n    <div id=\"winner\">\n      <div>\n        <p>{player} has won the game!</p>\n        <button onClick={props.restart}>Play again?</button>\n      </div>\n    </div>\n  );\n}\n\n\nfunction GameBoard(props) {\n  //let selectedRow = props.selectedPiece ? props.selectedPiece.row : null;\n\n  let rows = [];\n  for(let r=0; r<BOARD_SIZE; r++) {\n    rows.push(<Row\n      key={r}\n      row={r}\n      board={props.board}\n      selectedPiece={props.selectedPiece}\n      selectCell={props.selectCell} />);\n  }\n  return (<div className=\"board\"> {rows} </div>);\n}\n\nfunction Row(props) {\n  let cells = [], index, cell;\n  for(let c=0; c< BOARD_SIZE; c++) {\n    index = props.row*BOARD_SIZE + c;\n    cell = props.board.board[index];\n    cells.push(<Cell\n      key={index} //board index\n      index={index}\n      val={cell} //cell info\n      row={props.row}\n      col={c}\n      highlight={props.board.board[index] & 2}\n      selected={index === props.selectedPiece}\n      selectCell={props.selectCell} />);\n  }\n  return (<span className=\"row\"> {cells} </span>);\n}\n\nfunction Cell(props) {\n  let color = CELL_COLORS[cellType(props.row, props.col)];\n  let highlight = props.highlight ? \" highlight\" : \"\";\n  let classes = \"cell \" + color + highlight;\n  //TODO: (props.val & 12) > 0) also counts for \"special cell\" replace this in future\n  return (\n    <div className={classes} onClick={ () => props.selectCell(props.val, props.index) }>\n      { ((props.val & 12) > 0) && <Piece\n        key={props.val >> 5}\n        player={props.val & 12}\n        cloned={(props.val >> 4) & 16}\n        selected={props.selected} />}\n    </div>\n  );\n}\n\nfunction Piece(p) {\n  let classes = \"\";\n  classes += PLAYERS[p.player].class;\n  if (p.cloned) classes += \" cloned\";\n  if (p.selected) {\n    classes += \" selected\";\n  }\n  return (<div className={classes}></div>)\n}\n\n\n\n/*\nTODO:\nGame description\n\n\"How to Play\":\n-directions\n-tutorial?\n\n- Pieces are draggable and snap to grid\n    (if center of dragging piece is strictly within calc(cell-margin + cell-height/2) on drop, then select cell where piece dropped)\n    disable animations for all but phase and clone moves.\n\n- Make animations\n    If clone, we animate the original piece and newly created piece with cloning animation\n    If phase, piece fades in/out from center to edges on adj phase  and on far phase\n    if piece has caught:\n      If jump,\n        piece does a small hop to the destinationCell\n        captured bursts into little circles and fades away\n      If leap,\n        piece gets sucked into portal, (SVG points all transform to center of adj phase, timing ease-in-out), and pushed out (reverse animation)\n        if captured on adj phase:\n          captured shakes and does first part of phase animation while piece being sucked in, but then comes out as little circles on other side\n        else:\n          captured bursts into little circles and fades away\n    else:\n      piece does small hop to destination cell\n*/\nexport default Leap;\n"]},"metadata":{},"sourceType":"module"}