{"ast":null,"code":"import { toIndex, getRow, getCol, cellType, phaseLayouts } from './util';\nimport { BIT_SHIFT, BIT_LENGTH, BIT_AREA, BOARD_SIZE, BOARD_AREA } from './Leap'; //single, phase, jump, super-jump\n\n/*\nadj: adjacent\nphase: change portal side\nleap: capture piece while jumping through a portal\njitch: jump, then phase\nswump: switch, then jump\n}\n\nREFACTOR CHANGES:\nLeap.js -> Game.js\n\t<Leap> -> <GameController>\nboard.js -> leap.js\n\n\nBITWISE:\n\nBOARD:\nbit\t\t\t\titem\n0-1\t\t\t\tcellType\t{regular, phase} x {highlight, no highlight}\n2-3\t\t\tcellState\t\t{00: empty, 10: SPECIAL, 01: p1, 11: p2, }   NOTE, if '10' for bits 1 and 2, then it should be a SPECIAL THING???  lmao what if a piece can be moved by either player for a few turns?\n4\t\t\t\t\tisCloned\n5-9\t\t\t\tkey\t\t\t\tIf piece on cell, this is index to reach it\n\nboard[i] = (key << 4 | isCloned << 3 | cellState << 1 | cellType);\nfor i = row * SIZE + col \t\twhere row, col wtr a given piece\n\nPIECE INDEX:\nbit \t\t\titem\n0-2\t\t\t\tcol\n3-(5,6)\t\trow\n\nboard[i] = (row << 4 | col);\nfor i = SIZE*SIZE + key\t\t\twhere\n\n\nhow to store moves\nmoves[i] = [ 0 <= board_index < SIZE*SIZE, ... , ... ] all possible moves for associated piece.\nfor i = SIZE*SIZE\n\n\n\nindex = cell number\nkey = piece index\n\n*/\n//can I generate layouts on seeds? lmao\n\nfunction Board(len, phaseLayout) {\n  this.p1 = 4;\n  this.p2 = 12; //BOARD_SIZE = len;\n  ///BOARD_AREA = len*len;\n\n  (this.board = []).length = BOARD_AREA;\n  (this.moves = []).length = 4 * len;\n  this.board.fill(0);\n  this.bufferSize = 1; //how many rows between the pieces' starting location and the nearest phases\n\n  this.init(phaseLayout); //this.update();\n}\n\nBoard.prototype.init = function (layout) {\n  let pi = 0; //piece Index (ID)\n\n  const len = BOARD_SIZE;\n\n  const calcPhases = index => {\n    let k = 0;\n\n    while (k < phaseLayouts[layout].length) {\n      if ((index ^ phaseLayouts[layout][k]) === 0) return 1;\n      k++;\n    }\n\n    return 0;\n  };\n\n  for (let i = 0; i < len; i++) {\n    this.board[i] = pi << 5 | this.p1; //00000 0 01 00\n\n    this.initPiece(pi);\n    this.board[i + (len - 1) * len] = pi + 2 * BIT_LENGTH << 5 | this.p2; //100000 0 11 00\n\n    this.initPiece(pi + 2 * len);\n    pi++;\n\n    for (let j = 1 + this.bufferSize; j < len - 1 - this.bufferSize; j++) {\n      this.board[i + j * len] |= calcPhases(i + j * len);\n    }\n  }\n};\n\nBoard.prototype.initPiece = function (pi) {\n  this.moves[pi] = [];\n};\n\nBoard.prototype.getPlayer = function (index) {\n  let pid = this.board[index] & 12;\n\n  switch (pid) {\n    case 12:\n      return this.p2;\n\n    case 4:\n      return this.p1;\n\n    default:\n      return 0;\n  } //return ( (this.board[index] & 12) < 12 ) ? this.p1 : this.p2;\n\n}; // moves[pi] = [0000000 0000000] --> [board index of captured piece + board index of destination cell]\n\n\nBoard.prototype.addMove = function (from, to, captured) {\n  captured = captured || 0;\n  let pi = this.board[from] >> 5;\n  this.moves[pi].push((captured << 2 * BIT_SHIFT) + to);\n};\n\nBoard.prototype.update = function (newPiece) {\n  if (newPiece) {\n    //find out which player this piece belongs to then add it within that player's key range (00000)\n    this.board = this.board.map(row => row.map((cell, j) => {\n      if (cell.who != null) {\n        //increment all pi in board after piecesSeparator by one\n        if (cell.who >= this.piecesSeparator) cell.who++; //if piece alive, keep on board\n\n        return this.pieces[cell.who].alive ? {\n          who: cell.who,\n          move: false\n        } : {\n          who: null,\n          move: false\n        };\n      } else return {\n        who: null,\n        move: false\n      };\n    }));\n  } else {\n    this.board = this.board.map(row => row.map((cell, j) => cell.who != null ? this.pieces[cell.who].alive ? {\n      who: cell.who,\n      move: false\n    } : {\n      who: null,\n      move: false\n    } : {\n      who: null,\n      move: false\n    }));\n  }\n};\n/*==========\t\t\t\t\t\t\t\t\t\t\tCLONE\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n\n/* DEPRECIATED: we use bit shifts now\n//Calls every time a clone is made\nBoard.prototype.insertAtSeparationIndex = function () {\n\tfor(let pi=this.piecesSeparator; pi<this.pieces.length; pi++) {\n\t\t//Finds index that separates p1 and p2 pieces\n\t\tif(this.pieces[pi].player !== this.p2) {\n\t\t\tthis.piecesSeparator = pi; //update\n\t\t\treturn pi;\n\t\t}\n\t}\n}\n*/\n\n\nBoard.prototype.makeClone = function (pi, row, col) {\n  /*\n  getPlayer bit\n  */\n  this.board[row * BOARD_SIZE + col] |= this.getPlayer(row, col);\n  this.updateBoard(true);\n  this.board[row][col].who = this.piecesSeparator;\n  return true;\n};\n\nBoard.prototype.canClone = function (i) {\n  let row = i / BIT_LENGTH,\n      piece = this.board[i];\n  let onBoundingColumn = (i + 1) % BIT_LENGTH < 2;\n  let onBoundingRow = (row + 1) % BIT_LENGTH < 2;\n  if (onBoundingColumn || !onBoundingRow || piece & 16) return false;\n  let spawnRow = ((piece >> 5 & 2 * BIT_LENGTH) - 1) / 2;\n  return row ^ spawnRow;\n};\n/* DEPRECIATED: not used\nBoard.prototype.isCloneSpawn = function (pi, row, col) {\n\treturn this.canClone(pi) && this.board[row][col].who === null;\n}\n*/\n\n/*==========\t\t\t\t\t\t\t\t\t\t\tMOVES\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n// Board.prototype.getPlayer = function (pi) {\n// \treturn this.pieces[pi].player;\n// }\n\n\nBoard.prototype.canLeap = function (from, adj, isPhase, bypassCondition) {\n  let to = this.getInverseIndex(from);\n\n  if (isPhase && !this.getPlayer(to)) {\n    let inv = this.getInverseIndex(adj);\n    let phaseAdj = this.getPlayer(adj) & 8;\n    let phaseFar = this.getPlayer(inv) & 8;\n\n    if (phaseAdj ^ phaseFar) {\n      if (bypassCondition) return true;\n      let captured = phaseAdj ? adj : inv;\n      this.addMove(from, to, captured);\n    }\n  } //if neighbor cell is a phase, leap_cell clear, and (enemy piece on phaseAdj XOR enemy piece on phaseFar)\n\n};\n\nBoard.prototype.isJump = function (from, adj, direction, bypassCondition) {\n  //if adj cell occupied, jumpCell in bounds, jumpCell clear, and jumpCell has enemy piece\n  let to = adj + direction;\n\n  if (this.inBounds(to)) {\n    if (this.getPlayer(adj) !== this.getPlayer(from) && !this.getPlayer(to)) {\n      if (bypassCondition % 3) return true;else this.addMove(from, to, adj);\n    }\n  }\n};\n\nBoard.prototype.canPhase = function (from, to, bypassCondition) {\n  let len = BOARD_SIZE - 1; //j = 7-row_index + 7-col_index\n  //let to = ( (len - row) << BIT_SHIFT ) + (len - col);\n\n  let isPhase = this.board[to] & 1;\n  let isDestinationEmpty = this.board[from] & 3; //1 if player piece\n\n  if (isPhase && isDestinationEmpty) {\n    if (bypassCondition % 3) return true;else this.addMove(from, to);\n  }\n}; //reaching this function implies selected piece can be cloned, so piece is on an bounding row\n\n\nBoard.prototype.getCloneSpawnCells = function (from, bypassCondition) {\n  let spawnRow = from / BIT_LENGTH ^ BIT_LENGTH - 1;\n\n  for (let col = 1; col < 7; col++) {\n    let to = spawnRow + col;\n    let spawnCell = this.board[to]; //if spawnCell doesn't have a player on it\n\n    if (!(spawnCell & 4)) {\n      if (bypassCondition % 3) return true;else this.addMove(from, to);\n    }\n  }\n};\n\nBoard.prototype.getMovesInDirection = function (from, adj, bypassCondition) {\n  //check adjacent cells of piece p wrt the boundary\n  let direction = adj - from;\n\n  if (this.inBounds(adj) && direction) {\n    let isPhase = this.board[adj] & 1;\n    if (this.getPlayer(adj) ^ this.getPlayer(from)) if (this.canLeap(from, adj, isPhase, bypassCondition)) return true;\n    if (this.isJump(from, adj, direction, bypassCondition)) return true;else if (bypassCondition % 3 % 2) return true; //adjacent moves\n    else if (!bypassCondition) this.addMove(from, adj);\n  }\n\n  return false;\n};\n/* bypassCondition (HIGHLIGHT BYPASS CONDITION):\n\t\tundefined - default (Store all),\n\t\t1 - bypass all,\n\t\t2 - bypass continuable moves,\n\t\t3 - store continuable moves\n*/\n\n\nBoard.prototype.getMoves = function (from, bypassCondition, r, c) {\n  let row = from >> BIT_SHIFT,\n      col = from & BIT_LENGTH - 1; // move continuation AND has a move in specified direction\n\n  if (bypassCondition === 2 && this.getMovesInDirection(from, row + r << BIT_SHIFT + (col + c), bypassCondition)) return true; // on a phase\n\n  if (this.canPhase(from, this.getInverseIndex(from), bypassCondition)) return true; // able to clone\n\n  if (this.canClone(from) && this.getCloneSpawnCells(from, bypassCondition)) return true; //adjacent\n\n  for (r = -1; r < 2; r++) for (c = -1; c < 2; c++) {\n    let adj = row + r << BIT_SHIFT + (col + c);\n    if (this.getMovesInDirection(from, adj, bypassCondition)) return true;\n  }\n\n  return false;\n}; //Performs move. returns true if caught piece in process, else false\n//NOTE: it is impossible to capture a piece at board index 0\n\n\nBoard.prototype.doMove = function (pi, row, col) {\n  let p = this.pieces[pi]; //begin move\n\n  this.board[p.row][p.col].who = null;\n  let destinationCell = this.board[row][col];\n  let caught = typeof destinationCell.move === \"number\" ? destinationCell.move : false; //caught piece index\n  // moveDirection is defined if and only if any of the following is true (for moving piece p):\n\n  let moveDirection; // (1) p caught a piece\n\n  if (caught) {\n    let c = this.pieces[caught];\n    c.alive = false;\n    this.board[c.row][c.col].who = null; //return direction of move\n    //If leap, then c adjacent at start XOR c adjacent at end\n    //Check adjacency of moving piece to captured piece on starting position and ending position\n\n    let cellAdjStartPos = Math.abs(c.row - p.row) < 2 && Math.abs(c.col - p.col) < 2;\n    let cellAdjEndPos = Math.abs(row - c.row) < 2 && Math.abs(col - c.col) < 2;\n    moveDirection = cellAdjStartPos && cellAdjEndPos ? {\n      rowIncr: Math.sign(row - c.row),\n      colIncr: Math.sign(col - c.col)\n    } //jump\n    : cellAdjStartPos ? {\n      rowIncr: Math.sign(c.row - p.row),\n      colIncr: Math.sign(c.col - p.row)\n    } //leap-> piece adj to capture on start\n    : {\n      rowIncr: Math.sign(row - c.row),\n      colIncr: Math.sign(col - c.col)\n    };\n  } // (2) p LANDS on a phase cell. That is, this move is not a phase.\n  else if (!this.samePhase(p, {\n      row: row,\n      col: col\n    })) moveDirection = {\n      rowIncr: 0,\n      colIncr: 0\n    }; //end move\n\n\n  this.board[row][col].who = pi;\n  p.row = row;\n  p.col = col; // (3) p is able to be cloned\n\n  if (this.canClone(pi)) moveDirection = {\n    rowIncr: 0,\n    colIncr: 0\n  };\n  this.updateBoard();\n  return moveDirection;\n};\n\nBoard.prototype.highlightMoves = function (pi) {\n  let nMoves = this.moves[pi].length;\n\n  for (let i = 0; i < nMoves; i++) {\n    let destinationIndex = this.moves[pi][i] & BIT_AREA - 1;\n    this.board[destinationIndex] |= 2;\n  }\n};\n\nBoard.prototype.removeHighlight = function () {\n  for (let i = 0; i < BOARD_AREA; i++) {\n    if (this.board[i] & 2) this.board[i] = this.board[i] ^ 2;\n  }\n};\n/*==========\t\t\t\t\t\t\t\t\t\t\tINTEGRITY\t\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n\n\nBoard.prototype.getInverseIndex = function (index) {\n  let len = BOARD_SIZE - 1;\n  let row = index >> BIT_SHIFT,\n      col = index & BIT_LENGTH - 1;\n  return (len - row << BIT_SHIFT) + (len - col);\n}; //Don't need -> can use dest cell shit\n\n\nBoard.prototype.samePhase = function (from, to) {\n  let isDestinationPhase = cellType(to.row, to.col);\n  return isDestinationPhase > 1 && isDestinationPhase === cellType(from.row, from.col);\n};\n\nBoard.prototype.inBounds = function (index) {\n  return 0 <= index && index < BIT_AREA;\n};\n\nBoard.prototype.canContinueMove = function (pi, dir) {\n  return dir ? this.getMoves(pi, 2, dir.rowIncr, dir.colIncr) : false;\n};\n\nBoard.prototype.hasMoves = function (pi) {\n  return this.getMoves(pi, 1);\n}; //Player has no more moves when (1): all player's pieces are dead (2): every piece has no moves\n\n\nBoard.prototype.movesLeft = function (player) {\n  for (let pi = 0; pi < this.pieces.length; pi++) {\n    let p = this.pieces[pi];\n\n    if (p.alive && p.player === player) {\n      if (this.hasMoves(pi)) return true;\n    }\n  }\n\n  return false;\n};\n\nBoard.prototype.validMove = function (row, col) {\n  return this.board[row][col].move;\n};\n\nexport default Board;","map":{"version":3,"sources":["/Users/bacchus/git/Leap/src/js/board.js"],"names":["toIndex","getRow","getCol","cellType","phaseLayouts","BIT_SHIFT","BIT_LENGTH","BIT_AREA","BOARD_SIZE","BOARD_AREA","Board","len","phaseLayout","p1","p2","board","length","moves","fill","bufferSize","init","prototype","layout","pi","calcPhases","index","k","i","initPiece","j","getPlayer","pid","addMove","from","to","captured","push","update","newPiece","map","row","cell","who","piecesSeparator","pieces","alive","move","makeClone","col","updateBoard","canClone","piece","onBoundingColumn","onBoundingRow","spawnRow","canLeap","adj","isPhase","bypassCondition","getInverseIndex","inv","phaseAdj","phaseFar","isJump","direction","inBounds","canPhase","isDestinationEmpty","getCloneSpawnCells","spawnCell","getMovesInDirection","getMoves","r","c","doMove","p","destinationCell","caught","moveDirection","cellAdjStartPos","Math","abs","cellAdjEndPos","rowIncr","sign","colIncr","samePhase","highlightMoves","nMoves","destinationIndex","removeHighlight","isDestinationPhase","canContinueMove","dir","hasMoves","movesLeft","player","validMove"],"mappings":"AAAA,SAAQA,OAAR,EAAiBC,MAAjB,EAAyBC,MAAzB,EAAiCC,QAAjC,EAA2CC,YAA3C,QAA8D,QAA9D;AACA,SAAQC,SAAR,EAAmBC,UAAnB,EAA+BC,QAA/B,EAAyCC,UAAzC,EAAqDC,UAArD,QAAsE,QAAtE,C,CACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA;;AAGA,SAASC,KAAT,CAAeC,GAAf,EAAoBC,WAApB,EAAiC;AAEhC,OAAKC,EAAL,GAAU,CAAV;AACA,OAAKC,EAAL,GAAU,EAAV,CAHgC,CAKhC;AACA;;AAEA,GAAC,KAAKC,KAAL,GAAa,EAAd,EAAkBC,MAAlB,GAA2BP,UAA3B;AACA,GAAC,KAAKQ,KAAL,GAAa,EAAd,EAAkBD,MAAlB,GAA2B,IAAEL,GAA7B;AAEA,OAAKI,KAAL,CAAWG,IAAX,CAAgB,CAAhB;AACA,OAAKC,UAAL,GAAkB,CAAlB,CAZgC,CAYX;;AACrB,OAAKC,IAAL,CAAUR,WAAV,EAbgC,CAchC;AACA;;AAIDF,KAAK,CAACW,SAAN,CAAgBD,IAAhB,GAAuB,UAAUE,MAAV,EAAkB;AACrC,MAAIC,EAAE,GAAC,CAAP,CADqC,CAC3B;;AACZ,QAAMZ,GAAG,GAAGH,UAAZ;;AAEA,QAAMgB,UAAU,GAAIC,KAAD,IAAW;AAC7B,QAAIC,CAAC,GAAG,CAAR;;AACA,WAAMA,CAAC,GAACtB,YAAY,CAACkB,MAAD,CAAZ,CAAqBN,MAA7B,EAAqC;AACpC,UAAK,CAACS,KAAK,GAACrB,YAAY,CAACkB,MAAD,CAAZ,CAAqBI,CAArB,CAAP,MAAoC,CAAzC,EAA6C,OAAO,CAAP;AAC7CA,MAAAA,CAAC;AACD;;AACD,WAAO,CAAP;AACA,GAPD;;AASA,OAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAChB,GAAf,EAAoBgB,CAAC,EAArB,EAAyB;AACxB,SAAKZ,KAAL,CAAWY,CAAX,IAAmBJ,EAAE,IAAI,CAAP,GAAY,KAAKV,EAAnC,CADwB,CACgB;;AACxC,SAAKe,SAAL,CAAeL,EAAf;AACA,SAAKR,KAAL,CAAWY,CAAC,GAAG,CAAChB,GAAG,GAAC,CAAL,IAAQA,GAAvB,IAAiCY,EAAE,GAAG,IAAEjB,UAAP,IAAqB,CAAtB,GAA2B,KAAKQ,EAAhE,CAHwB,CAG6C;;AACrE,SAAKc,SAAL,CAAeL,EAAE,GAAG,IAAEZ,GAAtB;AACAY,IAAAA,EAAE;;AAEF,SAAI,IAAIM,CAAC,GAAC,IAAE,KAAKV,UAAjB,EAA6BU,CAAC,GAAClB,GAAG,GAAC,CAAJ,GAAM,KAAKQ,UAA1C,EAAsDU,CAAC,EAAvD,EAA2D;AAC1D,WAAKd,KAAL,CAAWY,CAAC,GAAGE,CAAC,GAAClB,GAAjB,KAAyBa,UAAU,CAACG,CAAC,GAACE,CAAC,GAAClB,GAAL,CAAnC;AACA;AACD;AACF,CAxBD;;AA0BAD,KAAK,CAACW,SAAN,CAAgBO,SAAhB,GAA4B,UAAUL,EAAV,EAAc;AACzC,OAAKN,KAAL,CAAWM,EAAX,IAAiB,EAAjB;AACA,CAFD;;AAIAb,KAAK,CAACW,SAAN,CAAgBS,SAAhB,GAA4B,UAAUL,KAAV,EAAiB;AAC5C,MAAIM,GAAG,GAAI,KAAKhB,KAAL,CAAWU,KAAX,IAAoB,EAA/B;;AACA,UAAQM,GAAR;AACC,SAAK,EAAL;AACC,aAAO,KAAKjB,EAAZ;;AACD,SAAK,CAAL;AACC,aAAO,KAAKD,EAAZ;;AACD;AACC,aAAO,CAAP;AANF,GAF4C,CAU5C;;AACA,CAXD,C,CAaA;;;AACAH,KAAK,CAACW,SAAN,CAAgBW,OAAhB,GAA0B,UAAUC,IAAV,EAAgBC,EAAhB,EAAoBC,QAApB,EAA8B;AACvDA,EAAAA,QAAQ,GAAGA,QAAQ,IAAI,CAAvB;AACA,MAAIZ,EAAE,GAAI,KAAKR,KAAL,CAAWkB,IAAX,KAAoB,CAA9B;AACA,OAAKhB,KAAL,CAAWM,EAAX,EAAea,IAAf,CAAqB,CAACD,QAAQ,IAAI,IAAE9B,SAAf,IAA4B6B,EAAjD;AACA,CAJD;;AAMAxB,KAAK,CAACW,SAAN,CAAgBgB,MAAhB,GAAyB,UAAUC,QAAV,EAAoB;AAC5C,MAAIA,QAAJ,EAAc;AACb;AACA,SAAKvB,KAAL,GAAa,KAAKA,KAAL,CAAWwB,GAAX,CAAeC,GAAG,IAAIA,GAAG,CAACD,GAAJ,CAAQ,CAACE,IAAD,EAAOZ,CAAP,KAAa;AACvD,UAAIY,IAAI,CAACC,GAAL,IAAY,IAAhB,EAAsB;AAAE;AACvB,YAAID,IAAI,CAACC,GAAL,IAAY,KAAKC,eAArB,EAAsCF,IAAI,CAACC,GAAL,GADjB,CAErB;;AACA,eAAO,KAAKE,MAAL,CAAYH,IAAI,CAACC,GAAjB,EAAsBG,KAAtB,GAA8B;AAACH,UAAAA,GAAG,EAAED,IAAI,CAACC,GAAX;AAAgBI,UAAAA,IAAI,EAAC;AAArB,SAA9B,GAA4D;AAACJ,UAAAA,GAAG,EAAE,IAAN;AAAYI,UAAAA,IAAI,EAAC;AAAjB,SAAnE;AACA,OAJD,MAIO,OAAO;AAACJ,QAAAA,GAAG,EAAE,IAAN;AAAYI,QAAAA,IAAI,EAAE;AAAlB,OAAP;AACP,KANkC,CAAtB,CAAb;AAOA,GATD,MASO;AACN,SAAK/B,KAAL,GAAa,KAAKA,KAAL,CAAWwB,GAAX,CAAeC,GAAG,IAAIA,GAAG,CAACD,GAAJ,CAAQ,CAACE,IAAD,EAAOZ,CAAP,KACzCY,IAAI,CAACC,GAAL,IAAY,IAAb,GACG,KAAKE,MAAL,CAAYH,IAAI,CAACC,GAAjB,EAAsBG,KAAtB,GACA;AAACH,MAAAA,GAAG,EAAED,IAAI,CAACC,GAAX;AAAgBI,MAAAA,IAAI,EAAC;AAArB,KADA,GAEA;AAACJ,MAAAA,GAAG,EAAE,IAAN;AAAYI,MAAAA,IAAI,EAAC;AAAjB,KAHH,GAIE;AAACJ,MAAAA,GAAG,EAAE,IAAN;AAAYI,MAAAA,IAAI,EAAE;AAAlB,KALgC,CAAtB,CAAb;AAOA;AACD,CAnBD;AAuBA;;AACA;;;;;;;;;;;;;;AAYApC,KAAK,CAACW,SAAN,CAAgB0B,SAAhB,GAA4B,UAAUxB,EAAV,EAAciB,GAAd,EAAmBQ,GAAnB,EAAwB;AACnD;;;AAGA,OAAKjC,KAAL,CAAWyB,GAAG,GAAChC,UAAJ,GAAiBwC,GAA5B,KAAoC,KAAKlB,SAAL,CAAeU,GAAf,EAAoBQ,GAApB,CAApC;AACA,OAAKC,WAAL,CAAiB,IAAjB;AACA,OAAKlC,KAAL,CAAWyB,GAAX,EAAgBQ,GAAhB,EAAqBN,GAArB,GAA2B,KAAKC,eAAhC;AACA,SAAO,IAAP;AACA,CARD;;AAUAjC,KAAK,CAACW,SAAN,CAAgB6B,QAAhB,GAA2B,UAAUvB,CAAV,EAAa;AACvC,MAAIa,GAAG,GAAGb,CAAC,GAACrB,UAAZ;AAAA,MAAwB6C,KAAK,GAAG,KAAKpC,KAAL,CAAWY,CAAX,CAAhC;AACA,MAAIyB,gBAAgB,GAAG,CAACzB,CAAC,GAAC,CAAH,IAAMrB,UAAN,GAAmB,CAA1C;AACA,MAAI+C,aAAa,GAAG,CAACb,GAAG,GAAG,CAAP,IAAUlC,UAAV,GAAuB,CAA3C;AAEA,MAAG8C,gBAAgB,IAAI,CAACC,aAArB,IAAuCF,KAAK,GAAG,EAAlD,EAAwD,OAAO,KAAP;AAExD,MAAIG,QAAQ,GAAG,CAAC,CAAGH,KAAK,IAAI,CAAV,GAAe,IAAE7C,UAAnB,IAAkC,CAAnC,IAAwC,CAAvD;AACA,SAAQkC,GAAG,GAAGc,QAAd;AACA,CATD;AAWA;;;;;;AAKA;AAEA;AACA;AACA;;;AAEA5C,KAAK,CAACW,SAAN,CAAgBkC,OAAhB,GAA0B,UAAUtB,IAAV,EAAgBuB,GAAhB,EAAqBC,OAArB,EAA8BC,eAA9B,EAA+C;AACxE,MAAIxB,EAAE,GAAG,KAAKyB,eAAL,CAAqB1B,IAArB,CAAT;;AACA,MAAIwB,OAAO,IAAI,CAAE,KAAK3B,SAAL,CAAeI,EAAf,CAAjB,EAAuC;AACtC,QAAI0B,GAAG,GAAG,KAAKD,eAAL,CAAqBH,GAArB,CAAV;AACA,QAAIK,QAAQ,GAAG,KAAK/B,SAAL,CAAe0B,GAAf,IAAsB,CAArC;AACA,QAAIM,QAAQ,GAAG,KAAKhC,SAAL,CAAe8B,GAAf,IAAsB,CAArC;;AAEA,QAAKC,QAAQ,GAAGC,QAAhB,EAA4B;AAC3B,UAAIJ,eAAJ,EAAqB,OAAO,IAAP;AACrB,UAAIvB,QAAQ,GAAG0B,QAAQ,GAAGL,GAAH,GAASI,GAAhC;AACA,WAAK5B,OAAL,CAAaC,IAAb,EAAmBC,EAAnB,EAAuBC,QAAvB;AACA;AACD,GAZuE,CAaxE;;AACA,CAdD;;AAgBAzB,KAAK,CAACW,SAAN,CAAgB0C,MAAhB,GAAyB,UAAU9B,IAAV,EAAgBuB,GAAhB,EAAqBQ,SAArB,EAAgCN,eAAhC,EAAiD;AACzE;AACA,MAAIxB,EAAE,GAAGsB,GAAG,GAACQ,SAAb;;AACA,MAAG,KAAKC,QAAL,CAAc/B,EAAd,CAAH,EAAsB;AACrB,QAAI,KAAKJ,SAAL,CAAe0B,GAAf,MAAwB,KAAK1B,SAAL,CAAeG,IAAf,CAAxB,IAAgD,CAAC,KAAKH,SAAL,CAAeI,EAAf,CAArD,EAAyE;AACxE,UAAGwB,eAAe,GAAC,CAAnB,EAAsB,OAAO,IAAP,CAAtB,KACK,KAAK1B,OAAL,CAAaC,IAAb,EAAmBC,EAAnB,EAAuBsB,GAAvB;AACL;AACD;AACD,CATD;;AAWA9C,KAAK,CAACW,SAAN,CAAgB6C,QAAhB,GAA2B,UAAUjC,IAAV,EAAgBC,EAAhB,EAAoBwB,eAApB,EAAqC;AAC/D,MAAI/C,GAAG,GAAEH,UAAU,GAAG,CAAtB,CAD+D,CAE/D;AACA;;AACA,MAAIiD,OAAO,GAAI,KAAK1C,KAAL,CAAWmB,EAAX,IAAiB,CAAhC;AACA,MAAIiC,kBAAkB,GAAI,KAAKpD,KAAL,CAAWkB,IAAX,IAAmB,CAA7C,CAL+D,CAKd;;AACjD,MAAGwB,OAAO,IAAIU,kBAAd,EAAkC;AACjC,QAAIT,eAAe,GAAC,CAApB,EAAuB,OAAO,IAAP,CAAvB,KACK,KAAK1B,OAAL,CAAaC,IAAb,EAAmBC,EAAnB;AACL;AACD,CAVD,C,CAYA;;;AACAxB,KAAK,CAACW,SAAN,CAAgB+C,kBAAhB,GAAqC,UAAUnC,IAAV,EAAgByB,eAAhB,EAAiC;AACrE,MAAIJ,QAAQ,GAAKrB,IAAI,GAAC3B,UAAL,GAAmBA,UAAU,GAAG,CAAjD;;AACA,OAAI,IAAI0C,GAAG,GAAC,CAAZ,EAAeA,GAAG,GAAC,CAAnB,EAAqBA,GAAG,EAAxB,EAA4B;AAC3B,QAAId,EAAE,GAAGoB,QAAQ,GAAGN,GAApB;AACA,QAAIqB,SAAS,GAAG,KAAKtD,KAAL,CAAWmB,EAAX,CAAhB,CAF2B,CAG3B;;AACA,QAAK,EAAEmC,SAAS,GAAG,CAAd,CAAL,EAAwB;AACvB,UAAIX,eAAe,GAAC,CAApB,EAAuB,OAAO,IAAP,CAAvB,KACK,KAAK1B,OAAL,CAAaC,IAAb,EAAmBC,EAAnB;AACL;AACD;AACD,CAXD;;AAaAxB,KAAK,CAACW,SAAN,CAAgBiD,mBAAhB,GAAsC,UAAUrC,IAAV,EAAgBuB,GAAhB,EAAqBE,eAArB,EAAsC;AAC3E;AACA,MAAIM,SAAS,GAAGR,GAAG,GAAGvB,IAAtB;;AACA,MAAI,KAAKgC,QAAL,CAAcT,GAAd,KAAuBQ,SAA3B,EAAuC;AACtC,QAAIP,OAAO,GAAG,KAAK1C,KAAL,CAAWyC,GAAX,IAAkB,CAAhC;AAEA,QAAM,KAAK1B,SAAL,CAAe0B,GAAf,IAAsB,KAAK1B,SAAL,CAAeG,IAAf,CAA5B,EACA,IAAI,KAAKsB,OAAL,CAAatB,IAAb,EAAmBuB,GAAnB,EAAwBC,OAAxB,EAAiCC,eAAjC,CAAJ,EAAuD,OAAO,IAAP;AACvD,QAAI,KAAKK,MAAL,CAAY9B,IAAZ,EAAkBuB,GAAlB,EAAuBQ,SAAvB,EAAkCN,eAAlC,CAAJ,EAAwD,OAAO,IAAP,CAAxD,KAEK,IAAIA,eAAe,GAAC,CAAhB,GAAkB,CAAtB,EAAyB,OAAO,IAAP,CAAzB,CAAsC;AAAtC,SACA,IAAI,CAACA,eAAL,EAAsB,KAAK1B,OAAL,CAAaC,IAAb,EAAmBuB,GAAnB;AAC3B;;AACD,SAAO,KAAP;AACA,CAdD;AAgBA;;;;;;;;AAMA9C,KAAK,CAACW,SAAN,CAAgBkD,QAAhB,GAA2B,UAAUtC,IAAV,EAAgByB,eAAhB,EAAiCc,CAAjC,EAAoCC,CAApC,EAAuC;AACjE,MAAIjC,GAAG,GAAIP,IAAI,IAAI5B,SAAnB;AAAA,MAA+B2C,GAAG,GAAIf,IAAI,GAAI3B,UAAU,GAAC,CAAzD,CADiE,CAEjE;;AACA,MAAIoD,eAAe,KAAK,CAApB,IAAyB,KAAKY,mBAAL,CAAyBrC,IAAzB,EAAgCO,GAAG,GAAGgC,CAAP,IAAanE,SAAS,IAAI2C,GAAG,GAAGyB,CAAV,CAArD,EAAmEf,eAAnE,CAA7B,EAAmH,OAAO,IAAP,CAHlD,CAIjE;;AACA,MAAI,KAAKQ,QAAL,CAAcjC,IAAd,EAAoB,KAAK0B,eAAL,CAAqB1B,IAArB,CAApB,EAAgDyB,eAAhD,CAAJ,EAAsE,OAAO,IAAP,CALL,CAMjE;;AACA,MAAI,KAAKR,QAAL,CAAcjB,IAAd,KAAuB,KAAKmC,kBAAL,CAAwBnC,IAAxB,EAA8ByB,eAA9B,CAA3B,EAA2E,OAAO,IAAP,CAPV,CAQjE;;AACA,OAAIc,CAAC,GAAC,CAAC,CAAP,EAASA,CAAC,GAAC,CAAX,EAAaA,CAAC,EAAd,EAAkB,KAAIC,CAAC,GAAC,CAAC,CAAP,EAASA,CAAC,GAAC,CAAX,EAAcA,CAAC,EAAf,EAAmB;AACpC,QAAIjB,GAAG,GAAIhB,GAAG,GAAGgC,CAAP,IAAanE,SAAS,IAAI2C,GAAG,GAAGyB,CAAV,CAAhC;AACA,QAAI,KAAKH,mBAAL,CAAyBrC,IAAzB,EAA+BuB,GAA/B,EAAoCE,eAApC,CAAJ,EAA0D,OAAO,IAAP;AAC1D;;AACD,SAAO,KAAP;AACA,CAdD,C,CAgBA;AACA;;;AACAhD,KAAK,CAACW,SAAN,CAAgBqD,MAAhB,GAAyB,UAAUnD,EAAV,EAAciB,GAAd,EAAmBQ,GAAnB,EAAwB;AAChD,MAAI2B,CAAC,GAAG,KAAK/B,MAAL,CAAYrB,EAAZ,CAAR,CADgD,CAEhD;;AACA,OAAKR,KAAL,CAAW4D,CAAC,CAACnC,GAAb,EAAkBmC,CAAC,CAAC3B,GAApB,EAAyBN,GAAzB,GAA+B,IAA/B;AAEA,MAAIkC,eAAe,GAAG,KAAK7D,KAAL,CAAWyB,GAAX,EAAgBQ,GAAhB,CAAtB;AACA,MAAI6B,MAAM,GAAG,OAAOD,eAAe,CAAC9B,IAAvB,KAAiC,QAAjC,GAA4C8B,eAAe,CAAC9B,IAA5D,GAAmE,KAAhF,CANgD,CAMuC;AACvF;;AACA,MAAIgC,aAAJ,CARgD,CAS/C;;AACD,MAAID,MAAJ,EAAY;AACX,QAAIJ,CAAC,GAAG,KAAK7B,MAAL,CAAYiC,MAAZ,CAAR;AACAJ,IAAAA,CAAC,CAAC5B,KAAF,GAAU,KAAV;AACA,SAAK9B,KAAL,CAAW0D,CAAC,CAACjC,GAAb,EAAkBiC,CAAC,CAACzB,GAApB,EAAyBN,GAAzB,GAA+B,IAA/B,CAHW,CAIX;AACA;AACA;;AACA,QAAIqC,eAAe,GAAGC,IAAI,CAACC,GAAL,CAASR,CAAC,CAACjC,GAAF,GAAQmC,CAAC,CAACnC,GAAnB,IAA0B,CAA1B,IAA+BwC,IAAI,CAACC,GAAL,CAASR,CAAC,CAACzB,GAAF,GAAQ2B,CAAC,CAAC3B,GAAnB,IAA0B,CAA/E;AACA,QAAIkC,aAAa,GAAGF,IAAI,CAACC,GAAL,CAASzC,GAAG,GAAGiC,CAAC,CAACjC,GAAjB,IAAwB,CAAxB,IAA6BwC,IAAI,CAACC,GAAL,CAASjC,GAAG,GAAGyB,CAAC,CAACzB,GAAjB,IAAwB,CAAzE;AAEA8B,IAAAA,aAAa,GAAIC,eAAe,IAAIG,aAApB,GACb;AAACC,MAAAA,OAAO,EAAEH,IAAI,CAACI,IAAL,CAAU5C,GAAG,GAACiC,CAAC,CAACjC,GAAhB,CAAV;AAAgC6C,MAAAA,OAAO,EAAEL,IAAI,CAACI,IAAL,CAAUpC,GAAG,GAACyB,CAAC,CAACzB,GAAhB;AAAzC,KADa,CACkD;AADlD,MAEZ+B,eAAe,GACf;AAACI,MAAAA,OAAO,EAAEH,IAAI,CAACI,IAAL,CAAUX,CAAC,CAACjC,GAAF,GAAMmC,CAAC,CAACnC,GAAlB,CAAV;AAAkC6C,MAAAA,OAAO,EAAEL,IAAI,CAACI,IAAL,CAAUX,CAAC,CAACzB,GAAF,GAAM2B,CAAC,CAACnC,GAAlB;AAA3C,KADe,CACoD;AADpD,MAEf;AAAC2C,MAAAA,OAAO,EAAEH,IAAI,CAACI,IAAL,CAAU5C,GAAG,GAACiC,CAAC,CAACjC,GAAhB,CAAV;AAAgC6C,MAAAA,OAAO,EAAEL,IAAI,CAACI,IAAL,CAAUpC,GAAG,GAACyB,CAAC,CAACzB,GAAhB;AAAzC,KAJJ;AAKA,GAfD,CAeE;AAfF,OAgBK,IAAI,CAAC,KAAKsC,SAAL,CAAeX,CAAf,EAAiB;AAACnC,MAAAA,GAAG,EAAEA,GAAN;AAAWQ,MAAAA,GAAG,EAAEA;AAAhB,KAAjB,CAAL,EAA6C8B,aAAa,GAAG;AAACK,MAAAA,OAAO,EAAE,CAAV;AAAaE,MAAAA,OAAO,EAAE;AAAtB,KAAhB,CA1BF,CA4BhD;;;AACA,OAAKtE,KAAL,CAAWyB,GAAX,EAAgBQ,GAAhB,EAAqBN,GAArB,GAA2BnB,EAA3B;AACAoD,EAAAA,CAAC,CAACnC,GAAF,GAAQA,GAAR;AACAmC,EAAAA,CAAC,CAAC3B,GAAF,GAAQA,GAAR,CA/BgD,CAiC/C;;AACD,MAAI,KAAKE,QAAL,CAAc3B,EAAd,CAAJ,EAAuBuD,aAAa,GAAG;AAACK,IAAAA,OAAO,EAAE,CAAV;AAAaE,IAAAA,OAAO,EAAC;AAArB,GAAhB;AACvB,OAAKpC,WAAL;AACA,SAAO6B,aAAP;AACA,CArCD;;AAuCApE,KAAK,CAACW,SAAN,CAAgBkE,cAAhB,GAAiC,UAAUhE,EAAV,EAAc;AAC9C,MAAIiE,MAAM,GAAG,KAAKvE,KAAL,CAAWM,EAAX,EAAeP,MAA5B;;AACA,OAAI,IAAIW,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC6D,MAAf,EAAuB7D,CAAC,EAAxB,EAA4B;AAC3B,QAAI8D,gBAAgB,GAAK,KAAKxE,KAAL,CAAWM,EAAX,EAAeI,CAAf,IAAqBpB,QAAQ,GAAG,CAAzD;AACA,SAAKQ,KAAL,CAAW0E,gBAAX,KAAgC,CAAhC;AACA;AACD,CAND;;AAQA/E,KAAK,CAACW,SAAN,CAAgBqE,eAAhB,GAAkC,YAAY;AAC7C,OAAI,IAAI/D,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAClB,UAAf,EAA2BkB,CAAC,EAA5B,EAAgC;AAC/B,QAAG,KAAKZ,KAAL,CAAWY,CAAX,IAAgB,CAAnB,EAAuB,KAAKZ,KAAL,CAAWY,CAAX,IAAgB,KAAKZ,KAAL,CAAWY,CAAX,IAAgB,CAAjC;AACtB;AACD,CAJD;AAMA;;;AAEAjB,KAAK,CAACW,SAAN,CAAgBsC,eAAhB,GAAkC,UAAUlC,KAAV,EAAiB;AAClD,MAAId,GAAG,GAAGH,UAAU,GAAG,CAAvB;AACA,MAAIgC,GAAG,GAAIf,KAAK,IAAIpB,SAApB;AAAA,MAAgC2C,GAAG,GAAIvB,KAAK,GAAInB,UAAU,GAAC,CAA3D;AACA,SAAO,CAAGK,GAAG,GAAG6B,GAAP,IAAenC,SAAjB,KAAgCM,GAAG,GAAGqC,GAAtC,CAAP;AACA,CAJD,C,CAMA;;;AACAtC,KAAK,CAACW,SAAN,CAAgBiE,SAAhB,GAA4B,UAAUrD,IAAV,EAAgBC,EAAhB,EAAoB;AAC/C,MAAIyD,kBAAkB,GAAGxF,QAAQ,CAAC+B,EAAE,CAACM,GAAJ,EAASN,EAAE,CAACc,GAAZ,CAAjC;AACA,SAAO2C,kBAAkB,GAAG,CAArB,IAA0BA,kBAAkB,KAAKxF,QAAQ,CAAC8B,IAAI,CAACO,GAAN,EAAWP,IAAI,CAACe,GAAhB,CAAhE;AACA,CAHD;;AAKAtC,KAAK,CAACW,SAAN,CAAgB4C,QAAhB,GAA2B,UAAUxC,KAAV,EAAiB;AAC3C,SAAO,KAAKA,KAAL,IAAcA,KAAK,GAAGlB,QAA7B;AACA,CAFD;;AAIAG,KAAK,CAACW,SAAN,CAAgBuE,eAAhB,GAAkC,UAAUrE,EAAV,EAAcsE,GAAd,EAAmB;AACpD,SAAOA,GAAG,GAAG,KAAKtB,QAAL,CAAchD,EAAd,EAAkB,CAAlB,EAAqBsE,GAAG,CAACV,OAAzB,EAAkCU,GAAG,CAACR,OAAtC,CAAH,GAAoD,KAA9D;AACA,CAFD;;AAIA3E,KAAK,CAACW,SAAN,CAAgByE,QAAhB,GAA2B,UAAUvE,EAAV,EAAc;AACxC,SAAO,KAAKgD,QAAL,CAAchD,EAAd,EAAkB,CAAlB,CAAP;AACA,CAFD,C,CAIA;;;AACAb,KAAK,CAACW,SAAN,CAAgB0E,SAAhB,GAA4B,UAAUC,MAAV,EAAkB;AAC7C,OAAI,IAAIzE,EAAE,GAAC,CAAX,EAAcA,EAAE,GAAG,KAAKqB,MAAL,CAAY5B,MAA/B,EAAuCO,EAAE,EAAzC,EAA6C;AAC5C,QAAIoD,CAAC,GAAG,KAAK/B,MAAL,CAAYrB,EAAZ,CAAR;;AACA,QAAGoD,CAAC,CAAC9B,KAAF,IAAW8B,CAAC,CAACqB,MAAF,KAAaA,MAA3B,EAAmC;AAClC,UAAG,KAAKF,QAAL,CAAcvE,EAAd,CAAH,EAAsB,OAAO,IAAP;AACtB;AACD;;AACD,SAAO,KAAP;AACA,CARD;;AAUAb,KAAK,CAACW,SAAN,CAAgB4E,SAAhB,GAA4B,UAAUzD,GAAV,EAAeQ,GAAf,EAAoB;AAC/C,SAAO,KAAKjC,KAAL,CAAWyB,GAAX,EAAgBQ,GAAhB,EAAqBF,IAA5B;AACA,CAFD;;AAIA,eAAepC,KAAf","sourcesContent":["import {toIndex, getRow, getCol, cellType, phaseLayouts} from './util';\nimport {BIT_SHIFT, BIT_LENGTH, BIT_AREA, BOARD_SIZE, BOARD_AREA} from './Leap';\n//single, phase, jump, super-jump\n/*\nadj: adjacent\nphase: change portal side\nleap: capture piece while jumping through a portal\njitch: jump, then phase\nswump: switch, then jump\n}\n\nREFACTOR CHANGES:\nLeap.js -> Game.js\n\t<Leap> -> <GameController>\nboard.js -> leap.js\n\n\nBITWISE:\n\nBOARD:\nbit\t\t\t\titem\n0-1\t\t\t\tcellType\t{regular, phase} x {highlight, no highlight}\n2-3\t\t\tcellState\t\t{00: empty, 10: SPECIAL, 01: p1, 11: p2, }   NOTE, if '10' for bits 1 and 2, then it should be a SPECIAL THING???  lmao what if a piece can be moved by either player for a few turns?\n4\t\t\t\t\tisCloned\n5-9\t\t\t\tkey\t\t\t\tIf piece on cell, this is index to reach it\n\nboard[i] = (key << 4 | isCloned << 3 | cellState << 1 | cellType);\nfor i = row * SIZE + col \t\twhere row, col wtr a given piece\n\nPIECE INDEX:\nbit \t\t\titem\n0-2\t\t\t\tcol\n3-(5,6)\t\trow\n\nboard[i] = (row << 4 | col);\nfor i = SIZE*SIZE + key\t\t\twhere\n\n\nhow to store moves\nmoves[i] = [ 0 <= board_index < SIZE*SIZE, ... , ... ] all possible moves for associated piece.\nfor i = SIZE*SIZE\n\n\n\nindex = cell number\nkey = piece index\n\n*/\n\n\n//can I generate layouts on seeds? lmao\n\n\nfunction Board(len, phaseLayout) {\n\n\tthis.p1 = 4;\n\tthis.p2 = 12;\n\n\t//BOARD_SIZE = len;\n\t///BOARD_AREA = len*len;\n\n\t(this.board = []).length = BOARD_AREA;\n\t(this.moves = []).length = 4*len;\n\n\tthis.board.fill(0);\n\tthis.bufferSize = 1;\t//how many rows between the pieces' starting location and the nearest phases\n\tthis.init(phaseLayout);\n\t//this.update();\n}\n\n\n\nBoard.prototype.init = function (layout) {\n    let pi=0; //piece Index (ID)\n\t\tconst len = BOARD_SIZE;\n\n\t\tconst calcPhases = (index) => {\n\t\t\tlet k = 0;\n\t\t\twhile(k<phaseLayouts[layout].length) {\n\t\t\t\tif ( (index^phaseLayouts[layout][k]) === 0 ) return 1;\n\t\t\t\tk++;\n\t\t\t}\n\t\t\treturn 0;\n\t\t};\n\n\t\tfor(let i=0; i<len; i++) {\n\t\t\tthis.board[i] = ( (pi << 5) | this.p1); //00000 0 01 00\n\t\t\tthis.initPiece(pi);\n\t\t\tthis.board[i + (len-1)*len] = ( (pi + 2*BIT_LENGTH << 5) | this.p2); //100000 0 11 00\n\t\t\tthis.initPiece(pi + 2*len);\n\t\t\tpi++;\n\n\t\t\tfor(let j=1+this.bufferSize; j<len-1-this.bufferSize; j++) {\n\t\t\t\tthis.board[i + j*len] |= calcPhases(i+j*len);\n\t\t\t}\n\t\t}\n}\n\nBoard.prototype.initPiece = function (pi) {\n\tthis.moves[pi] = [];\n}\n\nBoard.prototype.getPlayer = function (index) {\n\tlet pid = (this.board[index] & 12);\n\tswitch (pid) {\n\t\tcase 12:\n\t\t\treturn this.p2;\n\t\tcase 4:\n\t\t\treturn this.p1;\n\t\tdefault:\n\t\t\treturn 0;\n\t}\n\t//return ( (this.board[index] & 12) < 12 ) ? this.p1 : this.p2;\n}\n\n// moves[pi] = [0000000 0000000] --> [board index of captured piece + board index of destination cell]\nBoard.prototype.addMove = function (from, to, captured) {\n\tcaptured = captured || 0;\n\tlet pi = (this.board[from] >> 5);\n\tthis.moves[pi].push( (captured << 2*BIT_SHIFT) + to );\n}\n\nBoard.prototype.update = function (newPiece) {\n\tif (newPiece) {\n\t\t//find out which player this piece belongs to then add it within that player's key range (00000)\n\t\tthis.board = this.board.map(row => row.map((cell, j) => {\n\t\t\tif (cell.who != null) { //increment all pi in board after piecesSeparator by one\n\t\t\t\tif (cell.who >= this.piecesSeparator) cell.who++;\n\t\t\t\t//if piece alive, keep on board\n\t\t\t\treturn this.pieces[cell.who].alive ? {who: cell.who, move:false} : {who: null, move:false};\n\t\t\t} else return {who: null, move: false};\n\t\t}));\n\t} else {\n\t\tthis.board = this.board.map(row => row.map((cell, j) =>\n\t\t\t(cell.who != null)\n\t\t\t? (this.pieces[cell.who].alive\n\t\t\t\t? {who: cell.who, move:false}\n\t\t\t\t: {who: null, move:false})\n\t\t\t: {who: null, move: false}\n\t\t));\n\t}\n}\n\n\n\n/*==========\t\t\t\t\t\t\t\t\t\t\tCLONE\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n/* DEPRECIATED: we use bit shifts now\n//Calls every time a clone is made\nBoard.prototype.insertAtSeparationIndex = function () {\n\tfor(let pi=this.piecesSeparator; pi<this.pieces.length; pi++) {\n\t\t//Finds index that separates p1 and p2 pieces\n\t\tif(this.pieces[pi].player !== this.p2) {\n\t\t\tthis.piecesSeparator = pi; //update\n\t\t\treturn pi;\n\t\t}\n\t}\n}\n*/\nBoard.prototype.makeClone = function (pi, row, col) {\n\t/*\n\tgetPlayer bit\n\t*/\n\tthis.board[row*BOARD_SIZE + col] |= this.getPlayer(row, col)\n\tthis.updateBoard(true);\n\tthis.board[row][col].who = this.piecesSeparator;\n\treturn true;\n}\n\nBoard.prototype.canClone = function (i) {\n\tlet row = i/BIT_LENGTH, piece = this.board[i];\n\tlet onBoundingColumn = (i+1)%BIT_LENGTH < 2;\n\tlet onBoundingRow = (row + 1)%BIT_LENGTH < 2;\n\n\tif(onBoundingColumn || !onBoundingRow || (piece & 16) ) return false;\n\n\tlet spawnRow = (( (piece >> 5) & 2*BIT_LENGTH ) - 1) / 2;\n\treturn (row ^ spawnRow);\n}\n\n/* DEPRECIATED: not used\nBoard.prototype.isCloneSpawn = function (pi, row, col) {\n\treturn this.canClone(pi) && this.board[row][col].who === null;\n}\n*/\n/*==========\t\t\t\t\t\t\t\t\t\t\tMOVES\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n\n// Board.prototype.getPlayer = function (pi) {\n// \treturn this.pieces[pi].player;\n// }\n\nBoard.prototype.canLeap = function (from, adj, isPhase, bypassCondition) {\n\tlet to = this.getInverseIndex(from);\n\tif( isPhase && !(this.getPlayer(to)) ) {\n\t\tlet inv = this.getInverseIndex(adj);\n\t\tlet phaseAdj = this.getPlayer(adj) & 8;\n\t\tlet phaseFar = this.getPlayer(inv) & 8;\n\n\t\tif( (phaseAdj ^ phaseFar) ) {\n\t\t\tif (bypassCondition) return true;\n\t\t\tlet captured = phaseAdj ? adj : inv;\n\t\t\tthis.addMove(from, to, captured);\n\t\t}\n\t}\n\t//if neighbor cell is a phase, leap_cell clear, and (enemy piece on phaseAdj XOR enemy piece on phaseFar)\n}\n\nBoard.prototype.isJump = function (from, adj, direction, bypassCondition) {\n\t//if adj cell occupied, jumpCell in bounds, jumpCell clear, and jumpCell has enemy piece\n\tlet to = adj+direction;\n\tif(this.inBounds(to)) {\n\t\tif (this.getPlayer(adj) !== this.getPlayer(from) && !this.getPlayer(to)) {\n\t\t\tif(bypassCondition%3) return true;\n\t\t\telse this.addMove(from, to, adj);\n\t\t}\n\t}\n}\n\nBoard.prototype.canPhase = function (from, to, bypassCondition) {\n\tlet len= BOARD_SIZE - 1;\n\t//j = 7-row_index + 7-col_index\n\t//let to = ( (len - row) << BIT_SHIFT ) + (len - col);\n\tlet isPhase = (this.board[to] & 1);\n\tlet isDestinationEmpty = (this.board[from] & 3); //1 if player piece\n\tif(isPhase && isDestinationEmpty) {\n\t\tif (bypassCondition%3) return true;\n\t\telse this.addMove(from, to);\n\t}\n}\n\n//reaching this function implies selected piece can be cloned, so piece is on an bounding row\nBoard.prototype.getCloneSpawnCells = function (from, bypassCondition) {\n\tlet spawnRow = ( from/BIT_LENGTH ^ (BIT_LENGTH - 1) );\n\tfor(let col=1; col<7;col++) {\n\t\tlet to = spawnRow + col;\n\t\tlet spawnCell = this.board[to];\n\t\t//if spawnCell doesn't have a player on it\n\t\tif ( !(spawnCell & 4) ) {\n\t\t\tif (bypassCondition%3) return true;\n\t\t\telse this.addMove(from, to);\n\t\t}\n\t}\n}\n\nBoard.prototype.getMovesInDirection = function (from, adj, bypassCondition) {\n\t//check adjacent cells of piece p wrt the boundary\n\tlet direction = adj - from;\n\tif (this.inBounds(adj) && (direction)) {\n\t\tlet isPhase = this.board[adj] & 1;\n\n\t\tif (  this.getPlayer(adj) ^ this.getPlayer(from) )\n\t\tif (this.canLeap(from, adj, isPhase, bypassCondition)) return true;\n\t\tif (this.isJump(from, adj, direction, bypassCondition)) return true;\n\n\t\telse if (bypassCondition%3%2) return true;\t//adjacent moves\n\t\telse if (!bypassCondition) this.addMove(from, adj);\n\t}\n\treturn false;\n}\n\n/* bypassCondition (HIGHLIGHT BYPASS CONDITION):\n\t\tundefined - default (Store all),\n\t\t1 - bypass all,\n\t\t2 - bypass continuable moves,\n\t\t3 - store continuable moves\n*/\nBoard.prototype.getMoves = function (from, bypassCondition, r, c) {\n\tlet row = (from >> BIT_SHIFT), col = (from & (BIT_LENGTH-1));\n\t// move continuation AND has a move in specified direction\n\tif (bypassCondition === 2 && this.getMovesInDirection(from, (row + r) << BIT_SHIFT + (col + c), bypassCondition) ) return true;\n\t// on a phase\n\tif (this.canPhase(from, this.getInverseIndex(from), bypassCondition)) return true;\n\t// able to clone\n\tif (this.canClone(from) && this.getCloneSpawnCells(from, bypassCondition)) return true;\n\t//adjacent\n\tfor(r=-1;r<2;r++) for(c=-1;c<2; c++) {\n\t\tlet adj = (row + r) << BIT_SHIFT + (col + c);\n\t\tif (this.getMovesInDirection(from, adj, bypassCondition)) return true;\n\t}\n\treturn false;\n}\n\n//Performs move. returns true if caught piece in process, else false\n//NOTE: it is impossible to capture a piece at board index 0\nBoard.prototype.doMove = function (pi, row, col) {\n\tlet p = this.pieces[pi];\n\t//begin move\n\tthis.board[p.row][p.col].who = null;\n\n\tlet destinationCell = this.board[row][col];\n\tlet caught = typeof(destinationCell.move) === \"number\" ? destinationCell.move : false; //caught piece index\n\t// moveDirection is defined if and only if any of the following is true (for moving piece p):\n\tlet moveDirection;\n\t\t// (1) p caught a piece\n\tif (caught) {\n\t\tlet c = this.pieces[caught];\n\t\tc.alive = false;\n\t\tthis.board[c.row][c.col].who = null;\n\t\t//return direction of move\n\t\t//If leap, then c adjacent at start XOR c adjacent at end\n\t\t//Check adjacency of moving piece to captured piece on starting position and ending position\n\t\tlet cellAdjStartPos = Math.abs(c.row - p.row) < 2 && Math.abs(c.col - p.col) < 2;\n\t\tlet cellAdjEndPos = Math.abs(row - c.row) < 2 && Math.abs(col - c.col) < 2;\n\n\t\tmoveDirection = (cellAdjStartPos && cellAdjEndPos)\n\t\t\t? {rowIncr: Math.sign(row-c.row), colIncr: Math.sign(col-c.col)}\t//jump\n\t\t\t: (cellAdjStartPos\n\t\t\t\t? {rowIncr: Math.sign(c.row-p.row), colIncr: Math.sign(c.col-p.row)}\t//leap-> piece adj to capture on start\n\t\t\t\t: {rowIncr: Math.sign(row-c.row), colIncr: Math.sign(col-c.col)});\n\t}\t// (2) p LANDS on a phase cell. That is, this move is not a phase.\n\telse if (!this.samePhase(p,{row: row, col: col}))\tmoveDirection = {rowIncr: 0, colIncr: 0};\n\n\t//end move\n\tthis.board[row][col].who = pi;\n\tp.row = row;\n\tp.col = col;\n\n\t\t// (3) p is able to be cloned\n\tif (this.canClone(pi)) moveDirection = {rowIncr: 0, colIncr:0};\n\tthis.updateBoard();\n\treturn moveDirection;\n}\n\nBoard.prototype.highlightMoves = function (pi) {\n\tlet nMoves = this.moves[pi].length;\n\tfor(let i=0; i<nMoves; i++) {\n\t\tlet destinationIndex = ( this.moves[pi][i] & (BIT_AREA - 1) );\n\t\tthis.board[destinationIndex] |= 2;\n\t}\n}\n\nBoard.prototype.removeHighlight = function () {\n\tfor(let i=0; i<BOARD_AREA; i++) {\n\t\tif(this.board[i] & 2) (this.board[i] = this.board[i] ^ 2);\n\t}\n}\n\n/*==========\t\t\t\t\t\t\t\t\t\t\tINTEGRITY\t\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n\nBoard.prototype.getInverseIndex = function (index) {\n\tlet len = BOARD_SIZE - 1;\n\tlet row = (index >> BIT_SHIFT), col = (index & (BIT_LENGTH-1));\n\treturn ( (len - row) << BIT_SHIFT ) + (len - col);\n}\n\n//Don't need -> can use dest cell shit\nBoard.prototype.samePhase = function (from, to) {\n\tlet isDestinationPhase = cellType(to.row, to.col);\n\treturn isDestinationPhase > 1 && isDestinationPhase === cellType(from.row, from.col);\n}\n\nBoard.prototype.inBounds = function (index) {\n\treturn 0 <= index && index < BIT_AREA;\n}\n\nBoard.prototype.canContinueMove = function (pi, dir) {\n\treturn dir ? this.getMoves(pi, 2, dir.rowIncr, dir.colIncr) : false;\n}\n\nBoard.prototype.hasMoves = function (pi) {\n\treturn this.getMoves(pi, 1);\n}\n\n//Player has no more moves when (1): all player's pieces are dead (2): every piece has no moves\nBoard.prototype.movesLeft = function (player) {\n\tfor(let pi=0; pi < this.pieces.length; pi++) {\n\t\tlet p = this.pieces[pi];\n\t\tif(p.alive && p.player === player) {\n\t\t\tif(this.hasMoves(pi)) return true;\n\t\t}\n\t}\n\treturn false;\n}\n\nBoard.prototype.validMove = function (row, col) {\n\treturn this.board[row][col].move;\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}