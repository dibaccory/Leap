{"ast":null,"code":"import _objectSpread from \"/Users/bacchus/git/Leap/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/bacchus/git/Leap/client/src/game/Leap.js\";\nimport React, { Component } from 'react';\nimport './css/ui.css'; //import Countdown from 'react-countdown-now';\n\nimport { Winner } from './Announcements';\nimport { GameBoard } from './GameBoard';\nimport Board from './assets/board.js';\nimport { UCT as Bot } from './assets/ai.js';\nconst playerOne = 4;\nconst playerTwo = 12;\nvar PLAYERS;\nvar BOARD_SIZE;\n\nclass Leap extends Component {\n  constructor(props) {\n    super(props);\n    BOARD_SIZE = props.config.size;\n    PLAYERS = {\n      [playerOne]: {\n        class: \"player-one\"\n      },\n      [playerTwo]: {\n        class: \"player-two\"\n      }\n    };\n\n    if (props.config.online) {\n      //  const endpoint = ( window.location.origin + `//:${ props.config.port }` );\n      const gameBoardRecieve = b => {\n        const board = this.state.board.set(b);\n        this.setState({\n          board: board,\n          turn: board.player\n        });\n      };\n\n      this.state = {\n        online: true,\n        id: props.gameid,\n        ready: false\n      };\n      this.io = props.io;\n      this.io.on('gameBoardRecieve', board => gameBoardRecieve(board));\n      this.io.on('gameLoad', (user, game) => this.loadGame(user, game));\n      this.io.on('move', game => {//game.\n      });\n    } else {\n      //LOCAL GAME\n      this.firstPlayer = props.config.players[0].first ? playerOne : playerTwo;\n      this.state = {\n        online: false,\n        board: new Board(this.firstPlayer, BOARD_SIZE, 0),\n        // 0 is phaseLayout\n        turn: this.firstPlayer,\n        continuedMove: false,\n        selectedPiece: null,\n        winner: null\n      };\n      PLAYERS = {\n        [playerOne]: _objectSpread({}, props.config.players[0], {\n          class: \"player-one\"\n        }),\n        [playerTwo]: _objectSpread({}, props.config.players[1], {\n          class: \"player-two\"\n        })\n      };\n    }\n  }\n\n  loadGame(user, game) {\n    const isHost = user.name === game.host;\n    const sidesFull = !(game.playerOne || game.playerTwo);\n\n    const initGameState = () => {\n      const firstPlayer = game.hostGoesFirst ? playerOne : playerTwo;\n      const board = new Board(firstPlayer, BOARD_SIZE, 0);\n      game.board = board;\n      return {\n        online: true,\n        board: board,\n        turn: firstPlayer,\n        continuedMove: false,\n        selectedPiece: null,\n        winner: null,\n        ready: true\n      };\n    };\n\n    if (game.hostGoesFirst) {\n      game.playerOne = game.playerOne || game.host;\n      game.playerTwo = game.playerTwo || user.name;\n      this.player = playerTwo;\n    } else {\n      game.playerOne = game.playerOne || user.name;\n      game.playerTwo = game.playerTwo || game.host;\n      this.player = playerOne;\n    } //if game.board exists, load the game details\n    //if game.invite === user.name, then set user as appropriate player\n\n\n    if (game.board) {\n      this.io.emit('gameSet', game);\n      const board = new Board(null, BOARD_SIZE, 0);\n      board.set(game.board);\n      this.setState({\n        online: true,\n        board: board,\n        turn: board.player,\n        continuedMove: false,\n        selectedPiece: null,\n        winner: null,\n        ready: true\n      });\n    } else {\n      this.io.emit('gameSet', game);\n      this.setState(initGameState());\n    }\n\n    PLAYERS[playerOne].name = game.playerOne;\n    PLAYERS[playerTwo].name = game.playerTwo;\n  }\n\n  componentDidMount() {\n    if (this.state.online) {\n      this.io.emit('gameEnter', this.state.id);\n      this.io.on('userActive', player => {\n        console.log(`${player.name} has joined as player ${this.player & 8 ? 'PLAYER TWO' : 'PLAYER ONE'}`);\n      });\n    } //Check if first player is bot\n    else if (PLAYERS[this.state.turn].bot) {\n        var ai = Bot(this.state.board, 5000);\n        this.handleMove(ai.from, ai.to);\n      } else this.state.board.getAllMoves(this.state.turn);\n  } //React update method\n\n\n  componentDidUpdate(prevProps, prevState) {\n    //this.state.board.highlightPieceMoves();\n    if (prevState.turn !== this.state.turn) {\n      let board = this.state.board;\n\n      if (!board.getAllMoves(this.state.turn)) {\n        console.log(\"${this.state.turn} has no more moves!\");\n        this.setState({\n          winner: board.switchPlayer()\n        });\n      }\n\n      if (PLAYERS[this.state.turn].bot) setTimeout(() => this.botMove(), 200);\n    } else if (this.state.selectedPiece) {} //if is a move continuation and Counter hasn't started, start the timer\n\n  }\n\n  botMove() {\n    var ai = new Bot(this.state.board, 1000);\n    this.handleMove(ai.from, ai.to);\n  }\n\n  selectCell(cell, index) {\n    //If a move is not a continuation, default case,\n    if (!this.state.continuedMove) {\n      if (this.canSelectPiece(cell)) this.setPiece(cell, index);else if (this.state.selectedPiece !== null) this.handleMove(this.state.selectedPiece, index);\n    } else {\n      //if continuation\n      //check if move = true..\n      let board = this.state.board;\n      if (cell & 2) this.handleMove(this.state.selectedPiece, index);else {\n        board.removeHighlight(); //TODO: prompt \"end turn?\" option.\n        //right now, let's just end the turn otherwise\n\n        this.setState({\n          board: board,\n          turn: board.switchPlayer(),\n          continuedMove: false,\n          selectedPiece: null\n        });\n      }\n    }\n  }\n\n  handleMove(from, to) {\n    const board = this.state.board;\n    const pi = board.board[from] >> 5; //Have shake animation effect on piece.\n\n    if (!board.validMove(pi, to)) {\n      console.log(\"Invalid move!\");\n      return;\n    } //check if win\n\n\n    if (board.doMove(from, to)) {\n      this.setState({\n        winner: board.player\n      });\n      return;\n    }\n\n    if (this.state.online) this.io.emit('gameBoardSend', this.state.id, board); //If we can phase, clone, or capture\n\n    if (board.continuedMove) {\n      board.highlightMoves(pi);\n      this.setState({\n        board: board,\n        turn: board.player,\n        continuedMove: board.continuedMove,\n        selectedPiece: to\n      });\n    } else {\n      this.setState({\n        board: board,\n        turn: board.player,\n        continuedMove: false,\n        selectedPiece: null\n      });\n    }\n  }\n\n  canSelectPiece(cell) {\n    return this.state.online ? cell & 4 && (cell & 12) === this.state.turn && this.player === this.state.turn : cell & 4 && (cell & 12) === this.state.turn && !PLAYERS[this.state.turn].bot;\n  }\n\n  setPiece(cell, index) {\n    let board = this.state.board,\n        pi = cell >> 5;\n    board.removeHighlight();\n    board.highlightMoves(pi);\n    this.setState({\n      selectedPiece: index\n    }); //console.log(\"selected piece: \" + this.state.board.board[row][col].who);\n  }\n\n  restart() {\n    this.state.board.removeHighlight();\n    this.state.board.clearMoves();\n    this.setState({\n      board: new Board(this.firstPlayer, BOARD_SIZE, 0),\n      continuedMove: false,\n      turn: this.firstPlayer,\n      //TODO\n      selectedPiece: null,\n      winner: null\n    });\n  }\n\n  render() {\n    if (this.state.ready) {\n      const player = PLAYERS[this.state.turn].name;\n      const turn = player ? `Current Player: ${player}` : 'Waiting for player...';\n      return React.createElement(\"div\", {\n        className: \"Leap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }, this.state.winner && React.createElement(Winner, {\n        player: PLAYERS[this.state.winner],\n        restart: this.restart.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }, turn, React.createElement(\"span\", {\n        className: PLAYERS[this.state.turn].class + \"-token\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"game-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"game-options\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }), React.createElement(GameBoard, {\n        board: this.state.board,\n        size: BOARD_SIZE,\n        players: PLAYERS,\n        selectedPiece: this.state.selectedPiece,\n        selectCell: this.selectCell.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"game-menu\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      })));\n    } else return React.createElement(\"div\", {\n      className: \"Leap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, \"LOADING\");\n  }\n\n}\n/*\n<Countdown date={Date.now() + 10000}\n           intervalDelay={0}\n           precision={3}\n           autoStart={this.state.continuedMove}\n           renderer={d => <div>\n              <span className=\"countdown-s\">{d.seconds}</span>\n              <span className=\"countdown-ms\">:{d.milliseconds}</span>\n           </div>}/>\n*/\n\n\nexport default Leap;","map":{"version":3,"sources":["/Users/bacchus/git/Leap/client/src/game/Leap.js"],"names":["React","Component","Winner","GameBoard","Board","UCT","Bot","playerOne","playerTwo","PLAYERS","BOARD_SIZE","Leap","constructor","props","config","size","class","online","gameBoardRecieve","b","board","state","set","setState","turn","player","id","gameid","ready","io","on","user","game","loadGame","firstPlayer","players","first","continuedMove","selectedPiece","winner","isHost","name","host","sidesFull","initGameState","hostGoesFirst","emit","componentDidMount","console","log","bot","ai","handleMove","from","to","getAllMoves","componentDidUpdate","prevProps","prevState","switchPlayer","setTimeout","botMove","selectCell","cell","index","canSelectPiece","setPiece","removeHighlight","pi","validMove","doMove","highlightMoves","restart","clearMoves","render","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './css/ui.css';\n//import Countdown from 'react-countdown-now';\nimport { Winner } from './Announcements';\nimport { GameBoard } from './GameBoard';\nimport Board from './assets/board.js';\nimport {UCT as Bot} from './assets/ai.js';\nconst playerOne = 4;\nconst playerTwo = 12;\nvar PLAYERS;\nvar BOARD_SIZE;\n\nclass Leap extends Component {\n  constructor(props) {\n    super(props);\n    BOARD_SIZE = props.config.size;\n    PLAYERS = {\n      [playerOne]: {\n        class: \"player-one\"\n      },\n      [playerTwo]: {\n        class: \"player-two\"\n      }\n    }\n\n    if(props.config.online) {\n    //  const endpoint = ( window.location.origin + `//:${ props.config.port }` );\n      const gameBoardRecieve = b => {\n        const board = this.state.board.set(b);\n        this.setState({board: board, turn: board.player});\n      };\n      this.state = {online: true, id: props.gameid, ready: false};\n      this.io = props.io;\n      this.io.on('gameBoardRecieve', board => gameBoardRecieve(board));\n      this.io.on('gameLoad', (user, game) => this.loadGame(user, game));\n\n      this.io.on('move', game => {\n        //game.\n      });\n\n    } else {\n      //LOCAL GAME\n      this.firstPlayer = props.config.players[0].first ? playerOne : playerTwo;\n      this.state = {\n        online: false,\n        board: new Board(this.firstPlayer, BOARD_SIZE, 0), // 0 is phaseLayout\n        turn: this.firstPlayer,\n        continuedMove: false,\n        selectedPiece: null,\n        winner: null\n      };\n      PLAYERS = {\n        [playerOne]: {\n          ...props.config.players[0],\n          class: \"player-one\"\n        },\n        [playerTwo]: {\n          ...props.config.players[1],\n          class: \"player-two\"\n        }\n      }\n    }\n\n  }\n\n  loadGame (user, game) {\n    const isHost = user.name === game.host;\n    const sidesFull = !(game.playerOne || game.playerTwo);\n\n    const initGameState = () => {\n      const firstPlayer = game.hostGoesFirst ? playerOne : playerTwo;\n      const board = new Board(firstPlayer, BOARD_SIZE, 0);\n      game.board = board;\n      return {\n        online: true,\n        board: board,\n        turn: firstPlayer,\n        continuedMove: false,\n        selectedPiece: null,\n        winner: null,\n        ready: true,\n      };\n    };\n\n    if(game.hostGoesFirst) {\n      game.playerOne = game.playerOne || game.host;\n      game.playerTwo = game.playerTwo || user.name;\n      this.player = playerTwo;\n    } else {\n      game.playerOne = game.playerOne || user.name;\n      game.playerTwo = game.playerTwo || game.host;\n      this.player = playerOne;\n    }\n\n    //if game.board exists, load the game details\n    //if game.invite === user.name, then set user as appropriate player\n    if (game.board) {\n      this.io.emit('gameSet', game);\n      const board = new Board(null, BOARD_SIZE, 0);\n      board.set(game.board);\n      this.setState({\n        online: true,\n        board: board,\n        turn: board.player,\n        continuedMove: false,\n        selectedPiece: null,\n        winner: null,\n        ready: true,\n      });\n\n    } else {\n      this.io.emit('gameSet', game);\n      this.setState(initGameState());\n    }\n\n    PLAYERS[playerOne].name = game.playerOne;\n    PLAYERS[playerTwo].name = game.playerTwo;\n\n  }\n\n  componentDidMount() {\n    if( this.state.online ) {\n      this.io.emit('gameEnter', this.state.id);\n      this.io.on('userActive', (player) => {\n        console.log(`${player.name} has joined as player ${ (this.player & 8) ? 'PLAYER TWO' : 'PLAYER ONE' }`);\n      });\n    }\n    //Check if first player is bot\n    else if(PLAYERS[this.state.turn].bot) {\n      var ai = Bot(this.state.board, 5000);\n      this.handleMove(ai.from, ai.to);\n    } else this.state.board.getAllMoves(this.state.turn);\n  }\n\n  //React update method\n  componentDidUpdate(prevProps, prevState) {\n    //this.state.board.highlightPieceMoves();\n    if (prevState.turn !== this.state.turn) {\n      let board = this.state.board;\n      if (!board.getAllMoves(this.state.turn)) {\n        console.log(\"${this.state.turn} has no more moves!\");\n        this.setState({winner: board.switchPlayer()});\n      }\n\n      if (PLAYERS[this.state.turn].bot) setTimeout ( () => this.botMove(), 200 );\n\n    } else if (this.state.selectedPiece){ }//if is a move continuation and Counter hasn't started, start the timer\n  }\n\n  botMove() {\n      var ai = new Bot(this.state.board, 1000);\n       this.handleMove(ai.from, ai.to);\n  }\n\n  selectCell(cell, index) {\n    //If a move is not a continuation, default case,\n    if (!this.state.continuedMove) {\n      if (this.canSelectPiece(cell)) this.setPiece(cell, index);\n      else if (this.state.selectedPiece !== null)  this.handleMove(this.state.selectedPiece, index);\n    } else { //if continuation\n      //check if move = true..\n      let board = this.state.board;\n      if (cell & 2) this.handleMove(this.state.selectedPiece, index);\n      else {\n        board.removeHighlight();\n        //TODO: prompt \"end turn?\" option.\n        //right now, let's just end the turn otherwise\n        this.setState({\n          board: board,\n          turn: board.switchPlayer(),\n          continuedMove: false,\n          selectedPiece: null\n        });\n      }\n    }\n  }\n\n  handleMove(from, to) {\n    const board = this.state.board;\n    const pi = board.board[from] >> 5;\n\n    //Have shake animation effect on piece.\n    if (!board.validMove(pi, to)) {\n      console.log(\"Invalid move!\");\n      return;\n    }\n\n    //check if win\n    if (board.doMove(from, to)) {\n      this.setState({winner: board.player});\n      return;\n    }\n\n    if (this.state.online) this.io.emit('gameBoardSend', this.state.id, board);\n\n    //If we can phase, clone, or capture\n    if (board.continuedMove) {\n      board.highlightMoves(pi);\n      this.setState({\n        board: board,\n        turn: board.player,\n        continuedMove: board.continuedMove,\n        selectedPiece: to\n      });\n    } else {\n      this.setState({\n        board: board,\n        turn: board.player,\n        continuedMove: false,\n        selectedPiece: null\n      });\n    }\n  }\n\n  canSelectPiece(cell) {\n    return (this.state.online)\n      ? (cell & 4) && ( (cell & 12) === this.state.turn ) && (this.player === this.state.turn)\n      : (cell & 4) && ( (cell & 12) === this.state.turn ) && !PLAYERS[this.state.turn].bot;\n  }\n\n  setPiece(cell, index) {\n    let board = this.state.board, pi = cell >> 5;\n    board.removeHighlight();\n    board.highlightMoves(pi);\n    this.setState({selectedPiece: index});\n      //console.log(\"selected piece: \" + this.state.board.board[row][col].who);\n  }\n\n  restart() {\n    this.state.board.removeHighlight();\n    this.state.board.clearMoves();\n    this.setState({ board: new Board(this.firstPlayer, BOARD_SIZE, 0),\n                    continuedMove: false, turn: this.firstPlayer, //TODO\n                    selectedPiece: null, winner: null });\n  }\n\n  render() {\n    if (this.state.ready) {\n      const player = PLAYERS[this.state.turn].name;\n      const turn = player ? `Current Player: ${ player }` : 'Waiting for player...' ;\n\n      return (\n        <div className=\"Leap\">\n          { this.state.winner && <Winner player={PLAYERS[this.state.winner]} restart={this.restart.bind(this)} /> }\n          <h3>\n            {turn}\n            <span className={PLAYERS[this.state.turn].class+\"-token\"}></span>\n          </h3>\n          <div className=\"game-container\">\n            <div className=\"game-options\"></div>\n            <GameBoard board={this.state.board}\n                       size={BOARD_SIZE}\n                       players={PLAYERS}\n                       selectedPiece={this.state.selectedPiece}\n                       selectCell={this.selectCell.bind(this)} />\n            <div className=\"game-menu\"></div>\n          </div>\n        </div>\n      );\n    } else return <div className=\"Leap\">LOADING</div>;\n  }\n}\n\n/*\n<Countdown date={Date.now() + 10000}\n           intervalDelay={0}\n           precision={3}\n           autoStart={this.state.continuedMove}\n           renderer={d => <div>\n              <span className=\"countdown-s\">{d.seconds}</span>\n              <span className=\"countdown-ms\">:{d.milliseconds}</span>\n           </div>}/>\n*/\n\nexport default Leap;\n"]},"metadata":{},"sourceType":"module"}