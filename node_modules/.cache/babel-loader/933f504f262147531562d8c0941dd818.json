{"ast":null,"code":"import socketIOClient from 'socket.io-client';\nimport store from '../store/';\nimport { ENDPOINT } from '../constants/socket.types';\nimport { USER, LOBBY, ROOM, GAME, CHAT } from '../constants/';\nimport ACTION from '../actions';\n\nconst socketMiddleware = () => {\n  let socket;\n\n  const onConnect = store => event => {\n    console.log('Howdy!');\n  };\n\n  const onDisconnect = store => event => {\n    console.log('Bowdy?');\n  };\n\n  const onMessage = store => event => {//TODO: I guess this is where we handle the server data\n  };\n\n  return next => action => {\n    console.log(store);\n\n    switch (action.type) {\n      case 'connect':\n        if (socket) socket.close();\n        socket = socketIOClient(action.server);\n        socket.on('connect', onConnect(store)).on('message', onMessage(store)).on('disconnect', onDisconnect(store));\n        break;\n\n      case 'disconnect':\n        if (socket) socket.close();\n        socket = null;\n        console.log('Disconnected.');\n        break;\n\n      case USER.LOGIN:\n      case USER.LOGOUT:\n        socket.emit('eventUser', action);\n        break;\n\n      case LOBBY.ADD_ROOM:\n      case LOBBY.REMOVE_ROOM:\n      case LOBBY.UPDATE:\n        socket.emit('eventLobby', action);\n        break;\n\n      case ROOM.ENTER:\n      case ROOM.EXIT:\n      case ROOM.SUBMIT_MOVE:\n      case ROOM.END_GAME:\n        socket.emit('eventRoom', action);\n        break;\n\n      case GAME.START:\n      case GAME.SELECT:\n      case GAME.END:\n        socket.emit('eventGame', action);\n        break;\n\n      default:\n        return next(action);\n    }\n  };\n}; // function Socket () {\n//   this.io = socketIOClient.connect('ws://localhost:3001');\n//\n//   this.io\n//     .on('connect', () => console.log('howdy'))\n//     .on(LOBBY.UPDATE, (data) => store.dispatch(ACTION.LOBBY.update(data)))\n//     .on(LOBBY.ADD_ROOM, (data) => store.dispatch(ACTION.LOBBY.update(data)))\n//     .on('recieveMove', data => {\n//       console.log(data);\n//     });\n// }\n//\n// const socket = new Socket();\n\n\nexport default socketMiddleware;","map":{"version":3,"sources":["/Users/bacchus/git/Leap/client/src/middleware/socket.js"],"names":["socketIOClient","store","ENDPOINT","USER","LOBBY","ROOM","GAME","CHAT","ACTION","socketMiddleware","socket","onConnect","event","console","log","onDisconnect","onMessage","next","action","type","close","server","on","LOGIN","LOGOUT","emit","ADD_ROOM","REMOVE_ROOM","UPDATE","ENTER","EXIT","SUBMIT_MOVE","END_GAME","START","SELECT","END"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,kBAA3B;AACA,OAAOC,KAAP,MAAkB,WAAlB;AACA,SAASC,QAAT,QAAyB,2BAAzB;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,IAAtB,EAA4BC,IAA5B,EAAkCC,IAAlC,QAA8C,eAA9C;AACA,OAAOC,MAAP,MAAmB,YAAnB;;AAGA,MAAMC,gBAAgB,GAAG,MAAM;AAC7B,MAAIC,MAAJ;;AAEA,QAAMC,SAAS,GAAGV,KAAK,IAAIW,KAAK,IAAI;AAClCC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACD,GAFD;;AAIA,QAAMC,YAAY,GAAGd,KAAK,IAAIW,KAAK,IAAI;AACrCC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACD,GAFD;;AAIA,QAAME,SAAS,GAAGf,KAAK,IAAIW,KAAK,IAAI,CAClC;AACD,GAFD;;AAIA,SAAOK,IAAI,IAAIC,MAAM,IAAI;AACvBL,IAAAA,OAAO,CAACC,GAAR,CAAYb,KAAZ;;AACA,YAAQiB,MAAM,CAACC,IAAf;AACE,WAAK,SAAL;AACE,YAAIT,MAAJ,EAAYA,MAAM,CAACU,KAAP;AAEZV,QAAAA,MAAM,GAAGV,cAAc,CAACkB,MAAM,CAACG,MAAR,CAAvB;AACAX,QAAAA,MAAM,CACHY,EADH,CACM,SADN,EACiBX,SAAS,CAACV,KAAD,CAD1B,EAEGqB,EAFH,CAEM,SAFN,EAEiBN,SAAS,CAACf,KAAD,CAF1B,EAGGqB,EAHH,CAGM,YAHN,EAGoBP,YAAY,CAACd,KAAD,CAHhC;AAIA;;AAEF,WAAK,YAAL;AACE,YAAIS,MAAJ,EAAYA,MAAM,CAACU,KAAP;AACZV,QAAAA,MAAM,GAAG,IAAT;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA;;AAEF,WAAKX,IAAI,CAACoB,KAAV;AACA,WAAKpB,IAAI,CAACqB,MAAV;AACEd,QAAAA,MAAM,CAACe,IAAP,CAAY,WAAZ,EAAyBP,MAAzB;AACA;;AAEF,WAAKd,KAAK,CAACsB,QAAX;AACA,WAAKtB,KAAK,CAACuB,WAAX;AACA,WAAKvB,KAAK,CAACwB,MAAX;AACElB,QAAAA,MAAM,CAACe,IAAP,CAAY,YAAZ,EAA0BP,MAA1B;AACA;;AAEF,WAAKb,IAAI,CAACwB,KAAV;AACA,WAAKxB,IAAI,CAACyB,IAAV;AACA,WAAKzB,IAAI,CAAC0B,WAAV;AACA,WAAK1B,IAAI,CAAC2B,QAAV;AACEtB,QAAAA,MAAM,CAACe,IAAP,CAAY,WAAZ,EAAyBP,MAAzB;AACA;;AAEF,WAAKZ,IAAI,CAAC2B,KAAV;AACA,WAAK3B,IAAI,CAAC4B,MAAV;AACA,WAAK5B,IAAI,CAAC6B,GAAV;AACEzB,QAAAA,MAAM,CAACe,IAAP,CAAY,WAAZ,EAAyBP,MAAzB;AACA;;AAGF;AACA,eAAOD,IAAI,CAACC,MAAD,CAAX;AA3CF;AA6CD,GA/CD;AAgDD,CA/DD,C,CAiEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeT,gBAAf","sourcesContent":["import socketIOClient from 'socket.io-client';\nimport store from '../store/';\nimport { ENDPOINT } from '../constants/socket.types';\nimport { USER, LOBBY, ROOM, GAME, CHAT } from '../constants/';\nimport ACTION from '../actions';\n\n\nconst socketMiddleware = () => {\n  let socket;\n\n  const onConnect = store => event => {\n    console.log('Howdy!');\n  };\n\n  const onDisconnect = store => event => {\n    console.log('Bowdy?');\n  };\n\n  const onMessage = store => event => {\n    //TODO: I guess this is where we handle the server data\n  };\n\n  return next => action => {\n    console.log(store);\n    switch (action.type) {\n      case 'connect':\n        if (socket) socket.close();\n\n        socket = socketIOClient(action.server);\n        socket\n          .on('connect', onConnect(store))\n          .on('message', onMessage(store))\n          .on('disconnect', onDisconnect(store));\n        break;\n\n      case 'disconnect':\n        if (socket) socket.close();\n        socket = null;\n        console.log('Disconnected.');\n        break;\n\n      case USER.LOGIN:\n      case USER.LOGOUT:\n        socket.emit('eventUser', action);\n        break;\n\n      case LOBBY.ADD_ROOM:\n      case LOBBY.REMOVE_ROOM:\n      case LOBBY.UPDATE:\n        socket.emit('eventLobby', action);\n        break;\n\n      case ROOM.ENTER:\n      case ROOM.EXIT:\n      case ROOM.SUBMIT_MOVE:\n      case ROOM.END_GAME:\n        socket.emit('eventRoom', action);\n        break;\n\n      case GAME.START:\n      case GAME.SELECT:\n      case GAME.END:\n        socket.emit('eventGame', action);\n        break;\n\n\n      default:\n      return next(action);\n    }\n  };\n};\n\n// function Socket () {\n//   this.io = socketIOClient.connect('ws://localhost:3001');\n//\n//   this.io\n//     .on('connect', () => console.log('howdy'))\n//     .on(LOBBY.UPDATE, (data) => store.dispatch(ACTION.LOBBY.update(data)))\n//     .on(LOBBY.ADD_ROOM, (data) => store.dispatch(ACTION.LOBBY.update(data)))\n//     .on('recieveMove', data => {\n//       console.log(data);\n//     });\n// }\n//\n// const socket = new Socket();\n\nexport default socketMiddleware;\n"]},"metadata":{},"sourceType":"module"}