{"ast":null,"code":"var _jsxFileName = \"/Users/bacchus/git/Leap/client/src/components/Game/index.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { select } from '../../actions/game';\nimport './index.css';\nimport Cell from '../Cell';\nexport class Game extends React.Component {\n  constructor({\n    game,\n    move\n  }) {\n    super();\n    const player = 4;\n    this.endTurn = this.state = {\n      game: game,\n      player: player,\n      move: move,\n      continuedMove: false\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    /*\n    THIS SHOULD BE HANDLED IN SERVER\n    const { game, player } = this.state;\n    if (game.turn === player) {\n      if (!game.getAllMoves(game.turn)) {\n        console.log(`${game.turn} has no more moves!`);\n        this.endTurn(true);\n      }\n    }\n    */\n  }\n\n  selectCell(cell, index) {\n    //call implies it's this user's turn\n    const _this$state = this.state,\n          game = _this$state.game,\n          player = _this$state.player;\n    const highlighted = cell & 2;\n\n    if (game.continuedMove) {\n      //implies current user is moving\n      if (highlighted) this.setDestination(index);else {\n        //TODO: prompt \"end turn?\" option\n        game.switchPlayer(); //sketchy\n\n        this.endTurn();\n      }\n    } else {\n      const pieceType = cell & (4 | 8 | 12);\n\n      if (pieceType) {\n        //if piece\n        const canSelectPiece = !(pieceType ^ player) || pieceType === 10;\n        const hasMoves = game.moves[cell >> 5].length > 0;\n        if (canSelectPiece && hasMoves) this.setPiece(cell, index);else try {\n          if (!canSelectPiece) throw 'OPPONENT PIECE';\n          if (!hasMoves) throw 'PIECE HAS NO MOVES';\n        } catch (error) {\n          console.log(`CANNOT SELECT: ${error}`);\n        }\n      } else {\n        //if empty cell\n        if (cell & 2) this.move();else console.log('CANNOT SELECT: NOT EMPTY');\n      }\n    }\n  }\n\n  setPiece(cell, index) {\n    const game = this.state.game;\n    const pi = cell >> 5;\n    game.removeHighlight();\n    game.highlightMoves(pi);\n    this.setState({\n      move: {\n        from: index,\n        to: undefined,\n        captured: undefined\n      }\n    });\n  }\n\n  setDestination(to) {\n    this.setState({\n      move: {\n        from: this.state.move.from,\n        to: to,\n        captured: this.state.game.getCapturedPiece(to)\n      }\n    });\n  }\n\n  move() {\n    const _this$state2 = this.state,\n          game = _this$state2.game,\n          move = _this$state2.move;\n    const from = move.from,\n          to = move.to;\n    const pi = game.board[from] >> 5;\n\n    if (game.doMove(from, to)) {\n      //win\n      this.endTurn(true);\n      return;\n    } else if (game.continuedMove) {\n      game.highlightMoves(pi);\n      this.setState({\n        game: game,\n        move: {\n          to: to,\n          from: undefined,\n          captured: undefined\n        }\n      });\n    } else {\n      this.endTurn();\n    }\n  }\n\n  render() {\n    const _this$state3 = this.state,\n          game = _this$state3.game,\n          move = _this$state3.move;\n\n    const _game$getConfig = game.getConfig(),\n          BOARD_AREA = _game$getConfig.BOARD_AREA;\n    /*  display: grid for the cells  */\n\n\n    let cells = [];\n\n    for (let index = 0; index < BOARD_AREA; index++) {\n      const cell = game.board[index];\n      const moveType = move.to === index && 'to' || move.from === index && 'from' || move.captured === index && 'captured' || '';\n      cells.push(React.createElement(Cell, {\n        key: index,\n        index: index,\n        cell: cell,\n        highlight: cell & 2,\n        moveType: moveType,\n        select: this.selectCell.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }));\n    }\n\n    return React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \" \", cells, \" \");\n  }\n\n} //Game.propTypes = { game: object.isRequired, move: object };\n//TODO: make selectors\n//const mapStateToProps = state => ({move: getMoveSelections(state)});\n\nexport default connect()(Game);","map":{"version":3,"sources":["/Users/bacchus/git/Leap/client/src/components/Game/index.js"],"names":["React","connect","select","Cell","Game","Component","constructor","game","move","player","endTurn","state","continuedMove","componentDidUpdate","prevProps","prevState","selectCell","cell","index","highlighted","setDestination","switchPlayer","pieceType","canSelectPiece","hasMoves","moves","length","setPiece","error","console","log","pi","removeHighlight","highlightMoves","setState","from","to","undefined","captured","getCapturedPiece","board","doMove","render","getConfig","BOARD_AREA","cells","moveType","push","bind"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { select } from '../../actions/game';\nimport './index.css';\nimport Cell from '../Cell';\n\nexport class Game extends React.Component {\n  constructor ({ game, move }) {\n    super();\n    const player = 4;\n    this.endTurn =\n    this.state = {\n      game: game,\n      player: player,\n      move: move,\n      continuedMove: false,\n    }\n  }\n\n  componentDidUpdate (prevProps, prevState) {\n    /*\n    THIS SHOULD BE HANDLED IN SERVER\n    const { game, player } = this.state;\n    if (game.turn === player) {\n      if (!game.getAllMoves(game.turn)) {\n        console.log(`${game.turn} has no more moves!`);\n        this.endTurn(true);\n      }\n    }\n    */\n  }\n\n  selectCell (cell, index) { //call implies it's this user's turn\n    const { game, player } = this.state;\n    const highlighted = (cell & 2);\n\n    if (game.continuedMove) { //implies current user is moving\n      if (highlighted) this.setDestination(index);\n      else {\n        //TODO: prompt \"end turn?\" option\n        game.switchPlayer(); //sketchy\n        this.endTurn();\n      }\n    } else {\n      const pieceType = cell & (4 | 8 | 12);\n      if (pieceType) {  //if piece\n        const canSelectPiece = !(pieceType ^ player) || pieceType === 10;\n        const hasMoves = game.moves[cell >> 5].length > 0;\n\n        if (canSelectPiece && hasMoves) this.setPiece(cell, index);\n        else try {\n          if (!canSelectPiece) throw 'OPPONENT PIECE';\n          if (!hasMoves) throw 'PIECE HAS NO MOVES';\n        } catch (error) {\n          console.log(`CANNOT SELECT: ${error}`);\n        }\n      }\n      else {  //if empty cell\n        if (cell & 2) this.move();\n        else console.log('CANNOT SELECT: NOT EMPTY');\n      }\n  }\n}\n\nsetPiece (cell, index) {\n  const { game } = this.state;\n  const pi = cell >> 5;\n  game.removeHighlight();\n  game.highlightMoves(pi);\n  this.setState({ move: {from: index, to: undefined, captured: undefined} });\n}\n\nsetDestination (to) {\n  this.setState({ move: {from: this.state.move.from, to: to, captured: this.state.game.getCapturedPiece(to)} });\n}\n\nmove() {\n  const { game, move } = this.state;\n  const { from, to } = move;\n  const pi = game.board[from] >> 5;\n\n  if (game.doMove(from, to)) { //win\n    this.endTurn(true);\n    return;\n  } else if (game.continuedMove) {\n    game.highlightMoves(pi);\n    this.setState({ game: game, move: {to: to, from: undefined, captured: undefined} });\n  } else {\n    this.endTurn();\n  }\n}\n\nrender () {\n  const { game, move } = this.state;\n  const { BOARD_AREA } = game.getConfig();\n  /*  display: grid for the cells  */\n  let cells = [];\n  for (let index = 0; index < BOARD_AREA; index++) {\n    const cell = game.board[index];\n    const moveType = (move.to === index && 'to')\n     || (move.from === index && 'from')\n     || (move.captured === index && 'captured')\n     || '';\n\n    cells.push(<Cell\n      key={index}\n      index={index}\n      cell={cell}\n      highlight={cell & 2}\n      moveType={moveType}\n      select={this.selectCell.bind(this)} />);\n  }\n  return (<div className=\"board\"> { cells } </div>);\n};\n\n}\n\n//Game.propTypes = { game: object.isRequired, move: object };\n//TODO: make selectors\n//const mapStateToProps = state => ({move: getMoveSelections(state)});\n\nexport default connect(/*mapStateToProps*/)(Game);\n"]},"metadata":{},"sourceType":"module"}