{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Schema_1 = require(\"./Schema\");\n\nvar ArraySchema_1 = require(\"./types/ArraySchema\");\n\nvar MapSchema_1 = require(\"./types/MapSchema\");\n\nvar ChangeTree =\n/** @class */\nfunction () {\n  function ChangeTree(indexes, parentField, parent) {\n    if (indexes === void 0) {\n      indexes = {};\n    }\n\n    if (parentField === void 0) {\n      parentField = null;\n    }\n\n    this.changed = false;\n    this.changes = new Set();\n    this.allChanges = new Set();\n    this.deletedKeys = {};\n    this.fieldIndexes = indexes;\n    this.parent = parent;\n    this.parentField = parentField;\n  }\n\n  ChangeTree.prototype.change = function (fieldName, isDelete) {\n    if (isDelete === void 0) {\n      isDelete = false;\n    }\n\n    var fieldIndex = this.fieldIndexes[fieldName];\n    var field = typeof fieldIndex === \"number\" ? fieldIndex : fieldName;\n\n    if (!isDelete) {\n      this.changed = true;\n      this.changes.add(field);\n      this.allChanges.add(field);\n    } else if (isDelete) {\n      // if (this.changes.has(field))  {\n      //     /**\n      //      * un-flag a change if item has been added AND removed in the same patch.\n      //      * (https://github.com/colyseus/colyseus-unity3d/issues/103)\n      //      */\n      //     this.changes.delete(field);\n      // } else {\n      this.changed = true;\n      this.changes.add(field); // }\n      // discard all-changes for removed items.\n\n      this.allChanges.delete(field);\n    }\n\n    if (this.parent) {\n      this.parent.change(this.parentField);\n    }\n  };\n\n  ChangeTree.prototype.mapIndex = function (instance, key) {\n    if (typeof instance === \"object\") {\n      if (!this.indexMap) {\n        this.indexMap = new Map();\n        this.indexChange = new Map();\n      }\n\n      this.indexMap.set(instance, key);\n    }\n  };\n\n  ChangeTree.prototype.getIndex = function (instance) {\n    return this.indexMap && this.indexMap.get(instance);\n  };\n\n  ChangeTree.prototype.deleteIndex = function (instance) {\n    if (typeof instance === \"object\") {\n      this.deletedKeys[this.indexMap.get(instance)] = true;\n      this.indexMap.delete(instance);\n    }\n  };\n\n  ChangeTree.prototype.isDeleted = function (key) {\n    return this.deletedKeys[key] !== undefined;\n  };\n\n  ChangeTree.prototype.mapIndexChange = function (instance, previousKey) {\n    if (typeof instance === \"object\" && !this.indexChange.has(instance)) {\n      this.indexChange.set(instance, previousKey);\n    }\n  };\n\n  ChangeTree.prototype.getIndexChange = function (instance) {\n    return this.indexChange && this.indexChange.get(instance);\n  };\n\n  ChangeTree.prototype.deleteIndexChange = function (instance) {\n    if (typeof instance === \"object\") {\n      this.indexChange.delete(instance);\n    }\n  };\n\n  ChangeTree.prototype.changeAll = function (obj) {\n    if (obj instanceof Schema_1.Schema) {\n      var schema = obj['_schema'];\n\n      for (var field in schema) {\n        // ensure ArraySchema and MapSchema already initialized\n        // on its structure have a valid parent.\n        if ((obj[field] instanceof Schema_1.Schema || obj[field] instanceof ArraySchema_1.ArraySchema || obj[field] instanceof MapSchema_1.MapSchema) && !obj[field].$changes.parent.parent) {\n          obj[field].$changes.parent = this;\n        }\n\n        if (obj[field] !== undefined) {\n          this.change(field);\n        }\n      }\n    } else {\n      var keys = Object.keys(obj);\n\n      for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n        var key = keys_1[_i];\n\n        if (obj[key] !== undefined) {\n          this.change(key);\n        }\n      }\n    }\n  };\n\n  ChangeTree.prototype.discard = function () {\n    this.changed = false;\n    this.changes.clear();\n    this.deletedKeys = {};\n\n    if (this.indexChange) {\n      this.indexChange.clear();\n    }\n  };\n\n  return ChangeTree;\n}();\n\nexports.ChangeTree = ChangeTree;","map":{"version":3,"sources":["../src/ChangeTree.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Schema_1 = require(\"./Schema\");\nvar ArraySchema_1 = require(\"./types/ArraySchema\");\nvar MapSchema_1 = require(\"./types/MapSchema\");\nvar ChangeTree = /** @class */ (function () {\n    function ChangeTree(indexes, parentField, parent) {\n        if (indexes === void 0) { indexes = {}; }\n        if (parentField === void 0) { parentField = null; }\n        this.changed = false;\n        this.changes = new Set();\n        this.allChanges = new Set();\n        this.deletedKeys = {};\n        this.fieldIndexes = indexes;\n        this.parent = parent;\n        this.parentField = parentField;\n    }\n    ChangeTree.prototype.change = function (fieldName, isDelete) {\n        if (isDelete === void 0) { isDelete = false; }\n        var fieldIndex = this.fieldIndexes[fieldName];\n        var field = (typeof (fieldIndex) === \"number\") ? fieldIndex : fieldName;\n        if (!isDelete) {\n            this.changed = true;\n            this.changes.add(field);\n            this.allChanges.add(field);\n        }\n        else if (isDelete) {\n            // if (this.changes.has(field))  {\n            //     /**\n            //      * un-flag a change if item has been added AND removed in the same patch.\n            //      * (https://github.com/colyseus/colyseus-unity3d/issues/103)\n            //      */\n            //     this.changes.delete(field);\n            // } else {\n            this.changed = true;\n            this.changes.add(field);\n            // }\n            // discard all-changes for removed items.\n            this.allChanges.delete(field);\n        }\n        if (this.parent) {\n            this.parent.change(this.parentField);\n        }\n    };\n    ChangeTree.prototype.mapIndex = function (instance, key) {\n        if (typeof instance === \"object\") {\n            if (!this.indexMap) {\n                this.indexMap = new Map();\n                this.indexChange = new Map();\n            }\n            this.indexMap.set(instance, key);\n        }\n    };\n    ChangeTree.prototype.getIndex = function (instance) {\n        return this.indexMap && this.indexMap.get(instance);\n    };\n    ChangeTree.prototype.deleteIndex = function (instance) {\n        if (typeof instance === \"object\") {\n            this.deletedKeys[this.indexMap.get(instance)] = true;\n            this.indexMap.delete(instance);\n        }\n    };\n    ChangeTree.prototype.isDeleted = function (key) {\n        return this.deletedKeys[key] !== undefined;\n    };\n    ChangeTree.prototype.mapIndexChange = function (instance, previousKey) {\n        if (typeof instance === \"object\" && !this.indexChange.has(instance)) {\n            this.indexChange.set(instance, previousKey);\n        }\n    };\n    ChangeTree.prototype.getIndexChange = function (instance) {\n        return this.indexChange && this.indexChange.get(instance);\n    };\n    ChangeTree.prototype.deleteIndexChange = function (instance) {\n        if (typeof instance === \"object\") {\n            this.indexChange.delete(instance);\n        }\n    };\n    ChangeTree.prototype.changeAll = function (obj) {\n        if (obj instanceof Schema_1.Schema) {\n            var schema = obj['_schema'];\n            for (var field in schema) {\n                // ensure ArraySchema and MapSchema already initialized\n                // on its structure have a valid parent.\n                if ((obj[field] instanceof Schema_1.Schema ||\n                    obj[field] instanceof ArraySchema_1.ArraySchema ||\n                    obj[field] instanceof MapSchema_1.MapSchema) &&\n                    !obj[field].$changes.parent.parent) {\n                    obj[field].$changes.parent = this;\n                }\n                if (obj[field] !== undefined) {\n                    this.change(field);\n                }\n            }\n        }\n        else {\n            var keys = Object.keys(obj);\n            for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n                var key = keys_1[_i];\n                if (obj[key] !== undefined) {\n                    this.change(key);\n                }\n            }\n        }\n    };\n    ChangeTree.prototype.discard = function () {\n        this.changed = false;\n        this.changes.clear();\n        this.deletedKeys = {};\n        if (this.indexChange) {\n            this.indexChange.clear();\n        }\n    };\n    return ChangeTree;\n}());\nexports.ChangeTree = ChangeTree;\n//# sourceMappingURL=ChangeTree.js.map"]},"metadata":{},"sourceType":"script"}