{"ast":null,"code":"var util = require('./util.js'); //single, phase, jump, super-jump\n\n/*\nadj: adjacent\nphase: change portal side\nleap: capture piece while jumping through a portal\njitch: jump, then phase\nswump: switch, then jump\n}\n*/\n\n/*\nLEGEND\npi = piece index in Board.pieces\np = piece Board.pieces[pi]\n*/\n\n/*\nPreviously, I assumed that if a uncloned piece reaches the end of the other player's side,\nthen that piece must duplicate before continuing the game. However, my assumption fails\nif the player's spawn row is full and hence I will give the player the option to choose.\n\nThis realization got me thinking about adding different game modes that\nmodify things like the board size, and side-wrapping.\n\nboard size: If board were 9x9, we can put a clone phaser in the center\nthat duplicates any non-clone pieces at most once.\n\nside wrapping: columns are cyclic: make board[row] = cyclic linked List?\n\n\n\nSpeaking of linked lists... Why am I not using them now?\nMaybe this is what I needed to store highlight;\n represent each of this.state.selected_piece's moves as a boolean for 'highlight' in\n this.board[row][col] = {who: p.player | null, highlight: true | false :: added in Board.get_moves(pi)}\n for some row,col,  and p = this.piece[pi]\n to Leap.set_piece(), add this.state.board.update_board()\n\n*/\n\n\nfunction Board(size, p1, p2) {\n  this.p1 = p1;\n  this.p2 = p2;\n  this.board = this.init_board(size);\n  this.pieces_separator = 8;\n  this.pieces = this.init_pieces(size, p1, p2);\n  this.update_board(); //add pieces to board\n} //TODO:\n//this.board[row][col] = {who: p.player | null, highlight: {row: some_row, col: some_col} | null:: added in Board.get_moves(pi)}\n//update occurs when (1) piece is cloned (pieces index may change)\n// and when (2) set_piece is called\n//To make highlight function properly, I'll have to call this.get_moves() from here.\n//It follows that I will have to remove other calls to this.get_moves()\n\n\nBoard.prototype.update_board = function () {\n  this.board.map(row => row.map((cell, j) => cell.who != null ? this.pieces[cell.who].alive ? {\n    who: this.pieces[cell.who],\n    move: false\n  } : {\n    who: null,\n    move: false\n  } : {\n    who: null,\n    move: false\n  }));\n};\n\nBoard.prototype.init_board = function (size) {\n  let board = [],\n      player_two = [],\n      player_one = []; //TODO: fill as {who: pi (this.pieces index), highlight: null}\n\n  for (let i = 0; i < size; i++) {\n    player_two.push({\n      who: i,\n      move: false\n    });\n    player_one.push({\n      who: i + 8,\n      move: false\n    });\n  }\n\n  board.push(player_two);\n\n  for (let i = 1; i < size - 1; i++) board.push(Array(size).fill({\n    who: null,\n    move: false\n  }));\n\n  board.push(player_one);\n  return board;\n};\n\nBoard.prototype.init_pieces = function (size) {\n  let white_pieces = [];\n  let black_pieces = [];\n\n  for (let c = 0; c < size; c++) {\n    white_pieces.push({\n      player: this.p1,\n      cloned: false,\n      row: 7,\n      col: c,\n      alive: true\n    });\n    black_pieces.push({\n      player: this.p2,\n      cloned: false,\n      row: 0,\n      col: c,\n      alive: true\n    });\n  }\n\n  return black_pieces.concat(white_pieces);\n};\n/*==========\t\t\t\t\t\t\t\t\t\t\tCLONE\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n//Calls every time a clone is made\n\n\nBoard.prototype.insert_at_separation_index = function () {\n  for (let pi = this.pieces_separator; pi < this.pieces.length; pi++) {\n    //Finds index that separates p1 and p2 pieces\n    if (this.pieces[pi].player !== this.p1) {\n      this.pieces_separator = pi; //update\n\n      return pi;\n    }\n  }\n};\n\nBoard.prototype.make_clone = function (pi, row, col) {\n  this.pieces[pi].cloned = true; //row will only be 0 or 7, so we can use this to determine player and placement\n\n  let player = row ? this.p1 : this.p2;\n  let clone = {\n    player: player,\n    cloned: true,\n    row: row,\n    col: col,\n    alive: true\n  };\n  return this.pieces.splice(this.insert_at_separation_index(), 0, clone);\n};\n\nBoard.prototype.can_clone = function (pi) {\n  let p = this.pieces[pi];\n  return !p.cloned && p.col < 7 && p.col > 0 && (p.player === this.p1 && !p.row || p.player === this.p2 && p.row === 7);\n};\n/*==========\t\t\t\t\t\t\t\t\t\t\tMOVES\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n\n\nBoard.prototype.get_player = function (pi) {\n  return this.pieces[pi].player;\n};\n\nBoard.prototype.is_leap = function (p, row_incr, col_incr, is_phase, cell_adj, bypass_condition) {\n  //if neighbor cell is a phase, leap_cell clear, and (enemy piece on phase_adj XOR enemy piece on phase_far)\n  let destination_cell = this.board[7 - p.row][7 - p.col];\n\n  if (is_phase && !destination_cell.who) {\n    let phase_adj = cell_adj.who;\n    let phase_far = this.board[7 - (p.row + row_incr)][7 - (p.col + col_incr)].who;\n\n    if ((phase_adj || phase_far) && !(phase_adj && phase_far)) {\n      //xor filter. Only one may be true\n      let capt = phase_adj ? phase_adj : phase_far; //if 0, add to destination_cell.move, if 1,\n\n      if (bypass_condition) return true;else destination_cell.move = capt;\n    }\n  }\n};\n\nBoard.prototype.is_jump = function (p, row_incr, col_incr, cell_adj, bypass_condition) {\n  //if adj cell occupied, jump_cell in bounds, jump_cell clear, and jump_cell has enemy piece\n  let destination_cell = this.board[p.row + row_incr * 2][p.col + col_incr * 2];\n\n  if (util.in_bounds(p.row + row_incr * 2, p.col + col_incr * 2)) {\n    if (this.get_player(cell_adj.who) !== p.player && !destination_cell.who) {\n      if (bypass_condition) return true;else destination_cell.move = cell_adj.who;\n    }\n  }\n};\n\nBoard.prototype.is_phase = function (p, bypass_condition) {\n  let is_phase = util.cell_type(p.row, p.col) > 1;\n  let destination_cell = this.board[7 - p.row][7 - p.col];\n\n  if (is_phase && destination_cell.who !== null) {\n    if (bypass_condition) return true;else destination_cell.move = true;\n  }\n};\n\nBoard.prototype.is_clone_spawn = function (pi, row, col) {\n  if (this.can_clone(pi)) return this.board[row][col] === null;\n};\n\nBoard.prototype.get_clone_spawns = function (p, bypass_condition) {\n  let row = p.player === this.p1 ? 0 : 7;\n  let destination_cell;\n  let clone_spawns = [];\n\n  for (let col = 1; col < 7; col++) {\n    destination_cell = this.board[row][col];\n\n    if (destination_cell.who === null) {\n      if (bypass_condition) return true;else destination_cell.move = true;\n    }\n  }\n}; //bypass_condition (HIGHLIGHT BYPASS CONDITION): undefined - default (bypass none), 1 - bypass all, 2 - bypass non-capturing moves\n\n\nBoard.prototype.get_moves = function (pi, bypass_condition, r, c) {\n  let adjs = [],\n      jumps = [],\n      leaps = [];\n  let p = this.pieces[pi]; //TODO: ref this.board[p.row + r][p.col + r].who, and set highlight = true for every destination\n\n  if (r != null && c != null) {\n    if (util.in_bounds(p.row + r, p.col + c) && (r || c)) {\n      let cell_adj = this.board[p.row + r][p.col + c];\n      let is_phase = util.cell_type(p.row + r, p.col + c) > 1;\n      if (this.is_leap(p, r, c, is_phase, cell_adj, bypass_condition)) return true;\n\n      if (cell_adj.who !== null) {\n        if (this.is_jump(p, r, c, cell_adj, bypass_condition)) return true;\n      } else if (bypass_condition % 2) return true; //adjacent moves\n      else cell_adj.move = true; //if (leap !== undefined) leaps.push(leap);\n      //if (jump !== undefined) jumps.push(jump);\n\n    }\n  } else {\n    for (r = -1; r < 2; r++) {\n      for (c = -1; c < 2; c++) {\n        //check adjacent cells of piece p wrt the boundary\n        if (util.in_bounds(p.row + r, p.col + c) && (r || c)) {\n          let cell_adj = this.board[p.row + r][p.col + c];\n          let is_phase = util.cell_type(p.row + r, p.col + c) > 1;\n          if (this.is_leap(p, r, c, is_phase, cell_adj, bypass_condition)) return true;\n\n          if (cell_adj.who !== null) {\n            if (this.is_jump(p, r, c, cell_adj, bypass_condition)) return true;\n          } else if (bypass_condition % 2) return true; //adjacent moves\n          else cell_adj.move = true; //if (leap !== undefined) leaps.push(leap);\n          //if (jump !== undefined) jumps.push(jump);\n\n        }\n      }\n    }\n  } //add key clone_spawns if piece can be cloned\n\n\n  if (this.is_phase(p, bypass_condition)) return true;\n  if (this.get_clone_spawns(p, bypass_condition)) return true;\n  return false;\n}; //Performs move. returns true if captured piece in process, else false\n\n\nBoard.prototype.do_move = function (pi, row, col) {\n  let p = this.pieces[pi]; //If piece (is on super cell) can phase, extend player turn to allow option\n  //if (this.is_phase(p))\n\n  this.board[p.row][p.col].who = null;\n  this.board[row][col].who = pi;\n  p.row = row;\n  p.col = col; //if piece p contains captured piece\n\n  let c = p.captured_pi !== undefined ? this.pieces[p.captured_pi] : null;\n\n  if (c) {\n    c.alive = false;\n    this.board[c.row][c.col].who = null; //return direction of move\n\n    return {\n      row_incr: Math.sign(p.row - c.row),\n      col_incr: Math.sign(p.col - c.col)\n    };\n  }\n};\n/*==========\t\t\t\t\t\t\t\t\t\t\tINTEGRITY\t\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n\n\nBoard.prototype.can_continue_move = function (pi) {\n  return this.get_moves(pi, 2); //TODO: Only check moves in the same direction as the initial move\n  //moves.adjs = [];\n  //return !parseInt(Object.values(a).reduce( (j,i) => i.length !== undefined ? i.length + j: j));\n  //return !moves.every(t => t === [] || t === {} || t === null);\n};\n\nBoard.prototype.has_moves = function (pi) {\n  return this.get_moves(pi, 1); //return !parseInt(Object.values(a).reduce( (j,i) => i.length !== undefined ? i.length + j: j));\n  //return !Object.values(moves).every(t => t === [] || t === {} || t === null);\n}; //Player has no more moves when (1): all player's pieces are dead (2): every piece has no moves\n\n\nBoard.prototype.moves_left = function (player) {\n  for (let pi = 0; pi < this.pieces.length; pi++) {\n    let p = this.pieces[pi];\n\n    if (p.alive && p.player === player) {\n      if (this.has_moves(pi)) return true;\n    }\n  }\n\n  return false;\n};\n\nBoard.prototype.valid_move = function (pi, row, col) {\n  //let m = this.get_moves(pi); //** this.board[row][col].highlight\n  return this.board[row][col].move;\n  /*\n  let moves = [];\n  moves = moves.concat(m.phase, m.adjs, m.jumps, m.leaps, m.clone_spawns);\n  for (let move of moves) {\n  \tif (!move) continue;\n  \tif (move.row === row && move.col === col) return true;\n  }\n  return false;\n  */\n};\n\nmodule.exports = Board;","map":{"version":3,"sources":["/Users/bacchus/git/Leap/src/js/board.js"],"names":["util","require","Board","size","p1","p2","board","init_board","pieces_separator","pieces","init_pieces","update_board","prototype","map","row","cell","j","who","alive","move","player_two","player_one","i","push","Array","fill","white_pieces","black_pieces","c","player","cloned","col","concat","insert_at_separation_index","pi","length","make_clone","clone","splice","can_clone","p","get_player","is_leap","row_incr","col_incr","is_phase","cell_adj","bypass_condition","destination_cell","phase_adj","phase_far","capt","is_jump","in_bounds","cell_type","is_clone_spawn","get_clone_spawns","clone_spawns","get_moves","r","adjs","jumps","leaps","do_move","captured_pi","undefined","Math","sign","can_continue_move","has_moves","moves_left","valid_move","module","exports"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,WAAD,CAAlB,C,CACA;;AACA;;;;;;;;;AAQA;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,SAASC,KAAT,CAAeC,IAAf,EAAqBC,EAArB,EAAyBC,EAAzB,EAA6B;AAC5B,OAAKD,EAAL,GAAUA,EAAV;AACA,OAAKC,EAAL,GAAUA,EAAV;AACA,OAAKC,KAAL,GAAa,KAAKC,UAAL,CAAgBJ,IAAhB,CAAb;AACA,OAAKK,gBAAL,GAAwB,CAAxB;AACA,OAAKC,MAAL,GAAc,KAAKC,WAAL,CAAiBP,IAAjB,EAAuBC,EAAvB,EAA2BC,EAA3B,CAAd;AACA,OAAKM,YAAL,GAN4B,CAMP;AACrB,C,CAED;AACA;AACA;AACA;AACA;AACA;;;AACAT,KAAK,CAACU,SAAN,CAAgBD,YAAhB,GAA+B,YAAY;AAC1C,OAAKL,KAAL,CAAWO,GAAX,CAAeC,GAAG,IAAIA,GAAG,CAACD,GAAJ,CAAQ,CAACE,IAAD,EAAOC,CAAP,KAC7BD,IAAI,CAACE,GAAL,IAAY,IAAZ,GACG,KAAKR,MAAL,CAAYM,IAAI,CAACE,GAAjB,EAAsBC,KAAtB,GACA;AAACD,IAAAA,GAAG,EAAE,KAAKR,MAAL,CAAYM,IAAI,CAACE,GAAjB,CAAN;AAA6BE,IAAAA,IAAI,EAAC;AAAlC,GADA,GAEA;AAACF,IAAAA,GAAG,EAAE,IAAN;AAAYE,IAAAA,IAAI,EAAC;AAAjB,GAHH,GAIE;AAACF,IAAAA,GAAG,EAAE,IAAN;AAAYE,IAAAA,IAAI,EAAE;AAAlB,GALmB,CAAtB;AAMA,CAPD;;AASAjB,KAAK,CAACU,SAAN,CAAgBL,UAAhB,GAA6B,UAAUJ,IAAV,EAAgB;AACzC,MAAIG,KAAK,GAAG,EAAZ;AAAA,MAAgBc,UAAU,GAAG,EAA7B;AAAA,MAAiCC,UAAU,GAAG,EAA9C,CADyC,CAE3C;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnB,IAApB,EAA0BmB,CAAC,EAA3B,EAA+B;AAC9BF,IAAAA,UAAU,CAACG,IAAX,CAAgB;AAACN,MAAAA,GAAG,EAAEK,CAAN;AAASH,MAAAA,IAAI,EAAE;AAAf,KAAhB;AACAE,IAAAA,UAAU,CAACE,IAAX,CAAgB;AAACN,MAAAA,GAAG,EAAEK,CAAC,GAAC,CAAR;AAAWH,MAAAA,IAAI,EAAE;AAAjB,KAAhB;AACA;;AACDb,EAAAA,KAAK,CAACiB,IAAN,CAAWH,UAAX;;AACA,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnB,IAAI,GAAC,CAAzB,EAA4BmB,CAAC,EAA7B,EAAiChB,KAAK,CAACiB,IAAN,CAAWC,KAAK,CAACrB,IAAD,CAAL,CAAYsB,IAAZ,CAAiB;AAACR,IAAAA,GAAG,EAAE,IAAN;AAAYE,IAAAA,IAAI,EAAE;AAAlB,GAAjB,CAAX;;AACjCb,EAAAA,KAAK,CAACiB,IAAN,CAAWF,UAAX;AAEE,SAAOf,KAAP;AACH,CAZD;;AAcAJ,KAAK,CAACU,SAAN,CAAgBF,WAAhB,GAA8B,UAAUP,IAAV,EAAgB;AAC7C,MAAIuB,YAAY,GAAG,EAAnB;AACA,MAAIC,YAAY,GAAG,EAAnB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGzB,IAApB,EAA0ByB,CAAC,EAA3B,EAA+B;AAC9BF,IAAAA,YAAY,CAACH,IAAb,CAAkB;AAACM,MAAAA,MAAM,EAAE,KAAKzB,EAAd;AAAkB0B,MAAAA,MAAM,EAAE,KAA1B;AAAiChB,MAAAA,GAAG,EAAE,CAAtC;AAAyCiB,MAAAA,GAAG,EAAEH,CAA9C;AAAiDV,MAAAA,KAAK,EAAE;AAAxD,KAAlB;AACAS,IAAAA,YAAY,CAACJ,IAAb,CAAkB;AAACM,MAAAA,MAAM,EAAE,KAAKxB,EAAd;AAAkByB,MAAAA,MAAM,EAAE,KAA1B;AAAiChB,MAAAA,GAAG,EAAE,CAAtC;AAAyCiB,MAAAA,GAAG,EAAEH,CAA9C;AAAiDV,MAAAA,KAAK,EAAE;AAAxD,KAAlB;AACA;;AACE,SAAOS,YAAY,CAACK,MAAb,CAAoBN,YAApB,CAAP;AACH,CARD;AAUA;AAEA;;;AACAxB,KAAK,CAACU,SAAN,CAAgBqB,0BAAhB,GAA6C,YAAY;AACxD,OAAI,IAAIC,EAAE,GAAC,KAAK1B,gBAAhB,EAAkC0B,EAAE,GAAC,KAAKzB,MAAL,CAAY0B,MAAjD,EAAyDD,EAAE,EAA3D,EAA+D;AAC9D;AACA,QAAG,KAAKzB,MAAL,CAAYyB,EAAZ,EAAgBL,MAAhB,KAA2B,KAAKzB,EAAnC,EAAuC;AACtC,WAAKI,gBAAL,GAAwB0B,EAAxB,CADsC,CACV;;AAC5B,aAAOA,EAAP;AACA;AACD;AACD,CARD;;AAUAhC,KAAK,CAACU,SAAN,CAAgBwB,UAAhB,GAA6B,UAAUF,EAAV,EAAcpB,GAAd,EAAmBiB,GAAnB,EAAwB;AACpD,OAAKtB,MAAL,CAAYyB,EAAZ,EAAgBJ,MAAhB,GAAyB,IAAzB,CADoD,CAEpD;;AACA,MAAID,MAAM,GAAGf,GAAG,GAAG,KAAKV,EAAR,GAAa,KAAKC,EAAlC;AACA,MAAIgC,KAAK,GAAG;AAACR,IAAAA,MAAM,EAAEA,MAAT;AAAiBC,IAAAA,MAAM,EAAE,IAAzB;AAA+BhB,IAAAA,GAAG,EAAEA,GAApC;AAAyCiB,IAAAA,GAAG,EAAEA,GAA9C;AAAmDb,IAAAA,KAAK,EAAE;AAA1D,GAAZ;AACA,SAAO,KAAKT,MAAL,CAAY6B,MAAZ,CAAmB,KAAKL,0BAAL,EAAnB,EAAqD,CAArD,EAAwDI,KAAxD,CAAP;AACA,CAND;;AAQAnC,KAAK,CAACU,SAAN,CAAgB2B,SAAhB,GAA4B,UAAUL,EAAV,EAAc;AACzC,MAAIM,CAAC,GAAG,KAAK/B,MAAL,CAAYyB,EAAZ,CAAR;AACA,SAAQ,CAACM,CAAC,CAACV,MAAH,IAAaU,CAAC,CAACT,GAAF,GAAQ,CAArB,IAA0BS,CAAC,CAACT,GAAF,GAAQ,CAAlC,KAA0CS,CAAC,CAACX,MAAF,KAAa,KAAKzB,EAAlB,IAAwB,CAACoC,CAAC,CAAC1B,GAA5B,IAAqC0B,CAAC,CAACX,MAAF,KAAa,KAAKxB,EAAlB,IAAwBmC,CAAC,CAAC1B,GAAF,KAAU,CAAhH,CAAR;AACA,CAHD;AAKA;;;AAEAZ,KAAK,CAACU,SAAN,CAAgB6B,UAAhB,GAA6B,UAAUP,EAAV,EAAc;AAC1C,SAAO,KAAKzB,MAAL,CAAYyB,EAAZ,EAAgBL,MAAvB;AACA,CAFD;;AAIA3B,KAAK,CAACU,SAAN,CAAgB8B,OAAhB,GAA0B,UAAUF,CAAV,EAAaG,QAAb,EAAuBC,QAAvB,EAAiCC,QAAjC,EAA2CC,QAA3C,EAAqDC,gBAArD,EAAuE;AAChG;AACA,MAAIC,gBAAgB,GAAG,KAAK1C,KAAL,CAAW,IAAIkC,CAAC,CAAC1B,GAAjB,EAAsB,IAAI0B,CAAC,CAACT,GAA5B,CAAvB;;AACA,MAAGc,QAAQ,IAAI,CAACG,gBAAgB,CAAC/B,GAAjC,EAAsC;AACrC,QAAIgC,SAAS,GAAGH,QAAQ,CAAC7B,GAAzB;AACA,QAAIiC,SAAS,GAAG,KAAK5C,KAAL,CAAW,KAAKkC,CAAC,CAAC1B,GAAF,GAAQ6B,QAAb,CAAX,EAAmC,KAAKH,CAAC,CAACT,GAAF,GAAQa,QAAb,CAAnC,EAA2D3B,GAA3E;;AACA,QAAG,CAACgC,SAAS,IAAIC,SAAd,KAA4B,EAAED,SAAS,IAAIC,SAAf,CAA/B,EAA0D;AAAE;AAC3D,UAAIC,IAAI,GAAGF,SAAS,GAAGA,SAAH,GAAeC,SAAnC,CADyD,CAEzD;;AACA,UAAIH,gBAAJ,EAAsB,OAAO,IAAP,CAAtB,KACKC,gBAAgB,CAAC7B,IAAjB,GAAwBgC,IAAxB;AACL;AACD;AACD,CAbD;;AAeAjD,KAAK,CAACU,SAAN,CAAgBwC,OAAhB,GAA0B,UAAUZ,CAAV,EAAaG,QAAb,EAAuBC,QAAvB,EAAiCE,QAAjC,EAA2CC,gBAA3C,EAA6D;AACtF;AACA,MAAIC,gBAAgB,GAAG,KAAK1C,KAAL,CAAWkC,CAAC,CAAC1B,GAAF,GAAQ6B,QAAQ,GAAC,CAA5B,EAA+BH,CAAC,CAACT,GAAF,GAAQa,QAAQ,GAAC,CAAhD,CAAvB;;AACA,MAAG5C,IAAI,CAACqD,SAAL,CAAeb,CAAC,CAAC1B,GAAF,GAAQ6B,QAAQ,GAAC,CAAhC,EAAmCH,CAAC,CAACT,GAAF,GAAQa,QAAQ,GAAC,CAApD,CAAH,EAA2D;AAC1D,QAAI,KAAKH,UAAL,CAAgBK,QAAQ,CAAC7B,GAAzB,MAAkCuB,CAAC,CAACX,MAApC,IAA8C,CAACmB,gBAAgB,CAAC/B,GAApE,EAAyE;AACxE,UAAG8B,gBAAH,EAAqB,OAAO,IAAP,CAArB,KACKC,gBAAgB,CAAC7B,IAAjB,GAAwB2B,QAAQ,CAAC7B,GAAjC;AACL;AACD;AACD,CATD;;AAWAf,KAAK,CAACU,SAAN,CAAgBiC,QAAhB,GAA2B,UAAUL,CAAV,EAAaO,gBAAb,EAA+B;AACzD,MAAIF,QAAQ,GAAG7C,IAAI,CAACsD,SAAL,CAAed,CAAC,CAAC1B,GAAjB,EAAsB0B,CAAC,CAACT,GAAxB,IAA+B,CAA9C;AACA,MAAIiB,gBAAgB,GAAG,KAAK1C,KAAL,CAAW,IAAIkC,CAAC,CAAC1B,GAAjB,EAAsB,IAAI0B,CAAC,CAACT,GAA5B,CAAvB;;AACA,MAAGc,QAAQ,IAAIG,gBAAgB,CAAC/B,GAAjB,KAAyB,IAAxC,EAA8C;AAC7C,QAAI8B,gBAAJ,EAAsB,OAAO,IAAP,CAAtB,KACKC,gBAAgB,CAAC7B,IAAjB,GAAwB,IAAxB;AACL;AACD,CAPD;;AASAjB,KAAK,CAACU,SAAN,CAAgB2C,cAAhB,GAAiC,UAAUrB,EAAV,EAAcpB,GAAd,EAAmBiB,GAAnB,EAAwB;AACxD,MAAI,KAAKQ,SAAL,CAAeL,EAAf,CAAJ,EAAwB,OAAQ,KAAK5B,KAAL,CAAWQ,GAAX,EAAgBiB,GAAhB,MAAyB,IAAjC;AACxB,CAFD;;AAIA7B,KAAK,CAACU,SAAN,CAAgB4C,gBAAhB,GAAmC,UAAUhB,CAAV,EAAaO,gBAAb,EAA+B;AACjE,MAAIjC,GAAG,GAAG0B,CAAC,CAACX,MAAF,KAAa,KAAKzB,EAAlB,GAAuB,CAAvB,GAA2B,CAArC;AACA,MAAI4C,gBAAJ;AACA,MAAIS,YAAY,GAAG,EAAnB;;AACA,OAAI,IAAI1B,GAAG,GAAC,CAAZ,EAAeA,GAAG,GAAC,CAAnB,EAAqBA,GAAG,EAAxB,EAA4B;AAC3BiB,IAAAA,gBAAgB,GAAG,KAAK1C,KAAL,CAAWQ,GAAX,EAAgBiB,GAAhB,CAAnB;;AACA,QAAIiB,gBAAgB,CAAC/B,GAAjB,KAAyB,IAA7B,EAAmC;AAClC,UAAI8B,gBAAJ,EAAsB,OAAO,IAAP,CAAtB,KACKC,gBAAgB,CAAC7B,IAAjB,GAAwB,IAAxB;AACL;AACD;AACD,CAXD,C,CAaA;;;AACAjB,KAAK,CAACU,SAAN,CAAgB8C,SAAhB,GAA4B,UAAUxB,EAAV,EAAca,gBAAd,EAAgCY,CAAhC,EAAmC/B,CAAnC,EAAsC;AACjE,MAAIgC,IAAI,GAAG,EAAX;AAAA,MAAeC,KAAK,GAAG,EAAvB;AAAA,MAA2BC,KAAK,GAAG,EAAnC;AACA,MAAItB,CAAC,GAAG,KAAK/B,MAAL,CAAYyB,EAAZ,CAAR,CAFiE,CAGjE;;AACA,MAAIyB,CAAC,IAAI,IAAL,IAAa/B,CAAC,IAAI,IAAtB,EAA4B;AAC3B,QAAG5B,IAAI,CAACqD,SAAL,CAAeb,CAAC,CAAC1B,GAAF,GAAQ6C,CAAvB,EAA0BnB,CAAC,CAACT,GAAF,GAAQH,CAAlC,MAAyC+B,CAAC,IAAI/B,CAA9C,CAAH,EAAqD;AACpD,UAAIkB,QAAQ,GAAG,KAAKxC,KAAL,CAAWkC,CAAC,CAAC1B,GAAF,GAAQ6C,CAAnB,EAAsBnB,CAAC,CAACT,GAAF,GAAQH,CAA9B,CAAf;AACA,UAAIiB,QAAQ,GAAG7C,IAAI,CAACsD,SAAL,CAAed,CAAC,CAAC1B,GAAF,GAAQ6C,CAAvB,EAA0BnB,CAAC,CAACT,GAAF,GAAQH,CAAlC,IAAuC,CAAtD;AAEA,UAAI,KAAKc,OAAL,CAAaF,CAAb,EAAgBmB,CAAhB,EAAmB/B,CAAnB,EAAsBiB,QAAtB,EAAgCC,QAAhC,EAA0CC,gBAA1C,CAAJ,EAAiE,OAAO,IAAP;;AACjE,UAAID,QAAQ,CAAC7B,GAAT,KAAiB,IAArB,EAA2B;AAC1B,YAAI,KAAKmC,OAAL,CAAaZ,CAAb,EAAgBmB,CAAhB,EAAmB/B,CAAnB,EAAsBkB,QAAtB,EAAgCC,gBAAhC,CAAJ,EAAuD,OAAO,IAAP;AACvD,OAFD,MAGK,IAAIA,gBAAgB,GAAC,CAArB,EAAwB,OAAO,IAAP,CAAxB,CAAqC;AAArC,WACAD,QAAQ,CAAC3B,IAAT,GAAgB,IAAhB,CAT+C,CAUpD;AACA;;AACA;AACD,GAdD,MAcO;AACN,SAAIwC,CAAC,GAAC,CAAC,CAAP,EAASA,CAAC,GAAC,CAAX,EAAaA,CAAC,EAAd,EAAkB;AACjB,WAAI/B,CAAC,GAAC,CAAC,CAAP,EAASA,CAAC,GAAC,CAAX,EAAcA,CAAC,EAAf,EAAmB;AAClB;AACA,YAAG5B,IAAI,CAACqD,SAAL,CAAeb,CAAC,CAAC1B,GAAF,GAAQ6C,CAAvB,EAA0BnB,CAAC,CAACT,GAAF,GAAQH,CAAlC,MAAyC+B,CAAC,IAAI/B,CAA9C,CAAH,EAAqD;AACpD,cAAIkB,QAAQ,GAAG,KAAKxC,KAAL,CAAWkC,CAAC,CAAC1B,GAAF,GAAQ6C,CAAnB,EAAsBnB,CAAC,CAACT,GAAF,GAAQH,CAA9B,CAAf;AACA,cAAIiB,QAAQ,GAAG7C,IAAI,CAACsD,SAAL,CAAed,CAAC,CAAC1B,GAAF,GAAQ6C,CAAvB,EAA0BnB,CAAC,CAACT,GAAF,GAAQH,CAAlC,IAAuC,CAAtD;AAEA,cAAI,KAAKc,OAAL,CAAaF,CAAb,EAAgBmB,CAAhB,EAAmB/B,CAAnB,EAAsBiB,QAAtB,EAAgCC,QAAhC,EAA0CC,gBAA1C,CAAJ,EAAiE,OAAO,IAAP;;AACjE,cAAID,QAAQ,CAAC7B,GAAT,KAAiB,IAArB,EAA2B;AAC1B,gBAAI,KAAKmC,OAAL,CAAaZ,CAAb,EAAgBmB,CAAhB,EAAmB/B,CAAnB,EAAsBkB,QAAtB,EAAgCC,gBAAhC,CAAJ,EAAuD,OAAO,IAAP;AACvD,WAFD,MAGK,IAAIA,gBAAgB,GAAC,CAArB,EAAwB,OAAO,IAAP,CAAxB,CAAqC;AAArC,eACAD,QAAQ,CAAC3B,IAAT,GAAgB,IAAhB,CAT+C,CAUpD;AACA;;AACA;AACD;AACD;AACD,GArCgE,CAuCjE;;;AACA,MAAI,KAAK0B,QAAL,CAAcL,CAAd,EAAiBO,gBAAjB,CAAJ,EAAwC,OAAO,IAAP;AACxC,MAAI,KAAKS,gBAAL,CAAsBhB,CAAtB,EAAyBO,gBAAzB,CAAJ,EAAgD,OAAO,IAAP;AAEhD,SAAO,KAAP;AACA,CA5CD,C,CA8CA;;;AACA7C,KAAK,CAACU,SAAN,CAAgBmD,OAAhB,GAA0B,UAAU7B,EAAV,EAAcpB,GAAd,EAAmBiB,GAAnB,EAAwB;AACjD,MAAIS,CAAC,GAAG,KAAK/B,MAAL,CAAYyB,EAAZ,CAAR,CADiD,CAEjD;AACA;;AACA,OAAK5B,KAAL,CAAWkC,CAAC,CAAC1B,GAAb,EAAkB0B,CAAC,CAACT,GAApB,EAAyBd,GAAzB,GAA+B,IAA/B;AACA,OAAKX,KAAL,CAAWQ,GAAX,EAAgBiB,GAAhB,EAAqBd,GAArB,GAA2BiB,EAA3B;AACAM,EAAAA,CAAC,CAAC1B,GAAF,GAAQA,GAAR;AACA0B,EAAAA,CAAC,CAACT,GAAF,GAAQA,GAAR,CAPiD,CASjD;;AACA,MAAIH,CAAC,GAAGY,CAAC,CAACwB,WAAF,KAAkBC,SAAlB,GAA8B,KAAKxD,MAAL,CAAY+B,CAAC,CAACwB,WAAd,CAA9B,GAA2D,IAAnE;;AACA,MAAIpC,CAAJ,EAAO;AACNA,IAAAA,CAAC,CAACV,KAAF,GAAU,KAAV;AACA,SAAKZ,KAAL,CAAWsB,CAAC,CAACd,GAAb,EAAkBc,CAAC,CAACG,GAApB,EAAyBd,GAAzB,GAA+B,IAA/B,CAFM,CAIN;;AACA,WAAO;AAAC0B,MAAAA,QAAQ,EAAEuB,IAAI,CAACC,IAAL,CAAU3B,CAAC,CAAC1B,GAAF,GAAMc,CAAC,CAACd,GAAlB,CAAX;AAAmC8B,MAAAA,QAAQ,EAAEsB,IAAI,CAACC,IAAL,CAAU3B,CAAC,CAACT,GAAF,GAAMH,CAAC,CAACG,GAAlB;AAA7C,KAAP;AACA;AACD,CAlBD;AAoBA;;;AAEA7B,KAAK,CAACU,SAAN,CAAgBwD,iBAAhB,GAAoC,UAAUlC,EAAV,EAAc;AACjD,SAAO,KAAKwB,SAAL,CAAexB,EAAf,EAAmB,CAAnB,CAAP,CADiD,CAEjD;AACA;AACA;AACA;AACA,CAND;;AAQAhC,KAAK,CAACU,SAAN,CAAgByD,SAAhB,GAA4B,UAAUnC,EAAV,EAAc;AACzC,SAAO,KAAKwB,SAAL,CAAexB,EAAf,EAAmB,CAAnB,CAAP,CADyC,CAEzC;AACA;AACA,CAJD,C,CAMA;;;AACAhC,KAAK,CAACU,SAAN,CAAgB0D,UAAhB,GAA6B,UAAUzC,MAAV,EAAkB;AAC9C,OAAI,IAAIK,EAAE,GAAC,CAAX,EAAcA,EAAE,GAAG,KAAKzB,MAAL,CAAY0B,MAA/B,EAAuCD,EAAE,EAAzC,EAA6C;AAC5C,QAAIM,CAAC,GAAG,KAAK/B,MAAL,CAAYyB,EAAZ,CAAR;;AACA,QAAGM,CAAC,CAACtB,KAAF,IAAWsB,CAAC,CAACX,MAAF,KAAaA,MAA3B,EAAmC;AAClC,UAAG,KAAKwC,SAAL,CAAenC,EAAf,CAAH,EAAuB,OAAO,IAAP;AACvB;AACD;;AACD,SAAO,KAAP;AACA,CARD;;AAUAhC,KAAK,CAACU,SAAN,CAAgB2D,UAAhB,GAA6B,UAAUrC,EAAV,EAAcpB,GAAd,EAAmBiB,GAAnB,EAAwB;AACpD;AACA,SAAO,KAAKzB,KAAL,CAAWQ,GAAX,EAAgBiB,GAAhB,EAAqBZ,IAA5B;AACA;;;;;;;;;AASA,CAZD;;AAcAqD,MAAM,CAACC,OAAP,GAAiBvE,KAAjB","sourcesContent":["var util = require('./util.js');\n//single, phase, jump, super-jump\n/*\nadj: adjacent\nphase: change portal side\nleap: capture piece while jumping through a portal\njitch: jump, then phase\nswump: switch, then jump\n}\n*/\n/*\nLEGEND\npi = piece index in Board.pieces\np = piece Board.pieces[pi]\n*/\n\n/*\nPreviously, I assumed that if a uncloned piece reaches the end of the other player's side,\nthen that piece must duplicate before continuing the game. However, my assumption fails\nif the player's spawn row is full and hence I will give the player the option to choose.\n\nThis realization got me thinking about adding different game modes that\nmodify things like the board size, and side-wrapping.\n\nboard size: If board were 9x9, we can put a clone phaser in the center\nthat duplicates any non-clone pieces at most once.\n\nside wrapping: columns are cyclic: make board[row] = cyclic linked List?\n\n\n\nSpeaking of linked lists... Why am I not using them now?\nMaybe this is what I needed to store highlight;\n represent each of this.state.selected_piece's moves as a boolean for 'highlight' in\n this.board[row][col] = {who: p.player | null, highlight: true | false :: added in Board.get_moves(pi)}\n for some row,col,  and p = this.piece[pi]\n to Leap.set_piece(), add this.state.board.update_board()\n\n*/\n\n\nfunction Board(size, p1, p2) {\n\tthis.p1 = p1;\n\tthis.p2 = p2;\n\tthis.board = this.init_board(size);\n\tthis.pieces_separator = 8;\n\tthis.pieces = this.init_pieces(size, p1, p2);\n\tthis.update_board(); //add pieces to board\n}\n\n//TODO:\n//this.board[row][col] = {who: p.player | null, highlight: {row: some_row, col: some_col} | null:: added in Board.get_moves(pi)}\n//update occurs when (1) piece is cloned (pieces index may change)\n// and when (2) set_piece is called\n//To make highlight function properly, I'll have to call this.get_moves() from here.\n//It follows that I will have to remove other calls to this.get_moves()\nBoard.prototype.update_board = function () {\n\tthis.board.map(row => row.map((cell, j) =>\n\t\tcell.who != null\n\t\t? (this.pieces[cell.who].alive\n\t\t\t? {who: this.pieces[cell.who], move:false}\n\t\t\t: {who: null, move:false})\n\t\t: {who: null, move: false} ));\n}\n\nBoard.prototype.init_board = function (size) {\n    let board = [], player_two = [], player_one = [];\n\t\t//TODO: fill as {who: pi (this.pieces index), highlight: null}\n\t\tfor (let i = 0; i < size; i++) {\n\t\t\tplayer_two.push({who: i, move: false});\n\t\t\tplayer_one.push({who: i+8, move: false});\n\t\t}\n\t\tboard.push(player_two);\n\t\tfor (let i = 1; i < size-1; i++) board.push(Array(size).fill({who: null, move: false}));\n\t\tboard.push(player_one);\n\n    return board;\n}\n\nBoard.prototype.init_pieces = function (size) {\n\tlet white_pieces = [];\n\tlet black_pieces = [];\n\tfor (let c = 0; c < size; c++) {\n\t\twhite_pieces.push({player: this.p1, cloned: false, row: 7, col: c, alive: true});\n\t\tblack_pieces.push({player: this.p2, cloned: false, row: 0, col: c, alive: true});\n\t}\n    return black_pieces.concat(white_pieces);\n}\n\n/*==========\t\t\t\t\t\t\t\t\t\t\tCLONE\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n\n//Calls every time a clone is made\nBoard.prototype.insert_at_separation_index = function () {\n\tfor(let pi=this.pieces_separator; pi<this.pieces.length; pi++) {\n\t\t//Finds index that separates p1 and p2 pieces\n\t\tif(this.pieces[pi].player !== this.p1) {\n\t\t\tthis.pieces_separator = pi; //update\n\t\t\treturn pi;\n\t\t}\n\t}\n}\n\nBoard.prototype.make_clone = function (pi, row, col) {\n\tthis.pieces[pi].cloned = true;\n\t//row will only be 0 or 7, so we can use this to determine player and placement\n\tlet player = row ? this.p1 : this.p2;\n\tlet clone = {player: player, cloned: true, row: row, col: col, alive: true};\n\treturn this.pieces.splice(this.insert_at_separation_index(),0, clone);\n}\n\nBoard.prototype.can_clone = function (pi) {\n\tlet p = this.pieces[pi];\n\treturn (!p.cloned && p.col < 7 && p.col > 0 && ( (p.player === this.p1 && !p.row) || (p.player === this.p2 && p.row === 7) ));\n}\n\n/*==========\t\t\t\t\t\t\t\t\t\t\tMOVES\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n\nBoard.prototype.get_player = function (pi) {\n\treturn this.pieces[pi].player;\n}\n\nBoard.prototype.is_leap = function (p, row_incr, col_incr, is_phase, cell_adj, bypass_condition) {\n\t//if neighbor cell is a phase, leap_cell clear, and (enemy piece on phase_adj XOR enemy piece on phase_far)\n\tlet destination_cell = this.board[7 - p.row][7 - p.col];\n\tif(is_phase && !destination_cell.who) {\n\t\tlet phase_adj = cell_adj.who;\n\t\tlet phase_far = this.board[7 - (p.row + row_incr)][7 - (p.col + col_incr)].who;\n\t\tif((phase_adj || phase_far) && !(phase_adj && phase_far)) { //xor filter. Only one may be true\n\t\t\tlet capt = phase_adj ? phase_adj : phase_far;\n\t\t\t//if 0, add to destination_cell.move, if 1,\n\t\t\tif (bypass_condition) return true;\n\t\t\telse destination_cell.move = capt;\n\t\t}\n\t}\n}\n\nBoard.prototype.is_jump = function (p, row_incr, col_incr, cell_adj, bypass_condition) {\n\t//if adj cell occupied, jump_cell in bounds, jump_cell clear, and jump_cell has enemy piece\n\tlet destination_cell = this.board[p.row + row_incr*2][p.col + col_incr*2];\n\tif(util.in_bounds(p.row + row_incr*2, p.col + col_incr*2)) {\n\t\tif (this.get_player(cell_adj.who) !== p.player && !destination_cell.who) {\n\t\t\tif(bypass_condition) return true;\n\t\t\telse destination_cell.move = cell_adj.who;\n\t\t}\n\t}\n}\n\nBoard.prototype.is_phase = function (p, bypass_condition) {\n\tlet is_phase = util.cell_type(p.row, p.col) > 1;\n\tlet destination_cell = this.board[7 - p.row][7 - p.col];\n\tif(is_phase && destination_cell.who !== null) {\n\t\tif (bypass_condition) return true;\n\t\telse destination_cell.move = true;\n\t}\n}\n\nBoard.prototype.is_clone_spawn = function (pi, row, col) {\n\tif (this.can_clone(pi)) return (this.board[row][col] === null);\n}\n\nBoard.prototype.get_clone_spawns = function (p, bypass_condition) {\n\tlet row = p.player === this.p1 ? 0 : 7;\n\tlet destination_cell;\n\tlet clone_spawns = [];\n\tfor(let col=1; col<7;col++) {\n\t\tdestination_cell = this.board[row][col];\n\t\tif (destination_cell.who === null) {\n\t\t\tif (bypass_condition) return true;\n\t\t\telse destination_cell.move = true;\n\t\t}\n\t}\n}\n\n//bypass_condition (HIGHLIGHT BYPASS CONDITION): undefined - default (bypass none), 1 - bypass all, 2 - bypass non-capturing moves\nBoard.prototype.get_moves = function (pi, bypass_condition, r, c) {\n\tlet adjs = [], jumps = [], leaps = [];\n\tlet p = this.pieces[pi];\n\t//TODO: ref this.board[p.row + r][p.col + r].who, and set highlight = true for every destination\n\tif (r != null && c != null) {\n\t\tif(util.in_bounds(p.row + r, p.col + c) && (r || c)) {\n\t\t\tlet cell_adj = this.board[p.row + r][p.col + c];\n\t\t\tlet is_phase = util.cell_type(p.row + r, p.col + c) > 1;\n\n\t\t\tif (this.is_leap(p, r, c, is_phase, cell_adj, bypass_condition)) return true;\n\t\t\tif (cell_adj.who !== null) {\n\t\t\t\tif (this.is_jump(p, r, c, cell_adj, bypass_condition)) return true;\n\t\t\t}\n\t\t\telse if (bypass_condition%2) return true;\t//adjacent moves\n\t\t\telse cell_adj.move = true;\n\t\t\t//if (leap !== undefined) leaps.push(leap);\n\t\t\t//if (jump !== undefined) jumps.push(jump);\n\t\t}\n\t} else {\n\t\tfor(r=-1;r<2;r++) {\n\t\t\tfor(c=-1;c<2; c++) {\n\t\t\t\t//check adjacent cells of piece p wrt the boundary\n\t\t\t\tif(util.in_bounds(p.row + r, p.col + c) && (r || c)) {\n\t\t\t\t\tlet cell_adj = this.board[p.row + r][p.col + c];\n\t\t\t\t\tlet is_phase = util.cell_type(p.row + r, p.col + c) > 1;\n\n\t\t\t\t\tif (this.is_leap(p, r, c, is_phase, cell_adj, bypass_condition)) return true;\n\t\t\t\t\tif (cell_adj.who !== null) {\n\t\t\t\t\t\tif (this.is_jump(p, r, c, cell_adj, bypass_condition)) return true;\n\t\t\t\t\t}\n\t\t\t\t\telse if (bypass_condition%2) return true;\t//adjacent moves\n\t\t\t\t\telse cell_adj.move = true;\n\t\t\t\t\t//if (leap !== undefined) leaps.push(leap);\n\t\t\t\t\t//if (jump !== undefined) jumps.push(jump);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t//add key clone_spawns if piece can be cloned\n\tif (this.is_phase(p, bypass_condition)) return true;\n\tif (this.get_clone_spawns(p, bypass_condition)) return true;\n\n\treturn false;\n}\n\n//Performs move. returns true if captured piece in process, else false\nBoard.prototype.do_move = function (pi, row, col) {\n\tlet p = this.pieces[pi];\n\t//If piece (is on super cell) can phase, extend player turn to allow option\n\t//if (this.is_phase(p))\n\tthis.board[p.row][p.col].who = null;\n\tthis.board[row][col].who = pi;\n\tp.row = row;\n\tp.col = col;\n\n\t//if piece p contains captured piece\n\tlet c = p.captured_pi !== undefined ? this.pieces[p.captured_pi] : null;\n\tif (c) {\n\t\tc.alive = false;\n\t\tthis.board[c.row][c.col].who = null;\n\n\t\t//return direction of move\n\t\treturn {row_incr: Math.sign(p.row-c.row), col_incr: Math.sign(p.col-c.col)};\n\t}\n}\n\n/*==========\t\t\t\t\t\t\t\t\t\t\tINTEGRITY\t\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n\nBoard.prototype.can_continue_move = function (pi) {\n\treturn this.get_moves(pi, 2);\n\t//TODO: Only check moves in the same direction as the initial move\n\t//moves.adjs = [];\n\t//return !parseInt(Object.values(a).reduce( (j,i) => i.length !== undefined ? i.length + j: j));\n\t//return !moves.every(t => t === [] || t === {} || t === null);\n}\n\nBoard.prototype.has_moves = function (pi) {\n\treturn this.get_moves(pi, 1);\n\t//return !parseInt(Object.values(a).reduce( (j,i) => i.length !== undefined ? i.length + j: j));\n\t//return !Object.values(moves).every(t => t === [] || t === {} || t === null);\n}\n\n//Player has no more moves when (1): all player's pieces are dead (2): every piece has no moves\nBoard.prototype.moves_left = function (player) {\n\tfor(let pi=0; pi < this.pieces.length; pi++) {\n\t\tlet p = this.pieces[pi];\n\t\tif(p.alive && p.player === player) {\n\t\t\tif(this.has_moves(pi)) return true;\n\t\t}\n\t}\n\treturn false;\n}\n\nBoard.prototype.valid_move = function (pi, row, col) {\n\t//let m = this.get_moves(pi); //** this.board[row][col].highlight\n\treturn this.board[row][col].move;\n\t/*\n\tlet moves = [];\n\tmoves = moves.concat(m.phase, m.adjs, m.jumps, m.leaps, m.clone_spawns);\n\tfor (let move of moves) {\n\t\tif (!move) continue;\n\t\tif (move.row === row && move.col === col) return true;\n\t}\n\treturn false;\n\t*/\n}\n\nmodule.exports = Board;\n"]},"metadata":{},"sourceType":"module"}