{"ast":null,"code":"var _jsxFileName = \"/Users/bacchus/git/Leap/client/src/components/Game/index.js\";\nimport React, { useEffect, useState } from 'react';\nimport { object } from 'prop-types';\nimport { connect } from 'react-redux';\nimport { select } from '../../actions/game'; // this.state = {\n//   game: props.game,\n//   user: props.user, //value, isBot, color\n//   move: { from: undefined, to: undefined, captured: undefined},\n// }\n//const isTurn = user.value === game.turn;\n\nexport const Game = ({\n  game,\n  move\n}) => {\n  /*  display: grid for the cells  */\n  let cells = [];\n\n  for (let index = 0; index < game.board.length; index++) {\n    const cell = game.board[index];\n    const moveType = move.to === index && 'to' || move.from === index && 'from' || move.captured === index && 'captured' || '';\n    cells.push(React.createElement(Cell, {\n      key: index,\n      index: index,\n      cell: cell,\n      highlight: cell & 2,\n      moveType: moveType,\n      select: select.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }));\n  }\n\n  return React.createElement(\"div\", {\n    className: \"board\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \" \", cells, \" \");\n};\nGame.propTypes = {\n  game: object.isRequired,\n  move: object.isRequired\n}; //TODO: make selectors\n\nconst mapStateToProps = state => ({\n  move: getMoveSelections(state)\n});\n\nexport default connect(mapStateToProps)(Game);","map":{"version":3,"sources":["/Users/bacchus/git/Leap/client/src/components/Game/index.js"],"names":["React","useEffect","useState","object","connect","select","Game","game","move","cells","index","board","length","cell","moveType","to","from","captured","push","bind","propTypes","isRequired","mapStateToProps","state","getMoveSelections"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAASC,MAAT,QAAuB,YAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,MAAT,QAAuB,oBAAvB,C,CACA;AACA;AACA;AACA;AACA;AACE;;AAEF,OAAO,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAoB;AACtC;AACA,MAAIC,KAAK,GAAG,EAAZ;;AACA,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGH,IAAI,CAACI,KAAL,CAAWC,MAAvC,EAA+CF,KAAK,EAApD,EAAwD;AACtD,UAAMG,IAAI,GAAGN,IAAI,CAACI,KAAL,CAAWD,KAAX,CAAb;AACA,UAAMI,QAAQ,GAAIN,IAAI,CAACO,EAAL,KAAYL,KAAZ,IAAqB,IAAtB,IACZF,IAAI,CAACQ,IAAL,KAAcN,KAAd,IAAuB,MADX,IAEZF,IAAI,CAACS,QAAL,KAAkBP,KAAlB,IAA2B,UAFf,IAGb,EAHJ;AAKAD,IAAAA,KAAK,CAACS,IAAN,CAAW,oBAAC,IAAD;AACT,MAAA,GAAG,EAAER,KADI;AAET,MAAA,KAAK,EAAEA,KAFE;AAGT,MAAA,IAAI,EAAEG,IAHG;AAIT,MAAA,SAAS,EAAEA,IAAI,GAAG,CAJT;AAKT,MAAA,QAAQ,EAAEC,QALD;AAMT,MAAA,MAAM,EAAET,MAAM,CAACc,IAAP,CAAY,IAAZ,CANC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAX;AAOD;;AAED,SAAQ;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAA0BV,KAA1B,MAAR;AACD,CApBM;AAsBPH,IAAI,CAACc,SAAL,GAAiB;AAAEb,EAAAA,IAAI,EAAEJ,MAAM,CAACkB,UAAf;AAA2Bb,EAAAA,IAAI,EAAEL,MAAM,CAACkB;AAAxC,CAAjB,C,CACA;;AACA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AAACf,EAAAA,IAAI,EAAEgB,iBAAiB,CAACD,KAAD;AAAxB,CAAL,CAA7B;;AAEA,eAAenB,OAAO,CAACkB,eAAD,CAAP,CAAyBhB,IAAzB,CAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport { object } from 'prop-types';\nimport { connect } from 'react-redux';\nimport { select } from '../../actions/game';\n// this.state = {\n//   game: props.game,\n//   user: props.user, //value, isBot, color\n//   move: { from: undefined, to: undefined, captured: undefined},\n// }\n  //const isTurn = user.value === game.turn;\n\nexport const Game = ({ game, move }) => {\n  /*  display: grid for the cells  */\n  let cells = [];\n  for (let index = 0; index < game.board.length; index++) {\n    const cell = game.board[index];\n    const moveType = (move.to === index && 'to')\n     || (move.from === index && 'from')\n     || (move.captured === index && 'captured')\n     || '';\n\n    cells.push(<Cell\n      key={index}\n      index={index}\n      cell={cell}\n      highlight={cell & 2}\n      moveType={moveType}\n      select={select.bind(this)} />);\n  }\n\n  return (<div className=\"board\"> { cells } </div>);\n};\n\nGame.propTypes = { game: object.isRequired, move: object.isRequired };\n//TODO: make selectors\nconst mapStateToProps = state => ({move: getMoveSelections(state)});\n\nexport default connect(mapStateToProps)(Game);\n"]},"metadata":{},"sourceType":"module"}