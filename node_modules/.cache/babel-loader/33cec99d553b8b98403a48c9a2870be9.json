{"ast":null,"code":"import _objectSpread from \"/Users/bacchus/git/Leap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/bacchus/git/Leap/src/Leap.js\";\nimport React, { Component } from 'react';\nimport './css/ui.css';\nimport Board from './js/board.js';\nimport Countdown from 'react-countdown-now';\n\nvar util = require('./js/util.js');\n/*\nTODO:\nhighlight pieces\n\nGame description:\n\n\n\"How to Play\":\n-directions\n-tutorial?\n*/\n\n\nconst BOARD_SIZE = 8;\nconst BOARD_AREA = BOARD_SIZE * BOARD_SIZE;\nconst playerOne = 4;\nconst playerTwo = 12;\nvar PLAYERS;\nconst CELL_COLORS = [\"gray1\", \"gray2\", \"pink\", \"red\", \"orange\", \"yellow\", \"green\", \"blue\"];\n\nclass Leap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      /*...props.config,*/\n      board: new Board(BOARD_SIZE, 0),\n      // 0 is phaseLayout\n      turn: props.config.players[0].first ? playerOne : playerTwo,\n      continuedMove: false,\n      selectedPiece: null,\n      winner: null\n    };\n    /*\n    When we implement colyseus,\n      name: 'Player X' default, change in 'more' section or something\n      class: 'piece '+ chosen color\n      bot: true | false\n    */\n\n    PLAYERS = {\n      [playerOne]: _objectSpread({}, props.config.players[0], {\n        class: \"player-one\"\n      }),\n      [playerTwo]: _objectSpread({}, props.config.players[1], {\n        class: \"player-two\"\n      })\n    };\n  }\n\n  componentDidMount() {\n    //Check if first player is bot\n    if (PLAYERS[this.state.turn].bot) {\n      console.log('tete');\n    }\n  } //GOOD PLACE FOR NETWORK REQUEST\n\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    //check if current player is bot\n    if (PLAYERS[this.state.turn].bot) {\n      console.log('BOT TIME: ');\n    }\n  } //React update method\n\n\n  componentDidUpdate(prevProps, prevState) {\n    //this.state.board.updateBoard();\n    if (prevState.turn !== this.state.turn) {\n      let board = this.state.board;\n\n      if (!board.movesLeft(this.state.turn)) {\n        console.log(\"${this.state.turn} has no more moves!\");\n        this.setState({\n          winner: this.nextPlayer()\n        });\n      }\n    } else if (this.state.selectedPiece) {//if is a move continuation and Counter hasn't started, start the timer\n      //if (this.state.contined_move) {}\n    }\n  }\n\n  selectCell(index, row, col) {\n    //If a move is not a continuation, default case,\n    if (!this.state.continuedMove) {\n      if (this.canSelectPiece(index)) this.setPiece(index);else if (this.state.selectedPiece) this.handleMove(row, col);\n    } else {\n      //if continuation\n      //check if move = true..\n      let board = this.state.board;\n      if (board.validMove(row, col)) this.handleMove(row, col);else {\n        //TODO: prompt \"end turn?\" option.\n        //right now, let's just end the turn otherwise\n        this.setState({\n          board: board,\n          turn: this.nextPlayer(this.state.turn),\n          continuedMove: false,\n          selectedPiece: null\n        });\n        board.updateBoard();\n      }\n    }\n  }\n\n  handleMove(row, col) {\n    //row, col of destination\n    let board = this.state.board;\n\n    if (!board.validMove(row, col)) {\n      console.log(\"Invalid move!\");\n      return;\n    }\n\n    console.log(\"handling move...\");\n    let sel = this.state.selectedPiece;\n    let pi = board.board[sel.row][sel.col].who;\n    let moveDirection; //Check if move is a clone move; If it is, we need not call doMove\n\n    if (board.isCloneSpawn(pi, row, col)) board.makeClone(pi, row, col);else moveDirection = board.doMove(pi, row, col); //all highlights gone\n    //If we can jump or leap, or phase (if move prior was not a phase)\n\n    if (board.canContinueMove(pi, moveDirection)) {\n      board.getMoves(pi, 3, moveDirection.rowIncr, moveDirection.colIncr); //highlight continuable moves\n\n      this.setState({\n        board: board,\n        turn: this.state.turn,\n        continuedMove: moveDirection,\n        selectedPiece: {\n          row: row,\n          col: col\n        }\n      });\n    } else this.setState({\n      board: board,\n      turn: this.nextPlayer(this.state.turn),\n      continuedMove: false,\n      selectedPiece: null\n    });\n  } //bot need not use this; they get the move from ai.js, pass it on directly to doMove\n\n\n  canSelectPiece(index) {\n    let p = this.state.board.board[index];\n    if (p & 4) return false; //bit 2 indicates a player piece\n\n    return p << 2 & 3 == this.state.turn && !PLAYERS[this.state.turn].bot;\n  }\n\n  setPiece(index) {\n    let board = this.state.board;\n    board.updateBoard();\n    board.getMoves(index);\n    this.setState({\n      selectedPiece: board[index] >> 5\n    }); //console.log(\"selected piece: \" + this.state.board.board[row][col].who);\n  }\n\n  nextPlayer() {\n    return this.state.turn ^ 2;\n  }\n\n  restart() {\n    this.setState({\n      board: new Board(BOARD_SIZE, playerOne, playerTwo),\n      continuedMove: false,\n      turn: playerOne,\n      //TODO\n      selectedPiece: null,\n      winner: null\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"Leap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, this.state.winner && React.createElement(Winner, {\n      player: this.state.winner,\n      restart: this.restart.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, \"Current turn: \", PLAYERS[this.state.turn].name, React.createElement(\"span\", {\n      className: PLAYERS[this.state.turn].class + \"-token\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"game-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game-options\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }), React.createElement(GameBoard, {\n      board: this.state.board,\n      selectedPiece: this.state.selectedPiece,\n      selectCell: this.selectCell.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"game-menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    })));\n  }\n\n}\n/*\n<Countdown date={Date.now() + 10000}\n           intervalDelay={0}\n           precision={3}\n           autoStart={this.state.continuedMove}\n           renderer={d => <div>\n              <span className=\"countdown-s\">{d.seconds}</span>\n              <span className=\"countdown-ms\">:{d.milliseconds}</span>\n           </div>}/>\n*/\n\n\nfunction Winner(props) {\n  let player = PLAYERS[props.player].name;\n  return React.createElement(\"div\", {\n    id: \"winner\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }, player, \" has won the game!\"), React.createElement(\"button\", {\n    onClick: props.restart,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }, \"Play again?\")));\n}\n\nfunction GameBoard(props) {\n  //let selectedRow = props.selectedPiece ? props.selectedPiece.row : null;\n  let rows = [];\n\n  for (let r = 0; r < BOARD_SIZE; r++) {\n    rows.push(React.createElement(Row, {\n      key: r,\n      row: r,\n      board: props.board,\n      selectedPiece: props.selectedPiece,\n      selectCell: props.selectCell,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }));\n  }\n\n  return React.createElement(\"div\", {\n    className: \"board\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227\n    },\n    __self: this\n  }, \" \", rows, \" \");\n}\n\nfunction Row(props) {\n  let cells = [],\n      index,\n      cell;\n\n  for (let c = 0; c < BOARD_SIZE; c++) {\n    index = props.row * BOARD_SIZE + c;\n    cell = props.board.board[index];\n    cells.push(React.createElement(Cell, {\n      key: index //board index\n      ,\n      val: cell //piece index key\n      ,\n      row: props.row,\n      col: c,\n      highlight: props.board[index] & 2,\n      selected: cell >> 5 === props.selectedPiece,\n      selectCell: props.selectCell,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }));\n  }\n\n  return React.createElement(\"span\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244\n    },\n    __self: this\n  }, \" \", cells, \" \");\n}\n\nfunction Cell(props) {\n  let color = CELL_COLORS[util.cellType(props.row, props.col)];\n  let highlight = props.highlight ? \" highlight\" : \"\";\n  let classes = \"cell \" + color + highlight;\n  return React.createElement(\"div\", {\n    className: classes,\n    onClick: () => props.selectCell(props.val, props.row, props.col),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252\n    },\n    __self: this\n  }, props.val & 12 && React.createElement(Piece, {\n    key: props.val >> 5,\n    player: props.val & 12,\n    cloned: props.val >> 4 & 16,\n    selected: props.selected,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253\n    },\n    __self: this\n  }));\n}\n\nfunction Piece(p) {\n  let classes = \"\";\n  classes += PLAYERS[p.player].class;\n  if (p.cloned) classes += \" cloned\";\n\n  if (p.selected) {\n    classes += \" selected\";\n  }\n\n  return React.createElement(\"div\", {\n    className: classes,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269\n    },\n    __self: this\n  });\n}\n/*\nTODO:\n- Make continue button (?)\n\n- AI player\n\n- Allow multiplayer\n    Random match making\n    invites (link or username (if integrated with Google Play))\n\n- Pieces are draggable and snap to grid\n    (if center of dragging piece is strictly within calc(cell-margin + cell-height/2) on drop, then select cell where piece dropped)\n    disable animations for all but phase and clone moves.\n\n- Make animations\n    If clone, we animate the original piece and newly created piece with cloning animation\n    If phase, piece fades in/out from center to edges on adj phase  and on far phase\n    if piece has caught:\n      If jump,\n        piece does a small hop to the destinationCell\n        captured bursts into little circles and fades away\n      If leap,\n        piece gets sucked into portal, (SVG points all transform to center of adj phase, timing ease-in-out), and pushed out (reverse animation)\n        if captured on adj phase:\n          captured shakes and does first part of phase animation while piece being sucked in, but then comes out as little circles on other side\n        else:\n          captured bursts into little circles and fades away\n    else:\n      piece does small hop to destination cell\n\nHow can we handle animations?\n> Translate moving piece p, where p is a child of the destination cell component,\n> from ( startingCell.center.x , startingCell.center.y ) to ( destinationCell.x, destinationCell.y)\n\n\nANIMATION PIPELINE:\n  In function Board.doMove:\n  - get move details\n      moving piece: p,\n      startingCell = {who: board[p.row][p.col].who, move_type: ye, row: p.row, col: p.col}, -- defined first in do move\n      moveDirection,\n      captured piece (if applicable)\n\n  Upon doMove or makeClone:\n  - Find Cell components of startingCell and, if applicable, captured piece\n      (starting cell) get Cell component c such that: c.row === startingCell.row && c.col === startingCell.col\n      (captured piece) get\n\n  -\n\n\n*/\n\n\nexport default Leap;","map":{"version":3,"sources":["/Users/bacchus/git/Leap/src/Leap.js"],"names":["React","Component","Board","Countdown","util","require","BOARD_SIZE","BOARD_AREA","playerOne","playerTwo","PLAYERS","CELL_COLORS","Leap","constructor","props","state","board","turn","config","players","first","continuedMove","selectedPiece","winner","class","componentDidMount","bot","console","log","componentDidUpdate","prevProps","prevState","snapshot","movesLeft","setState","nextPlayer","selectCell","index","row","col","canSelectPiece","setPiece","handleMove","validMove","updateBoard","sel","pi","who","moveDirection","isCloneSpawn","makeClone","doMove","canContinueMove","getMoves","rowIncr","colIncr","p","restart","render","bind","name","Winner","player","GameBoard","rows","r","push","Row","cells","cell","c","Cell","color","cellType","highlight","classes","val","selected","Piece","cloned"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './css/ui.css';\nimport Board from './js/board.js';\nimport Countdown from 'react-countdown-now';\nvar util = require('./js/util.js');\n\n/*\nTODO:\nhighlight pieces\n\nGame description:\n\n\n\"How to Play\":\n-directions\n-tutorial?\n*/\n\nconst BOARD_SIZE = 8;\nconst BOARD_AREA = BOARD_SIZE*BOARD_SIZE;\nconst playerOne = 4;\nconst playerTwo = 12;\nvar PLAYERS;\n\nconst CELL_COLORS = [ \"gray1\", \"gray2\", \"pink\", \"red\", \"orange\", \"yellow\", \"green\", \"blue\"];\n\nclass Leap extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      /*...props.config,*/\n      board: new Board(BOARD_SIZE, 0), // 0 is phaseLayout\n      turn: props.config.players[0].first ? playerOne : playerTwo,\n      continuedMove: false,\n      selectedPiece: null,\n      winner: null\n    };\n\n    /*\n    When we implement colyseus,\n      name: 'Player X' default, change in 'more' section or something\n      class: 'piece '+ chosen color\n      bot: true | false\n    */\n    PLAYERS = {\n      [playerOne]: {\n        ...props.config.players[0],\n        class: \"player-one\"\n      },\n      [playerTwo]: {\n        ...props.config.players[1],\n        class: \"player-two\"\n      }\n    }\n  }\n\n  componentDidMount() {\n    //Check if first player is bot\n    if(PLAYERS[this.state.turn].bot) {\n      console.log('tete');\n    }\n  }\n\n//GOOD PLACE FOR NETWORK REQUEST\n  componentDidUpdate(prevProps, prevState, snapshot) {\n\n    //check if current player is bot\n    if(PLAYERS[this.state.turn].bot) {\n      console.log('BOT TIME: ');\n\n    }\n  }\n\n  //React update method\n  componentDidUpdate(prevProps, prevState) {\n    //this.state.board.updateBoard();\n    if (prevState.turn !== this.state.turn) {\n      let board = this.state.board;\n      if (!board.movesLeft(this.state.turn)) {\n        console.log(\"${this.state.turn} has no more moves!\");\n        this.setState({winner: this.nextPlayer()});\n      }\n    } else if (this.state.selectedPiece){\n      //if is a move continuation and Counter hasn't started, start the timer\n      //if (this.state.contined_move) {}\n    }\n  }\n\n  selectCell(index, row, col) {\n    //If a move is not a continuation, default case,\n    if (!this.state.continuedMove) {\n      if (this.canSelectPiece(index)) this.setPiece(index);\n      else if (this.state.selectedPiece)  this.handleMove(row, col);\n    } else { //if continuation\n      //check if move = true..\n      let board = this.state.board;\n      if (board.validMove(row, col)) this.handleMove(row, col)\n      else {\n        //TODO: prompt \"end turn?\" option.\n        //right now, let's just end the turn otherwise\n        this.setState({\n          board: board,\n          turn: this.nextPlayer(this.state.turn),\n          continuedMove: false,\n          selectedPiece: null\n        });\n        board.updateBoard();\n      }\n    }\n  }\n\n  handleMove(row, col) { //row, col of destination\n    let board = this.state.board;\n    if (!board.validMove(row, col)) {\n      console.log(\"Invalid move!\");\n      return;\n    }\n    console.log(\"handling move...\");\n    let sel = this.state.selectedPiece;\n    let pi = board.board[sel.row][sel.col].who;\n\n    let moveDirection;\n    //Check if move is a clone move; If it is, we need not call doMove\n    if(board.isCloneSpawn(pi,row, col)) board.makeClone(pi, row, col);\n    else moveDirection = board.doMove(pi, row, col);\n    //all highlights gone\n\n    //If we can jump or leap, or phase (if move prior was not a phase)\n    if (board.canContinueMove(pi, moveDirection)) {\n      board.getMoves(pi, 3, moveDirection.rowIncr, moveDirection.colIncr); //highlight continuable moves\n      this.setState({\n        board: board,\n        turn: this.state.turn,\n        continuedMove: moveDirection,\n        selectedPiece: {row: row, col: col}\n      });\n    } else this.setState({\n        board: board,\n        turn: this.nextPlayer(this.state.turn),\n        continuedMove: false,\n        selectedPiece: null\n      });\n  }\n\n  //bot need not use this; they get the move from ai.js, pass it on directly to doMove\n  canSelectPiece(index) {\n    let p = this.state.board.board[index];\n    if(p & 4) return false; //bit 2 indicates a player piece\n    return ( (p << 2) & 3 == this.state.turn ) && !PLAYERS[this.state.turn].bot;\n  }\n\n  setPiece(index) {\n    let board = this.state.board;\n    board.updateBoard();\n    board.getMoves(index);\n    this.setState({selectedPiece: board[index] >> 5});\n      //console.log(\"selected piece: \" + this.state.board.board[row][col].who);\n  }\n\n  nextPlayer() {\n    return this.state.turn ^ 2;\n  }\n\n  restart() {\n    this.setState({ board: new Board(BOARD_SIZE, playerOne, playerTwo),\n                    continuedMove: false, turn: playerOne, //TODO\n                    selectedPiece: null, winner: null });\n  }\n\n  render() {\n    return (\n      <div className=\"Leap\">\n        { this.state.winner && <Winner player={this.state.winner} restart={this.restart.bind(this)} /> }\n        <h3>\n          Current turn: {PLAYERS[this.state.turn].name}\n          <span className={PLAYERS[this.state.turn].class+\"-token\"}></span>\n        </h3>\n        <div className=\"game-container\">\n          <div className=\"game-options\"></div>\n          <GameBoard board={this.state.board}\n                     selectedPiece={this.state.selectedPiece}\n                     selectCell={this.selectCell.bind(this)} />\n          <div className=\"game-menu\"></div>\n        </div>\n      </div>\n    );\n  }\n}\n\n/*\n<Countdown date={Date.now() + 10000}\n           intervalDelay={0}\n           precision={3}\n           autoStart={this.state.continuedMove}\n           renderer={d => <div>\n              <span className=\"countdown-s\">{d.seconds}</span>\n              <span className=\"countdown-ms\">:{d.milliseconds}</span>\n           </div>}/>\n*/\n\nfunction Winner(props) {\n  let player = PLAYERS[props.player].name;\n  return (\n    <div id=\"winner\">\n      <div>\n        <p>{player} has won the game!</p>\n        <button onClick={props.restart}>Play again?</button>\n      </div>\n    </div>\n  );\n}\n\n\nfunction GameBoard(props) {\n  //let selectedRow = props.selectedPiece ? props.selectedPiece.row : null;\n\n  let rows = [];\n  for(let r=0; r<BOARD_SIZE; r++) {\n    rows.push(<Row\n      key={r}\n      row={r}\n      board={props.board}\n      selectedPiece={props.selectedPiece}\n      selectCell={props.selectCell} />);\n  }\n  return (<div className=\"board\"> {rows} </div>);\n}\n\nfunction Row(props) {\n  let cells = [], index, cell;\n  for(let c=0; c< BOARD_SIZE; c++) {\n    index = props.row*BOARD_SIZE + c;\n    cell = props.board.board[index];\n    cells.push(<Cell\n      key={index} //board index\n      val={cell} //piece index key\n      row={props.row}\n      col={c}\n      highlight={props.board[index] & 2}\n      selected={cell >> 5 === props.selectedPiece}\n      selectCell={props.selectCell} />);\n  }\n  return (<span className=\"row\"> {cells} </span>);\n}\n\nfunction Cell(props) {\n  let color = CELL_COLORS[util.cellType(props.row, props.col)];\n  let highlight = props.highlight ? \" highlight\" : \"\";\n  let classes = \"cell \" + color + highlight;\n  return (\n    <div className={classes} onClick={ () => props.selectCell(props.val, props.row, props.col) }>\n      { (props.val & 12) && <Piece\n        key={props.val >> 5}\n        player={props.val & 12}\n        cloned={(props.val >> 4) & 16}\n        selected={props.selected} />}\n    </div>\n  );\n}\n\nfunction Piece(p) {\n  let classes = \"\";\n  classes += PLAYERS[p.player].class;\n  if (p.cloned) classes += \" cloned\";\n  if (p.selected) {\n    classes += \" selected\";\n  }\n  return (<div className={classes}></div>)\n}\n\n\n\n/*\nTODO:\n- Make continue button (?)\n\n- AI player\n\n- Allow multiplayer\n    Random match making\n    invites (link or username (if integrated with Google Play))\n\n- Pieces are draggable and snap to grid\n    (if center of dragging piece is strictly within calc(cell-margin + cell-height/2) on drop, then select cell where piece dropped)\n    disable animations for all but phase and clone moves.\n\n- Make animations\n    If clone, we animate the original piece and newly created piece with cloning animation\n    If phase, piece fades in/out from center to edges on adj phase  and on far phase\n    if piece has caught:\n      If jump,\n        piece does a small hop to the destinationCell\n        captured bursts into little circles and fades away\n      If leap,\n        piece gets sucked into portal, (SVG points all transform to center of adj phase, timing ease-in-out), and pushed out (reverse animation)\n        if captured on adj phase:\n          captured shakes and does first part of phase animation while piece being sucked in, but then comes out as little circles on other side\n        else:\n          captured bursts into little circles and fades away\n    else:\n      piece does small hop to destination cell\n\nHow can we handle animations?\n> Translate moving piece p, where p is a child of the destination cell component,\n> from ( startingCell.center.x , startingCell.center.y ) to ( destinationCell.x, destinationCell.y)\n\n\nANIMATION PIPELINE:\n  In function Board.doMove:\n  - get move details\n      moving piece: p,\n      startingCell = {who: board[p.row][p.col].who, move_type: ye, row: p.row, col: p.col}, -- defined first in do move\n      moveDirection,\n      captured piece (if applicable)\n\n  Upon doMove or makeClone:\n  - Find Cell components of startingCell and, if applicable, captured piece\n      (starting cell) get Cell component c such that: c.row === startingCell.row && c.col === startingCell.col\n      (captured piece) get\n\n  -\n\n\n*/\n\nexport default Leap;\n"]},"metadata":{},"sourceType":"module"}