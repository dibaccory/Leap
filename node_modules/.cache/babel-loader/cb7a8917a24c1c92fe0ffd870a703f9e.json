{"ast":null,"code":"var _jsxFileName = \"/Users/bacchus/git/Leap/src/Leap.js\";\nimport React, { Component } from 'react';\nimport './css/ui.css';\nimport Board from './js/board.js';\nimport Countdown from 'react-countdown-now';\n\nvar util = require('./js/util.js');\n/*\nTODO:\nhighlight pieces\n\nGame description:\n\n\n\"How to Play\":\n-directions\n-tutorial?\n*/\n\n\nconst BOARD_SIZE = 8;\nconst playerOne = 1;\nconst playerTwo = 2;\nconst PLAYERS = {\n  [playerOne]: {\n    name: \"Player One\",\n    class: \"player-one\"\n  },\n  [playerTwo]: {\n    name: \"Player Two\",\n    class: \"player-two\"\n  }\n};\nconst CELL_COLORS = [\"gray1\", \"gray2\", \"pink\", \"red\", \"orange\", \"yellow\", \"green\", \"blue\"];\n/*\nTODO:\n- Make continue button (?)\n\n- AI player\n\n- Allow multiplayer\n    Random match making\n    invites (link or username (if integrated with Google Play))\n\n- Pieces are draggable and snap to grid\n    (if center of dragging piece is strictly within calc(cell-margin + cell-height/2) on drop, then select cell where piece dropped)\n    disable animations for all but phase and clone moves.\n\n- Make animations\n    If clone, we animate the original piece and newly created piece with cloning animation\n    If phase, piece fades in/out from center to edges on adj phase  and on far phase\n    if piece has caught:\n      If jump,\n        piece does a small hop to the destinationCell\n        captured bursts into little circles and fades away\n      If leap,\n        piece gets sucked into portal, (SVG points all transform to center of adj phase, timing ease-in-out), and pushed out (reverse animation)\n        if captured on adj phase:\n          captured shakes and does first part of phase animation while piece being sucked in, but then comes out as little circles on other side\n        else:\n          captured bursts into little circles and fades away\n    else:\n      piece does small hop to destination cell\n\nHow can we handle animations?\n> Translate moving piece p, where p is a child of the destination cell component,\n> from ( startingCell.center.x , startingCell.center.y ) to ( destinationCell.x, destinationCell.y)\n\n\nANIMATION PIPELINE:\n  In function Board.doMove:\n  - get move details\n      moving piece: p,\n      startingCell = {who: board[p.row][p.col].who, move_type: ye, row: p.row, col: p.col}, -- defined first in do move\n      moveDirection,\n      captured piece (if applicable)\n\n  Upon doMove or makeClone:\n  - Find Cell components of startingCell and, if applicable, captured piece\n      (starting cell) get Cell component c such that: c.row === startingCell.row && c.col === startingCell.col\n      (captured piece) get\n\n  -\n\n\n*/\n\nfunction Piece(props) {\n  //\n  let classes = \"\";\n  let p = props.board.pieces[props.piece];\n\n  if (props.piece !== null) {\n    classes += PLAYERS[p.player].class;\n    if (p.cloned) classes += \" cloned\";\n\n    if (props.selected) {\n      classes += \" selected\"; //props.board.getMoves(props.piece);\n    }\n  }\n\n  return React.createElement(\"div\", {\n    className: classes,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  });\n}\n\nclass Cell extends Component {\n  render() {\n    let color = CELL_COLORS[util.cellType(this.props.row, this.props.column)]; //let selection = this.props.selected ? \" selected\" : \"\";\n\n    let highlight = this.props.highlight ? \" highlight\" : \"\";\n    let classes = \"cell \" + color + highlight;\n    return React.createElement(\"div\", {\n      className: classes,\n      onClick: () => this.props.selectCell(this.props.row, this.props.column),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, this.props.val !== null && React.createElement(Piece, {\n      piece: this.props.val,\n      board: this.props.board,\n      selected: this.props.selected ? true : false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }));\n  }\n\n}\n\nclass Row extends Component {\n  render() {\n    let selectedCol = this.props.selectedPiece ? this.props.selectedPiece.col : null;\n    let cells = this.props.row.map((cell, i) => {\n      return React.createElement(Cell, {\n        key: i,\n        val: cell.who //so this.board[row][col] = {who: p.player | null, highlight: true | false -> if selectedCol then this.board[row][col].highlight\n        ,\n        board: this.props.board,\n        row: this.props.ri,\n        column: i,\n        highlight: cell.move !== false ? true : false,\n        selected: i === selectedCol ? true : false,\n        selectCell: this.props.selectCell,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      });\n    });\n    return React.createElement(\"span\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \" \", cells, \" \");\n  }\n\n}\n\nclass GameBoard extends Component {\n  render() {\n    let selectedRow = this.props.selectedPiece ? this.props.selectedPiece.row : null;\n    let rows = this.props.board.board.map((row, i) => {\n      return React.createElement(Row, {\n        key: i,\n        board: this.props.board,\n        row: row //board[row]\n        ,\n        selectedPiece: i === selectedRow ? this.props.selectedPiece : null,\n        ri: i,\n        pieces: this.props.board.pieces,\n        selectCell: this.props.selectCell,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      });\n    });\n    return React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \" \", rows, \" \");\n  }\n\n}\n\nfunction Winner(props) {\n  let player = PLAYERS[props.player].name;\n  return React.createElement(\"div\", {\n    id: \"winner\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, player, \" has won the game!\"), React.createElement(\"button\", {\n    onClick: props.restart,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, \"Play again?\")));\n}\n\nclass Leap extends Component {\n  constructor() {\n    super();\n    this.state = {\n      board: new Board(BOARD_SIZE, playerOne, playerTwo),\n      turn: playerOne,\n      continuedMove: false,\n      selectedPiece: null,\n      winner: null\n    };\n  } //React update method\n\n\n  componentDidUpdate(prevProps, prevState) {\n    //this.state.board.updateBoard();\n    if (prevState.turn !== this.state.turn) {\n      let board = this.state.board;\n\n      if (!board.movesLeft(this.state.turn)) {\n        console.log(\"${this.state.turn} has no more moves!\");\n        this.setState({\n          winner: this.nextPlayer()\n        });\n      }\n    } else if (this.state.selectedPiece) {//if is a move continuation and Counter hasn't started, start the timer\n      //if (this.state.contined_move) {}\n    }\n  }\n\n  selectCell(row, col) {\n    //If a move is not a continuation, default case,\n    if (!this.state.continuedMove) {\n      if (this.canSelectPiece(row, col)) this.setPiece(row, col);else if (this.state.selectedPiece) this.handleMove(row, col);\n    } else {\n      //if continuation\n      //check if move = true..\n      let board = this.state.board;\n      if (board.validMove(row, col)) this.handleMove(row, col);else {\n        //TODO: prompt \"end turn?\" option.\n        //right now, let's just end the turn otherwise\n        this.setState({\n          board: board,\n          turn: this.nextPlayer(this.state.turn),\n          continuedMove: false,\n          selectedPiece: null\n        });\n        board.updateBoard();\n      }\n    }\n  }\n\n  handleMove(row, col) {\n    //row, col of destination\n    let board = this.state.board;\n\n    if (!board.validMove(row, col)) {\n      console.log(\"Invalid move!\");\n      return;\n    }\n\n    console.log(\"handling move...\");\n    let sel = this.state.selectedPiece;\n    let pi = board.board[sel.row][sel.col].who;\n    let moveDirection; //Check if move is a clone move; If it is, we need not call doMove\n\n    if (board.isCloneSpawn(pi, row, col)) board.makeClone(pi, row, col);else moveDirection = board.doMove(pi, row, col); //all highlights gone\n    //If we can jump or leap, or phase (if move prior was not a phase)\n\n    if (board.canContinueMove(pi, moveDirection)) {\n      board.getMoves(pi, 3, moveDirection.rowIncr, moveDirection.colIncr); //highlight continuable moves\n\n      this.setState({\n        board: board,\n        turn: this.state.turn,\n        continuedMove: moveDirection,\n        selectedPiece: {\n          row: row,\n          col: col\n        }\n      });\n    } else this.setState({\n      board: board,\n      turn: this.nextPlayer(this.state.turn),\n      continuedMove: false,\n      selectedPiece: null\n    });\n  }\n\n  canSelectPiece(row, col) {\n    let s = this.state;\n    let cell = s.board.board[row][col].who;\n    if (cell === null) return false;\n    let player = s.board.pieces[cell].player;\n    return player === s.turn;\n  }\n\n  setPiece(row, col) {\n    let board = this.state.board;\n    board.updateBoard();\n    board.getMoves(board.board[row][col].who);\n    this.setState({\n      selectedPiece: {\n        row: row,\n        col: col\n      }\n    }); //console.log(\"selected piece: \" + this.state.board.board[row][col].who);\n  }\n\n  nextPlayer() {\n    return this.state.turn === playerOne ? playerTwo : playerOne;\n  }\n\n  restart() {\n    this.setState({\n      board: new Board(BOARD_SIZE, playerOne, playerTwo),\n      continuedMove: false,\n      turn: playerOne,\n      selectedPiece: null,\n      winner: null\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"Leap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"Leap-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, \"Leap\")), this.state.winner && React.createElement(Winner, {\n      player: this.state.winner,\n      restart: this.restart.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, \"Current turn: \", PLAYERS[this.state.turn].name, React.createElement(\"span\", {\n      className: PLAYERS[this.state.turn].class + \"-token\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"game-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game-options\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }), React.createElement(GameBoard, {\n      board: this.state.board,\n      selectedPiece: this.state.selectedPiece,\n      selectCell: this.selectCell.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"game-menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    })));\n  }\n\n}\n/*\n<Countdown date={Date.now() + 10000}\n           intervalDelay={0}\n           precision={3}\n           autoStart={this.state.continuedMove}\n           renderer={d => <div>\n              <span className=\"countdown-s\">{d.seconds}</span>\n              <span className=\"countdown-ms\">:{d.milliseconds}</span>\n           </div>}/>\n*/\n\n\nexport default Leap;","map":{"version":3,"sources":["/Users/bacchus/git/Leap/src/Leap.js"],"names":["React","Component","Board","Countdown","util","require","BOARD_SIZE","playerOne","playerTwo","PLAYERS","name","class","CELL_COLORS","Piece","props","classes","p","board","pieces","piece","player","cloned","selected","Cell","render","color","cellType","row","column","highlight","selectCell","val","Row","selectedCol","selectedPiece","col","cells","map","cell","i","who","ri","move","GameBoard","selectedRow","rows","Winner","restart","Leap","constructor","state","turn","continuedMove","winner","componentDidUpdate","prevProps","prevState","movesLeft","console","log","setState","nextPlayer","canSelectPiece","setPiece","handleMove","validMove","updateBoard","sel","pi","moveDirection","isCloneSpawn","makeClone","doMove","canContinueMove","getMoves","rowIncr","colIncr","s","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './css/ui.css';\nimport Board from './js/board.js';\nimport Countdown from 'react-countdown-now';\nvar util = require('./js/util.js');\n\n/*\nTODO:\nhighlight pieces\n\nGame description:\n\n\n\"How to Play\":\n-directions\n-tutorial?\n*/\n\nconst BOARD_SIZE = 8;\nconst playerOne = 1;\nconst playerTwo = 2;\nconst PLAYERS = {\n  [playerOne]: {\n    name: \"Player One\",\n    class: \"player-one\"\n  },\n  [playerTwo]: {\n    name: \"Player Two\",\n    class: \"player-two\"\n  }\n}\n\nconst CELL_COLORS = [ \"gray1\", \"gray2\", \"pink\", \"red\", \"orange\", \"yellow\", \"green\", \"blue\"];\n\n/*\nTODO:\n- Make continue button (?)\n\n- AI player\n\n- Allow multiplayer\n    Random match making\n    invites (link or username (if integrated with Google Play))\n\n- Pieces are draggable and snap to grid\n    (if center of dragging piece is strictly within calc(cell-margin + cell-height/2) on drop, then select cell where piece dropped)\n    disable animations for all but phase and clone moves.\n\n- Make animations\n    If clone, we animate the original piece and newly created piece with cloning animation\n    If phase, piece fades in/out from center to edges on adj phase  and on far phase\n    if piece has caught:\n      If jump,\n        piece does a small hop to the destinationCell\n        captured bursts into little circles and fades away\n      If leap,\n        piece gets sucked into portal, (SVG points all transform to center of adj phase, timing ease-in-out), and pushed out (reverse animation)\n        if captured on adj phase:\n          captured shakes and does first part of phase animation while piece being sucked in, but then comes out as little circles on other side\n        else:\n          captured bursts into little circles and fades away\n    else:\n      piece does small hop to destination cell\n\nHow can we handle animations?\n> Translate moving piece p, where p is a child of the destination cell component,\n> from ( startingCell.center.x , startingCell.center.y ) to ( destinationCell.x, destinationCell.y)\n\n\nANIMATION PIPELINE:\n  In function Board.doMove:\n  - get move details\n      moving piece: p,\n      startingCell = {who: board[p.row][p.col].who, move_type: ye, row: p.row, col: p.col}, -- defined first in do move\n      moveDirection,\n      captured piece (if applicable)\n\n  Upon doMove or makeClone:\n  - Find Cell components of startingCell and, if applicable, captured piece\n      (starting cell) get Cell component c such that: c.row === startingCell.row && c.col === startingCell.col\n      (captured piece) get\n\n  -\n\n\n*/\n\nfunction Piece(props) {\n  //\n\n  let classes = \"\";\n  let p = props.board.pieces[props.piece];\n  if (props.piece !== null) {\n    classes += PLAYERS[p.player].class;\n    if (p.cloned) classes += \" cloned\";\n    if (props.selected) {\n      classes += \" selected\";\n      //props.board.getMoves(props.piece);\n    }\n  }\n  return (<div className={classes}></div>)\n}\n\nclass Cell extends Component {\n\n  render() {\n    let color = CELL_COLORS[util.cellType(this.props.row, this.props.column)];\n\n    //let selection = this.props.selected ? \" selected\" : \"\";\n    let highlight = this.props.highlight ? \" highlight\" : \"\";\n    let classes = \"cell \" + color + highlight;\n    return (\n      <div className={classes} onClick={ () => this.props.selectCell(this.props.row, this.props.column) }>\n        {this.props.val !== null\n        && <Piece piece={this.props.val}\n                  board={this.props.board}\n                  selected={this.props.selected ? true : false}/>}\n      </div>\n    )\n  }\n}\n\nclass Row extends Component {\n  render() {\n    let selectedCol = this.props.selectedPiece ? this.props.selectedPiece.col : null;\n    let cells = this.props.row.map((cell, i) => {\n      return <Cell key={i}\n              val={cell.who} //so this.board[row][col] = {who: p.player | null, highlight: true | false -> if selectedCol then this.board[row][col].highlight\n              board={this.props.board}\n              row={this.props.ri}\n              column={i}\n              highlight={cell.move !== false ? true : false}\n              selected={i === selectedCol ? true : false}\n              selectCell={this.props.selectCell} />\n    });\n    return (<span className=\"row\"> {cells} </span>)\n  }\n}\n\nclass GameBoard extends Component {\n  render() {\n    let selectedRow = this.props.selectedPiece ? this.props.selectedPiece.row : null;\n    let rows = this.props.board.board.map((row, i) => {\n      return <Row key={i}\n              board={this.props.board}\n              row={row} //board[row]\n              selectedPiece={i === selectedRow ? this.props.selectedPiece : null}\n              ri={i}\n              pieces={this.props.board.pieces}\n              selectCell={this.props.selectCell} />;\n    });\n    return (<div className=\"board\"> {rows} </div>)\n  }\n}\n\nfunction Winner(props) {\n  let player = PLAYERS[props.player].name;\n  return (\n    <div id=\"winner\">\n      <div>\n        <p>{player} has won the game!</p>\n        <button onClick={props.restart}>Play again?</button>\n      </div>\n    </div>\n  );\n}\n\nclass Leap extends Component {\n  constructor() {\n    super();\n    this.state = { board: new Board(BOARD_SIZE, playerOne, playerTwo),\n                  turn: playerOne,\n                  continuedMove: false,\n                  selectedPiece: null, winner: null };\n  }\n\n  //React update method\n  componentDidUpdate(prevProps, prevState) {\n    //this.state.board.updateBoard();\n    if (prevState.turn !== this.state.turn) {\n      let board = this.state.board;\n      if (!board.movesLeft(this.state.turn)) {\n        console.log(\"${this.state.turn} has no more moves!\");\n        this.setState({winner: this.nextPlayer()});\n      }\n    } else if (this.state.selectedPiece){\n      //if is a move continuation and Counter hasn't started, start the timer\n      //if (this.state.contined_move) {}\n    }\n  }\n\n  selectCell(row, col) {\n    //If a move is not a continuation, default case,\n    if (!this.state.continuedMove) {\n      if (this.canSelectPiece(row, col)) this.setPiece(row, col);\n      else if (this.state.selectedPiece)  this.handleMove(row, col);\n    } else { //if continuation\n      //check if move = true..\n      let board = this.state.board;\n      if (board.validMove(row, col)) this.handleMove(row, col)\n      else {\n        //TODO: prompt \"end turn?\" option.\n        //right now, let's just end the turn otherwise\n        this.setState({board: board, turn: this.nextPlayer(this.state.turn), continuedMove: false, selectedPiece: null});\n        board.updateBoard();\n      }\n    }\n  }\n\n  handleMove(row, col) { //row, col of destination\n    let board = this.state.board;\n    if (!board.validMove(row, col)) {\n      console.log(\"Invalid move!\");\n      return;\n    }\n    console.log(\"handling move...\");\n    let sel = this.state.selectedPiece;\n    let pi = board.board[sel.row][sel.col].who;\n\n    let moveDirection;\n    //Check if move is a clone move; If it is, we need not call doMove\n    if(board.isCloneSpawn(pi,row, col)) board.makeClone(pi, row, col);\n    else moveDirection = board.doMove(pi, row, col);\n    //all highlights gone\n\n    //If we can jump or leap, or phase (if move prior was not a phase)\n    if (board.canContinueMove(pi, moveDirection)) {\n      board.getMoves(pi, 3, moveDirection.rowIncr, moveDirection.colIncr); //highlight continuable moves\n      this.setState( {board: board, turn: this.state.turn, continuedMove: moveDirection, selectedPiece: {row: row, col: col}});\n    } else this.setState({board: board, turn: this.nextPlayer(this.state.turn), continuedMove: false, selectedPiece: null});\n  }\n\n  canSelectPiece(row, col) {\n    let s = this.state;\n    let cell = s.board.board[row][col].who;\n    if (cell === null) return false;\n    let player = s.board.pieces[cell].player;\n    return player === s.turn;\n  }\n\n  setPiece(row, col) {\n    let board = this.state.board;\n    board.updateBoard();\n    board.getMoves(board.board[row][col].who);\n    this.setState({selectedPiece: {row: row, col: col}});\n      //console.log(\"selected piece: \" + this.state.board.board[row][col].who);\n  }\n\n  nextPlayer() {\n    return (this.state.turn === playerOne ? playerTwo : playerOne);\n  }\n\n  restart() {\n    this.setState({ board: new Board(BOARD_SIZE, playerOne, playerTwo),\n                    continuedMove: false, turn: playerOne,\n                    selectedPiece: null, winner: null });\n  }\n\n  render() {\n    return (\n      <div className=\"Leap\">\n        <div className=\"Leap-header\">\n          <h2>Leap</h2>\n        </div>\n        { this.state.winner && <Winner player={this.state.winner} restart={this.restart.bind(this)} /> }\n        <h3>Current turn: {PLAYERS[this.state.turn].name}<span className={PLAYERS[this.state.turn].class+\"-token\"}></span></h3>\n\n\n        <div className=\"game-container\">\n          <div className=\"game-options\"></div>\n          <GameBoard board={this.state.board}\n                     selectedPiece={this.state.selectedPiece}\n                     selectCell={this.selectCell.bind(this)} />\n          <div className=\"game-menu\"></div>\n        </div>\n      </div>\n    );\n  }\n}\n/*\n<Countdown date={Date.now() + 10000}\n           intervalDelay={0}\n           precision={3}\n           autoStart={this.state.continuedMove}\n           renderer={d => <div>\n              <span className=\"countdown-s\">{d.seconds}</span>\n              <span className=\"countdown-ms\">:{d.milliseconds}</span>\n           </div>}/>\n*/\n\nexport default Leap;\n"]},"metadata":{},"sourceType":"module"}