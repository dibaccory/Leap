{"ast":null,"code":"import _slicedToArray from \"/Users/bacchus/git/Leap/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/bacchus/git/Leap/client/src/App.js\";\nimport React, { useState } from 'react';\nimport './css/App.css';\nimport './lib/fa/css/all.min.css';\nimport { CSSTransition } from 'react-transition-group';\nimport Leap from './Leap';\nimport Menu from './Menu';\nconst CONFIG = {\n  difficulty: 0,\n  online: true,\n  port: 3001,\n  players: [{\n    name: 'Player 1',\n    color: 'white',\n    bot: false,\n    first: true\n  }, {\n    name: 'Player 2',\n    color: 'black',\n    bot: false,\n    first: false\n  }],\n  size: 8\n};\n\nfunction App() {\n  // add back   <Menu/>\n  //If roomURL isn't empty, then Multiplayer\n  //go to roomURL.\n  if (CONFIG.online) {//make new process on server to set CONFIG.port. right now it's static\n  }\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(Settings, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }), React.createElement(Leap, {\n    config: CONFIG,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }));\n} //Move these to their own file\n\n\nfunction Settings() {\n  const options = {\n    'sfx': {\n      text: 'SFX',\n      icon: 'fas fa-volume-down',\n      type: 'toggle',\n      crossed: false\n    },\n    'music': {\n      text: 'Music',\n      icon: 'fas fa-music',\n      type: 'toggle',\n      crossed: false\n    },\n    'ads': {\n      text: 'Ads',\n      icon: 'fas fa-ad',\n      type: 'page'\n    }\n  };\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        container = _useState2[0],\n        showContainer = _useState2[1]; //useEffect(()=>containerToggle = !containerToggle);\n\n\n  const settingsItems = Object.values(options).map((item, i) => React.createElement(SettingsItem, {\n    key: i,\n    item: item,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }));\n  return React.createElement(\"div\", {\n    className: \"settings\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"fas fa-cog\",\n    onClick: () => showContainer(!container),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }), React.createElement(CSSTransition, {\n    in: container,\n    timeout: 0,\n    classNames: \"settings-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"setcon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, settingsItems)));\n}\n\nfunction SettingsItem(props) {\n  let id = props.item.text.toLowerCase();\n  let classes = 'settings-item';\n\n  if (props.item.type === 'toggle') {\n    classes += props.item.crossed ? ' crossed' : '';\n  }\n\n  return React.createElement(\"div\", {\n    className: classes,\n    id: id\n    /*onClick={ () => props.handleClick(id) }*/\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: props.item.icon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/bacchus/git/Leap/client/src/App.js"],"names":["React","useState","CSSTransition","Leap","Menu","CONFIG","difficulty","online","port","players","name","color","bot","first","size","App","Settings","options","text","icon","type","crossed","container","showContainer","settingsItems","Object","values","map","item","i","SettingsItem","props","id","toLowerCase","classes"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport './css/App.css';\nimport './lib/fa/css/all.min.css';\nimport { CSSTransition } from 'react-transition-group';\nimport Leap from './Leap';\nimport Menu from './Menu';\n\nconst CONFIG = {\n  difficulty: 0,\n  online: true,\n  port: 3001,\n  players: [{\n    name: 'Player 1',\n    color: 'white',\n    bot: false,\n    first: true,\n  },{\n    name: 'Player 2',\n    color: 'black',\n    bot: false,\n    first: false,\n  }],\n  size: 8,\n};\n\nfunction App() {\n  // add back   <Menu/>\n  //If roomURL isn't empty, then Multiplayer\n  //go to roomURL.\n  if (CONFIG.online) {\n    //make new process on server to set CONFIG.port. right now it's static\n  }\n\n  return (\n    <div className=\"App\">\n    <Settings/>\n\n    <Leap config={ CONFIG }/>\n    </div>\n  );\n}\n\n//Move these to their own file\nfunction Settings() {\n  const options= {\n      'sfx'   :{text: 'SFX', icon: 'fas fa-volume-down', type:'toggle', crossed: false},\n      'music' :{text: 'Music', icon: 'fas fa-music', type:'toggle', crossed: false},\n      'ads'   :{text: 'Ads', icon: 'fas fa-ad', type:'page'}\n    };\n  const [container, showContainer] = useState(false);\n  //useEffect(()=>containerToggle = !containerToggle);\n  const settingsItems = Object.values(options).map( (item, i) =>\n    <SettingsItem\n      key={ i }\n      item={ item }\n    />\n  );\n  return ( <div className='settings'>\n      <i className='fas fa-cog' onClick = { () => showContainer(!container) } />\n      <CSSTransition\n        in={container}\n        timeout={0}\n        classNames= 'settings-container'\n      >\n        <div className='setcon'>{settingsItems}</div>\n      </CSSTransition>\n    </div>\n  );\n}\n\nfunction SettingsItem(props) {\n  let id = props.item.text.toLowerCase();\n  let classes = 'settings-item';\n  if(props.item.type === 'toggle'){\n    classes += props.item.crossed ? ' crossed' : '';\n  }\n  return ( <div className= { classes } id={ id } /*onClick={ () => props.handleClick(id) }*/>\n    <i className= { props.item.icon } ></i>\n  </div> );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}