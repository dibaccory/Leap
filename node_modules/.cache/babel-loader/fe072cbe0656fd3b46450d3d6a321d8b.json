{"ast":null,"code":"import { cellType, phaseLayouts } from './util';\n/*\n\nREFACTOR CHANGES:\nLeap.js -> Game.js\n\t<Leap> -> <GameController>\nboard.js -> leap.js\n\n\nBITWISE:\n\nBOARD:\nbit\t\t\t\titem\n0-1\t\t\t\tcellType\t{regular, phase} x {highlight, no highlight}\n2-3\t\t\tcellState\t\t{00: empty, 10: SPECIAL, 01: p1, 11: p2, }   NOTE, if '10' for bits 1 and 2, then it should be a SPECIAL THING???  lmao what if a piece can be moved by either player for a few turns?\n4\t\t\t\t\tisCloned\n5-9\t\t\t\tkey\t\t\t\tIf piece on cell, this is index to reach it\n\nboard[i] = (key << 4 | isCloned << 3 | cellState << 1 | cellType);\nfor i = row * SIZE + col \t\twhere row, col wtr a given piece\n\nPIECE INDEX:\nbit \t\t\titem\n0-2\t\t\t\tcol\n3-(5,6)\t\trow\n\nboard[i] = (row << 4 | col);\nfor i = SIZE*SIZE + key\t\t\twhere\n\n\nhow to store moves\nmoves[i] = [ 0 <= board_index < SIZE*SIZE, ... , ... ] all possible moves for associated piece.\nfor i = SIZE*SIZE\n\n\nindex = cell number\nkey = piece index\n\n*/\n\nvar BOARD_SIZE, BOARD_AREA, BIT_SHIFT, BIT_LENGTH, BIT_INDEX_SHIFT, BIT_AREA;\n\nconst toIndex = (row, col) => (row << BIT_SHIFT) + col;\n\nconst getRow = index => index >> BIT_SHIFT;\n\nconst getCol = index => index & BIT_LENGTH - 1;\n\nfunction getBitShift(b) {\n  return b >> 1 ? 1 + getBitShift(b >> 1) : 1;\n}\n\nfunction Board(len, phaseLayout) {\n  this.p1 = 4;\n  this.p2 = 12;\n  BOARD_SIZE = len;\n  BOARD_AREA = BOARD_SIZE ** 2;\n  BIT_SHIFT = getBitShift(BOARD_SIZE - 1);\n  BIT_LENGTH = 2 ** BIT_SHIFT;\n  BIT_INDEX_SHIFT = getBitShift(BOARD_AREA - 1);\n  BIT_AREA = 2 ** BIT_INDEX_SHIFT;\n  (this.board = []).length = BOARD_AREA;\n  (this.moves = []).length = 4 * len;\n  this.board.fill(0);\n  this.bufferSize = 1; //how many rows between the pieces' starting location and the nearest phases\n\n  this.init(phaseLayout); //this.update();\n}\n\nBoard.prototype.init = function (layout) {\n  let pi = 0; //piece Index (ID)\n\n  const len = BOARD_SIZE;\n\n  const calcPhases = index => {\n    let k = 0;\n\n    while (k < phaseLayouts[layout].length) {\n      if ((index ^ phaseLayouts[layout][k]) === 0) return 1;\n      k++;\n    }\n\n    return 0;\n  };\n\n  for (let i = 0; i < len; i++) {\n    this.board[i] = pi << 5 | this.p1; //00000 0 01 00\n\n    this.initPiece(pi);\n    this.board[i + (len - 1) * len] = pi + 2 * BIT_LENGTH << 5 | this.p2; //100000 0 11 00\n\n    this.initPiece(pi + 2 * len);\n    pi++;\n\n    for (let j = 1 + this.bufferSize; j < len - 1 - this.bufferSize; j++) {\n      this.board[i + j * len] |= calcPhases(i + j * len);\n    }\n  }\n};\n\nBoard.prototype.initPiece = function (pi) {\n  this.moves[pi] = [];\n};\n\nBoard.prototype.getPlayer = function (index) {\n  let pid = this.board[index] & 12;\n\n  switch (pid) {\n    case 12:\n      return this.p2;\n\n    case 4:\n      return this.p1;\n\n    default:\n      return 0;\n  } //return ( (this.board[index] & 12) < 12 ) ? this.p1 : this.p2;\n\n};\n\nBoard.prototype.getCapturedPiece = function (pid, to) {\n  let nMoves = this.moves[pid].length;\n\n  for (let i = 0; i < nMoves; i++) {\n    let move = this.moves[pid][i];\n    if ((move & BIT_AREA - 1) === to) return move >> BIT_INDEX_SHIFT;\n  }\n\n  return false;\n}; // moves[pi] = [0000000 0000000] --> [board index of captured piece + board index of destination cell]\n\n\nBoard.prototype.addMove = function (from, to, captured) {\n  captured = captured || 0;\n  let pi = this.board[from] >> 5;\n  this.moves[pi].push((captured << BIT_INDEX_SHIFT) + to);\n};\n\nBoard.prototype.update = function (newPiece) {\n  if (newPiece) {\n    //find out which player this piece belongs to then add it within that player's key range (00000)\n    this.board = this.board.map(row => row.map((cell, j) => {\n      if (cell.who != null) {\n        //increment all pi in board after piecesSeparator by one\n        if (cell.who >= this.piecesSeparator) cell.who++; //if piece alive, keep on board\n\n        return this.pieces[cell.who].alive ? {\n          who: cell.who,\n          move: false\n        } : {\n          who: null,\n          move: false\n        };\n      } else return {\n        who: null,\n        move: false\n      };\n    }));\n  } else {\n    this.board = this.board.map(row => row.map((cell, j) => cell.who != null ? this.pieces[cell.who].alive ? {\n      who: cell.who,\n      move: false\n    } : {\n      who: null,\n      move: false\n    } : {\n      who: null,\n      move: false\n    }));\n  }\n};\n/*==========\t\t\t\t\t\t\t\t\t\t\tCLONE\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n\n\nBoard.prototype.makeClone = function (pi, row, col) {\n  /*\n  getPlayer bit\n  */\n  this.board[row * BOARD_SIZE + col] |= this.getPlayer(row, col);\n  this.updateBoard(true);\n  this.board[row][col].who = this.piecesSeparator;\n  return true;\n};\n\nBoard.prototype.canClone = function (from) {\n  let onRow = from / BOARD_SIZE,\n      piece = this.board[from];\n  let onBoundaryColumn = (from + 1) % BOARD_SIZE < 2;\n  let onBoundaryRow = (onRow + 1) % BOARD_SIZE < 2; //To clone: NOT be on boundary column, BE on boundary row, NOT be cloned yet\n\n  if (onBoundaryColumn || !onBoundaryRow || piece ^ 16) return false;\n  let spawnRow = ((piece >> 5 & 2 * BIT_LENGTH) - 1) / 2;\n  return onRow ^ spawnRow;\n}; //Assumes valid move\n\n\nBoard.prototype.isCloneMove = function (to, from) {\n  //suffice to show if to and from are on opposing boundary rows\n  let toRow = to / BOARD_SIZE,\n      fromRow = from / BOARD_SIZE;\n  return this.canClone(from) && toRow ^ fromRow;\n};\n/*==========\t\t\t\t\t\t\t\t\t\t\tMOVES\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n// Board.prototype.getPlayer = function (pi) {\n// \treturn this.pieces[pi].player;\n// }\n\n\nBoard.prototype.canLeap = function (from, adj, isPhase, bypassCondition) {\n  let to = this.getInverseIndex(from);\n\n  if (isPhase && !this.getPlayer(to)) {\n    let inv = this.getInverseIndex(adj);\n    let phaseAdj = this.getPlayer(adj) & 8;\n    let phaseFar = this.getPlayer(inv) & 8;\n\n    if (phaseAdj ^ phaseFar) {\n      if (bypassCondition % 3) return true;\n      let captured = phaseAdj ? adj : inv;\n      this.addMove(from, to, captured);\n    }\n  } //if neighbor cell is a phase, leap_cell clear, and (enemy piece on phaseAdj XOR enemy piece on phaseFar)\n\n};\n\nBoard.prototype.isJump = function (from, adj, direction, bypassCondition) {\n  //if adj cell occupied, jumpCell in bounds, jumpCell clear, and jumpCell has enemy piece\n  let to = adj + direction;\n\n  if (this.inBounds(to)) {\n    if (!this.getPlayer(to)) {\n      if (bypassCondition % 3) return true;else this.addMove(from, to, adj);\n    }\n  }\n};\n\nBoard.prototype.canPhase = function (from, to, bypassCondition) {\n  let isPhase = this.board[to] & 1;\n  let isDestinationEmpty = this.board[from] & 3; //1 if player piece\n\n  if (isPhase && isDestinationEmpty) {\n    if (bypassCondition % 3) return true;else this.addMove(from, to);\n  }\n}; //reaching this function implies selected piece can be cloned, so piece is on an bounding row\n\n\nBoard.prototype.getCloneSpawnCells = function (from, bypassCondition) {\n  let spawnRow = from / BOARD_SIZE ^ BOARD_SIZE - 1;\n\n  for (let col = 1; col < BOARD_SIZE - 1; col++) {\n    let to = spawnRow + col;\n    let spawnCell = this.board[to]; //if spawnCell doesn't have a player on it\n\n    if (spawnCell ^ 4) {\n      if (bypassCondition % 3) return true;else this.addMove(from, to);\n    }\n  }\n};\n\nBoard.prototype.getMovesInDirection = function (from, adj, bypassCondition) {\n  //check adjacent cells of piece p wrt the boundary\n  let direction = adj - from;\n  let isPhase = this.board[adj] & 1;\n  if (this.canLeap(from, adj, isPhase, bypassCondition)) return true;\n\n  if (this.getPlayer(adj)) {\n    if (this.isJump(from, adj, direction, bypassCondition)) return true;\n  } else if (bypassCondition % 3 % 2) return bypassCondition % 2; //adjacent moves\n  else if (!bypassCondition) this.addMove(from, adj);\n\n  return false;\n};\n/* bypassCondition (HIGHLIGHT BYPASS CONDITION):\n\t\tundefined - default (Store all),\n\t\t1 - bypass all,\n\t\t2 - bypass continuable moves,\n\t\t3 - store continuable moves\n*/\n\n\nBoard.prototype.getMoves = function (from, bypassCondition, direction) {\n  let row = getRow(from),\n      col = getCol(from); // on a phase\n\n  if (this.canPhase(from, this.getInverseIndex(from), bypassCondition)) return true; // able to clone\n\n  if (this.canClone(from) && this.getCloneSpawnCells(from, bypassCondition)) return true; // move continuation AND has a move in specified direction\n\n  if (direction !== undefined && this.inBounds(from + direction)) {\n    if (this.getMovesInDirection(from, from + direction, bypassCondition)) return true;\n  } else {\n    //step, jump, leap\n    for (let r = -1; r < 2; r++) for (let c = -1; c < 2; c++) {\n      let adj = toIndex(row + r, col + c);\n      let validDirection = this.getPlayer(adj) ^ this.getPlayer(from) && //enemy or empty cell\n      this.inBounds(adj) && adj - from;\n      if (validDirection && this.getMovesInDirection(from, adj, bypassCondition)) return true;\n    }\n  }\n\n  return false;\n}; //Performs move. returns true if caught piece in process, else false\n//NOTE: it is impossible to capture a piece at board index 0\n\n\nBoard.prototype.doMove = function (from, to) {\n  if (this.isCloneMove(from, to)) {\n    this.makeClone(to);\n    return false;\n  }\n\n  let pi = this.board[from] >> 5;\n  this.board[from] = this.board[from] & 31; //31 is constant -> 00000 ( 0 00 00 )\n\n  if ((this.board[to] & 12) == 8) {\n    //SPECIAL PIECE *any player can move.... but how is TODO*\n    this.board[to] |= pi << 5;\n  } else {\n    this.board[to] |= pi << 5 | this.getPlayer(from);\n  }\n\n  let capturedPiece = this.getCapturedPiece(pi, to);\n  let direction;\n\n  if (capturedPiece) {\n    this.board[capturedPiece] = this.board[capturedPiece] & 31; //if can continue move in direction\n\n    if (this.inBounds(to - capturedPiece) && this.getMovesInDirection(to, to - capturedPiece, 2)) {\n      direction = to - capturedPiece;\n    }\n  }\n\n  if (direction !== undefined && (this.canClone(pi) || !samePhase(from, to))) direction = 0; //this.updateBoard();\n\n  return direction;\n};\n\nBoard.prototype.highlightMoves = function (piece) {\n  let nMoves = this.moves[piece].length;\n\n  for (let i = 0; i < nMoves; i++) {\n    let destinationIndex = this.moves[piece][i] & BIT_AREA - 1;\n    this.board[destinationIndex] |= 2;\n  }\n};\n\nBoard.prototype.removeHighlight = function () {\n  for (let i = 0; i < BOARD_AREA; i++) {\n    if (this.board[i] & 2) this.board[i] = this.board[i] ^ 2;\n  }\n};\n/*==========\t\t\t\t\t\t\t\t\t\t\tINTEGRITY\t\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n\n\nBoard.prototype.getInverseIndex = function (index) {\n  let len = BOARD_SIZE - 1;\n  let row = getRow(index),\n      col = getCol(index);\n  return toIndex(len - row, len - col);\n};\n\nBoard.prototype.samePhase = function (from, to) {\n  let isPhase = this.board[from] & 1;\n  return isPhase && this.getInverseIndex(from) === to;\n};\n\nBoard.prototype.inBounds = function (index) {\n  return 0 <= index && index < BOARD_AREA;\n};\n\nBoard.prototype.canContinueMove = function (from, direction) {\n  return direction !== undefined ? this.getMoves(from, 2, from + direction) : false;\n};\n\nBoard.prototype.hasMoves = function (pi) {\n  return this.getMoves(pi, 1);\n}; //Player has no more moves when (1): all player's pieces are dead (2): every piece has no moves\n\n\nBoard.prototype.movesLeft = function (player) {\n  for (let pi = 0; pi < this.pieces.length; pi++) {\n    let p = this.pieces[pi];\n\n    if (p.alive && p.player === player) {\n      if (this.hasMoves(pi)) return true;\n    }\n  }\n\n  return false;\n};\n\nBoard.prototype.validMove = function (piece, index) {\n  let n = this.moves[piece].length;\n  let isAvailableMove = 0;\n\n  for (let i = 0; i < n; i++) {\n    if ((this.moves[piece][i] & BIT_AREA - 1) === index) isAvailableMove++;\n  }\n\n  return !!isAvailableMove;\n};\n\nexport default Board;","map":{"version":3,"sources":["/Users/bacchus/git/Leap/src/js/board.js"],"names":["cellType","phaseLayouts","BOARD_SIZE","BOARD_AREA","BIT_SHIFT","BIT_LENGTH","BIT_INDEX_SHIFT","BIT_AREA","toIndex","row","col","getRow","index","getCol","getBitShift","b","Board","len","phaseLayout","p1","p2","board","length","moves","fill","bufferSize","init","prototype","layout","pi","calcPhases","k","i","initPiece","j","getPlayer","pid","getCapturedPiece","to","nMoves","move","addMove","from","captured","push","update","newPiece","map","cell","who","piecesSeparator","pieces","alive","makeClone","updateBoard","canClone","onRow","piece","onBoundaryColumn","onBoundaryRow","spawnRow","isCloneMove","toRow","fromRow","canLeap","adj","isPhase","bypassCondition","getInverseIndex","inv","phaseAdj","phaseFar","isJump","direction","inBounds","canPhase","isDestinationEmpty","getCloneSpawnCells","spawnCell","getMovesInDirection","getMoves","undefined","r","c","validDirection","doMove","capturedPiece","samePhase","highlightMoves","destinationIndex","removeHighlight","canContinueMove","hasMoves","movesLeft","player","p","validMove","n","isAvailableMove"],"mappings":"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","sourcesContent":["import {cellType, phaseLayouts} from './util';\n/*\n\nREFACTOR CHANGES:\nLeap.js -> Game.js\n\t<Leap> -> <GameController>\nboard.js -> leap.js\n\n\nBITWISE:\n\nBOARD:\nbit\t\t\t\titem\n0-1\t\t\t\tcellType\t{regular, phase} x {highlight, no highlight}\n2-3\t\t\tcellState\t\t{00: empty, 10: SPECIAL, 01: p1, 11: p2, }   NOTE, if '10' for bits 1 and 2, then it should be a SPECIAL THING???  lmao what if a piece can be moved by either player for a few turns?\n4\t\t\t\t\tisCloned\n5-9\t\t\t\tkey\t\t\t\tIf piece on cell, this is index to reach it\n\nboard[i] = (key << 4 | isCloned << 3 | cellState << 1 | cellType);\nfor i = row * SIZE + col \t\twhere row, col wtr a given piece\n\nPIECE INDEX:\nbit \t\t\titem\n0-2\t\t\t\tcol\n3-(5,6)\t\trow\n\nboard[i] = (row << 4 | col);\nfor i = SIZE*SIZE + key\t\t\twhere\n\n\nhow to store moves\nmoves[i] = [ 0 <= board_index < SIZE*SIZE, ... , ... ] all possible moves for associated piece.\nfor i = SIZE*SIZE\n\n\nindex = cell number\nkey = piece index\n\n*/\nvar BOARD_SIZE, BOARD_AREA, BIT_SHIFT, BIT_LENGTH, BIT_INDEX_SHIFT, BIT_AREA;\n\nconst toIndex = (row, col) => (row << BIT_SHIFT) + col;\n\nconst getRow = (index) => (index >> BIT_SHIFT);\nconst getCol = (index) => (index & (BIT_LENGTH-1));\n\nfunction getBitShift(b) {\n  return (b >> 1) ? (1 + getBitShift(b >> 1)) : 1;\n}\n\n\nfunction Board(len, phaseLayout) {\n\n\tthis.p1 = 4;\n\tthis.p2 = 12;\n\n\tBOARD_SIZE = len;\n\tBOARD_AREA = BOARD_SIZE**2;\n\tBIT_SHIFT = getBitShift(BOARD_SIZE-1);\n\tBIT_LENGTH = 2**BIT_SHIFT;\n\tBIT_INDEX_SHIFT = getBitShift(BOARD_AREA-1);\n\tBIT_AREA = 2**BIT_INDEX_SHIFT;\n\n\n\t(this.board = []).length = BOARD_AREA;\n\t(this.moves = []).length = 4*len;\n\tthis.board.fill(0);\n\tthis.bufferSize = 1;\t//how many rows between the pieces' starting location and the nearest phases\n\tthis.init(phaseLayout);\n\t//this.update();\n}\n\n\n\nBoard.prototype.init = function (layout) {\n    let pi=0; //piece Index (ID)\n\t\tconst len = BOARD_SIZE;\n\n\t\tconst calcPhases = (index) => {\n\t\t\tlet k = 0;\n\t\t\twhile(k<phaseLayouts[layout].length) {\n\t\t\t\tif ( (index^phaseLayouts[layout][k]) === 0 ) return 1;\n\t\t\t\tk++;\n\t\t\t}\n\t\t\treturn 0;\n\t\t};\n\n\t\tfor(let i=0; i<len; i++) {\n\t\t\tthis.board[i] = ( (pi << 5) | this.p1); //00000 0 01 00\n\t\t\tthis.initPiece(pi);\n\t\t\tthis.board[i + (len-1)*len] = ( (pi + 2*BIT_LENGTH << 5) | this.p2); //100000 0 11 00\n\t\t\tthis.initPiece(pi + 2*len);\n\t\t\tpi++;\n\n\t\t\tfor(let j=1+this.bufferSize; j<len-1-this.bufferSize; j++) {\n\t\t\t\tthis.board[i + j*len] |= calcPhases(i+j*len);\n\t\t\t}\n\t\t}\n}\n\nBoard.prototype.initPiece = function (pi) {\n\tthis.moves[pi] = [];\n}\n\nBoard.prototype.getPlayer = function (index) {\n\tlet pid = (this.board[index] & 12);\n\tswitch (pid) {\n\t\tcase 12:\n\t\t\treturn this.p2;\n\t\tcase 4:\n\t\t\treturn this.p1;\n\t\tdefault:\n\t\t\treturn 0;\n\t}\n\t//return ( (this.board[index] & 12) < 12 ) ? this.p1 : this.p2;\n}\n\nBoard.prototype.getCapturedPiece = function (pid, to) {\n\tlet nMoves = this.moves[pid].length;\n\tfor(let i=0; i< nMoves; i++) {\n\t\tlet move = this.moves[pid][i];\n\t\tif( (move & (BIT_AREA - 1)) === to ) return move >> (BIT_INDEX_SHIFT);\n\t}\n\treturn false;\n}\n\n// moves[pi] = [0000000 0000000] --> [board index of captured piece + board index of destination cell]\nBoard.prototype.addMove = function (from, to, captured) {\n\tcaptured = captured || 0;\n\tlet pi = (this.board[from] >> 5);\n\tthis.moves[pi].push( (captured << (BIT_INDEX_SHIFT) ) + to );\n}\n\nBoard.prototype.update = function (newPiece) {\n\tif (newPiece) {\n\t\t//find out which player this piece belongs to then add it within that player's key range (00000)\n\t\tthis.board = this.board.map(row => row.map((cell, j) => {\n\t\t\tif (cell.who != null) { //increment all pi in board after piecesSeparator by one\n\t\t\t\tif (cell.who >= this.piecesSeparator) cell.who++;\n\t\t\t\t//if piece alive, keep on board\n\t\t\t\treturn this.pieces[cell.who].alive ? {who: cell.who, move:false} : {who: null, move:false};\n\t\t\t} else return {who: null, move: false};\n\t\t}));\n\t} else {\n\t\tthis.board = this.board.map(row => row.map((cell, j) =>\n\t\t\t(cell.who != null)\n\t\t\t? (this.pieces[cell.who].alive\n\t\t\t\t? {who: cell.who, move:false}\n\t\t\t\t: {who: null, move:false})\n\t\t\t: {who: null, move: false}\n\t\t));\n\t}\n}\n\n\n\n/*==========\t\t\t\t\t\t\t\t\t\t\tCLONE\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n\nBoard.prototype.makeClone = function (pi, row, col) {\n\t/*\n\tgetPlayer bit\n\t*/\n\tthis.board[row*BOARD_SIZE + col] |= this.getPlayer(row, col)\n\tthis.updateBoard(true);\n\tthis.board[row][col].who = this.piecesSeparator;\n\treturn true;\n}\n\n\nBoard.prototype.canClone = function (from) {\n\tlet onRow = from/BOARD_SIZE, piece = this.board[from];\n\tlet onBoundaryColumn = (from+1)%BOARD_SIZE < 2;\n\tlet onBoundaryRow = (onRow + 1)%BOARD_SIZE < 2;\n\n\t//To clone: NOT be on boundary column, BE on boundary row, NOT be cloned yet\n\tif(onBoundaryColumn || !onBoundaryRow || (piece ^ 16) ) return false;\n\n\tlet spawnRow = (( (piece >> 5) & 2*BIT_LENGTH ) - 1) / 2;\n\treturn (onRow ^ spawnRow);\n}\n\n//Assumes valid move\nBoard.prototype.isCloneMove = function (to, from) {\n\t//suffice to show if to and from are on opposing boundary rows\n\tlet toRow = to/BOARD_SIZE, fromRow = from/BOARD_SIZE;\n\treturn this.canClone(from) && (toRow ^ fromRow);\n}\n\n/*==========\t\t\t\t\t\t\t\t\t\t\tMOVES\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n\n// Board.prototype.getPlayer = function (pi) {\n// \treturn this.pieces[pi].player;\n// }\n\nBoard.prototype.canLeap = function (from, adj, isPhase, bypassCondition) {\n\tlet to = this.getInverseIndex(from);\n\tif( isPhase && !(this.getPlayer(to)) ) {\n\t\tlet inv = this.getInverseIndex(adj);\n\t\tlet phaseAdj = this.getPlayer(adj) & 8;\n\t\tlet phaseFar = this.getPlayer(inv) & 8;\n\n\t\tif( (phaseAdj ^ phaseFar) ) {\n\t\t\tif (bypassCondition%3) return true;\n\t\t\tlet captured = phaseAdj ? adj : inv;\n\t\t\tthis.addMove(from, to, captured);\n\t\t}\n\t}\n\t//if neighbor cell is a phase, leap_cell clear, and (enemy piece on phaseAdj XOR enemy piece on phaseFar)\n}\n\nBoard.prototype.isJump = function (from, adj, direction, bypassCondition) {\n\t//if adj cell occupied, jumpCell in bounds, jumpCell clear, and jumpCell has enemy piece\n\tlet to = adj+direction;\n\tif(this.inBounds(to)) {\n\t\tif (!this.getPlayer(to)) {\n\t\t\tif(bypassCondition%3) return true;\n\t\t\telse this.addMove(from, to, adj);\n\t\t}\n\t}\n}\n\nBoard.prototype.canPhase = function (from, to, bypassCondition) {\n\tlet isPhase = (this.board[to] & 1);\n\tlet isDestinationEmpty = (this.board[from] & 3); //1 if player piece\n\tif(isPhase && isDestinationEmpty) {\n\t\tif (bypassCondition%3) return true;\n\t\telse this.addMove(from, to);\n\t}\n}\n\n//reaching this function implies selected piece can be cloned, so piece is on an bounding row\nBoard.prototype.getCloneSpawnCells = function (from, bypassCondition) {\n\tlet spawnRow = ( from/BOARD_SIZE ^ (BOARD_SIZE-1) );\n\tfor(let col=1; col<BOARD_SIZE-1;col++) {\n\t\tlet to = spawnRow + col;\n\t\tlet spawnCell = this.board[to];\n\t\t//if spawnCell doesn't have a player on it\n\t\tif ( spawnCell ^ 4 ) {\n\t\t\tif (bypassCondition%3) return true;\n\t\t\telse this.addMove(from, to);\n\t\t}\n\t}\n}\n\nBoard.prototype.getMovesInDirection = function (from, adj, bypassCondition) {\n\t//check adjacent cells of piece p wrt the boundary\n\tlet direction = adj - from;\n\tlet isPhase = this.board[adj] & 1;\n\n\tif (this.canLeap(from, adj, isPhase, bypassCondition)) return true;\n\n\tif( this.getPlayer(adj) ) {\n\t\tif (this.isJump(from, adj, direction, bypassCondition)) return true;\n\t}\n\telse if (bypassCondition%3%2) return bypassCondition%2;\t//adjacent moves\n\telse if (!bypassCondition) this.addMove(from, adj);\n\treturn false;\n}\n\n/* bypassCondition (HIGHLIGHT BYPASS CONDITION):\n\t\tundefined - default (Store all),\n\t\t1 - bypass all,\n\t\t2 - bypass continuable moves,\n\t\t3 - store continuable moves\n*/\nBoard.prototype.getMoves = function (from, bypassCondition, direction) {\n\tlet row = getRow(from), col = getCol(from);\n\n\t// on a phase\n\tif (this.canPhase(from, this.getInverseIndex(from), bypassCondition)) return true;\n\t// able to clone\n\tif (this.canClone(from) && this.getCloneSpawnCells(from, bypassCondition)) return true;\n\n\t// move continuation AND has a move in specified direction\n\tif (direction !== undefined && this.inBounds(from+direction)) {\n\t\tif( this.getMovesInDirection(from, from+direction, bypassCondition) ) return true;\n\t} else {\n\t\t//step, jump, leap\n\t\tfor(let r=-1;r<2;r++) for(let c=-1;c<2; c++) {\n\t\t\tlet adj = toIndex(row + r, col + c);\n\t\t\tlet validDirection = ( this.getPlayer(adj) ^ this.getPlayer(from) ) //enemy or empty cell\n\t\t\t\t&& this.inBounds(adj) && (adj-from);\n\t\t\tif (validDirection && this.getMovesInDirection(from, adj, bypassCondition)) return true;\n\t\t}\n\t}\n\treturn false;\n}\n\n//Performs move. returns true if caught piece in process, else false\n//NOTE: it is impossible to capture a piece at board index 0\nBoard.prototype.doMove = function (from, to) {\n\n\tif(this.isCloneMove(from, to)) {\n\t\tthis.makeClone(to);\n\t\treturn false;\n\t}\n\n\tlet pi = this.board[from] >> 5;\n\tthis.board[from] = this.board[from] & 31; //31 is constant -> 00000 ( 0 00 00 )\n\n\tif( (this.board[to] & 12) == 8 ) {\n\t\t//SPECIAL PIECE *any player can move.... but how is TODO*\n\t\tthis.board[to] |= (pi << 5);\n\t} else {\n\t\tthis.board[to] |= (pi << 5) | this.getPlayer(from);\n\t}\n\n\tlet capturedPiece = this.getCapturedPiece(pi, to);\n\tlet direction;\n\tif(capturedPiece) {\n\t\tthis.board[capturedPiece] = this.board[capturedPiece] & 31;\n\t\t//if can continue move in direction\n\t\tif( this.inBounds(to - capturedPiece) && this.getMovesInDirection(to, to - capturedPiece, 2) ) {\n\t\t\tdirection = to - capturedPiece;\n\t\t}\n\t}\n\t\n\tif ( direction !== undefined && (this.canClone(pi) || !samePhase(from, to))) direction = 0;\n\t//this.updateBoard();\n\treturn direction;\n}\n\nBoard.prototype.highlightMoves = function (piece) {\n\tlet nMoves = this.moves[piece].length;\n\tfor(let i=0; i<nMoves; i++) {\n\t\tlet destinationIndex = ( this.moves[piece][i] & (BIT_AREA - 1) );\n\t\tthis.board[destinationIndex] |= 2;\n\t}\n}\n\nBoard.prototype.removeHighlight = function () {\n\tfor(let i=0; i<BOARD_AREA; i++) {\n\t\tif(this.board[i] & 2) (this.board[i] = this.board[i] ^ 2);\n\t}\n}\n\n/*==========\t\t\t\t\t\t\t\t\t\t\tINTEGRITY\t\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n\nBoard.prototype.getInverseIndex = function (index) {\n\tlet len = BOARD_SIZE - 1;\n\tlet row = getRow(index), col = getCol(index);\n\treturn toIndex(len - row, len - col);\n}\n\n\nBoard.prototype.samePhase = function (from, to) {\n\tlet isPhase = this.board[from] & 1;\n\treturn isPhase && this.getInverseIndex(from) === to;\n}\n\nBoard.prototype.inBounds = function (index) {\n\treturn 0 <= index && index < BOARD_AREA;\n}\n\nBoard.prototype.canContinueMove = function (from, direction) {\n\treturn direction !== undefined ? this.getMoves(from, 2, from+direction) : false;\n}\n\nBoard.prototype.hasMoves = function (pi) {\n\treturn this.getMoves(pi, 1);\n}\n\n//Player has no more moves when (1): all player's pieces are dead (2): every piece has no moves\nBoard.prototype.movesLeft = function (player) {\n\tfor(let pi=0; pi < this.pieces.length; pi++) {\n\t\tlet p = this.pieces[pi];\n\t\tif(p.alive && p.player === player) {\n\t\t\tif(this.hasMoves(pi)) return true;\n\t\t}\n\t}\n\treturn false;\n}\n\nBoard.prototype.validMove = function (piece, index) {\n\tlet n = this.moves[piece].length;\n\tlet isAvailableMove = 0;\n\tfor(let i=0; i<n; i++) {\n\t\tif ( (this.moves[piece][i] & (BIT_AREA - 1)) === index ) isAvailableMove++;\n\t}\n\treturn !!(isAvailableMove);\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}