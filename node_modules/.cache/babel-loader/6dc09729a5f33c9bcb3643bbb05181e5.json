{"ast":null,"code":"import socketIOClient from 'socket.io-client'; //import store from '../store/';\n\nimport { ENDPOINT } from '../constants/socket.types';\nimport { USER, LOBBY, ROOM, GAME, CHAT } from '../constants/';\nimport ACTION from '../actions';\n\nconst socketMiddleware = () => {\n  let io = null;\n\n  const onConnect = store => event => {\n    console.log('Howdy!');\n  };\n\n  const onDisconnect = store => event => {\n    console.log('Bowdy?');\n  };\n\n  const onMessage = dispatch => action => {\n    //TODO: I guess this is where we handle the server data\n    console.log(JSON.stringify(action));\n\n    switch (action.type) {\n      case LOBBY.UPDATE:\n        dispatch({\n          type: ROOM.FETCH_ROOMS,\n          payload: action.payload\n        }); //dispatch(action);\n\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  return dispatch => action => {\n    console.log(dispatch);\n\n    switch (action.type) {\n      case 'connect':\n        if (io) break;\n        io = socketIOClient(action.host);\n        io.on('connect', onConnect(dispatch)).on('message', onMessage(dispatch)).on('disconnect', onDisconnect(dispatch));\n        break;\n\n      case 'disconnect':\n        if (io) io.close();\n        io = null;\n        console.log('Disconnected.');\n        break;\n\n      case USER.LOGIN:\n      case USER.LOGOUT:\n        io.emit('userEvent', action);\n        dispatch(ACTION.USER.userLogin(action.payload));\n        break;\n\n      case LOBBY.ADD_ROOM:\n      case LOBBY.REMOVE_ROOM:\n      case LOBBY.UPDATE:\n        io.emit('lobbyEvent', action);\n        break;\n\n      case ROOM.ENTER:\n      case ROOM.EXIT:\n      case ROOM.SUBMIT_MOVE:\n      case ROOM.END_GAME:\n        io.emit('roomEvent', action);\n        break;\n\n      case GAME.START:\n      case GAME.SELECT:\n      case GAME.END:\n        io.emit('gameEvent', action);\n        break;\n\n      default:\n        return dispatch(action);\n    }\n  };\n}; // function Socket () {\n//   this.io = socketIOClient.connect('ws://localhost:3001');\n//\n//   this.io\n//     .on('connect', () => console.log('howdy'))\n//     .on(LOBBY.UPDATE, (data) => store.dispatch(ACTION.LOBBY.update(data)))\n//     .on(LOBBY.ADD_ROOM, (data) => store.dispatch(ACTION.LOBBY.update(data)))\n//     .on('recieveMove', data => {\n//       console.log(data);\n//     });\n// }\n//\n// const socket = new Socket();\n\n\nexport default socketMiddleware;","map":{"version":3,"sources":["/Users/bacchus/git/Leap/client/src/middleware/socket.js"],"names":["socketIOClient","ENDPOINT","USER","LOBBY","ROOM","GAME","CHAT","ACTION","socketMiddleware","io","onConnect","store","event","console","log","onDisconnect","onMessage","dispatch","action","JSON","stringify","type","UPDATE","FETCH_ROOMS","payload","host","on","close","LOGIN","LOGOUT","emit","userLogin","ADD_ROOM","REMOVE_ROOM","ENTER","EXIT","SUBMIT_MOVE","END_GAME","START","SELECT","END"],"mappings":"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","sourcesContent":["import socketIOClient from 'socket.io-client';\n//import store from '../store/';\nimport { ENDPOINT } from '../constants/socket.types';\nimport { USER, LOBBY, ROOM, GAME, CHAT } from '../constants/';\nimport ACTION from '../actions';\n\n\nconst socketMiddleware = () => {\n  let io = null;\n\n  const onConnect = store => event => {\n    console.log('Howdy!');\n  };\n\n  const onDisconnect = store => event => {\n    console.log('Bowdy?');\n  };\n\n  const onMessage = dispatch => action => {\n    //TODO: I guess this is where we handle the server data\n    console.log(JSON.stringify(action));\n    switch (action.type) {\n      case LOBBY.UPDATE:\n        dispatch({type: ROOM.FETCH_ROOMS, payload: action.payload});\n        //dispatch(action);\n        break;\n      default: break;\n    }\n  };\n\n  return dispatch => action => {\n    console.log(dispatch);\n    switch (action.type) {\n      case 'connect':\n        if (io) break;\n\n        io = socketIOClient(action.host);\n        io\n          .on('connect', onConnect(dispatch))\n          .on('message', onMessage(dispatch))\n          .on('disconnect', onDisconnect(dispatch));\n        break;\n\n      case 'disconnect':\n        if (io) io.close();\n        io = null;\n        console.log('Disconnected.');\n        break;\n\n      case USER.LOGIN:\n      case USER.LOGOUT:\n        io.emit('userEvent', action);\n        dispatch(ACTION.USER.userLogin(action.payload));\n        break;\n\n      case LOBBY.ADD_ROOM:\n      case LOBBY.REMOVE_ROOM:\n      case LOBBY.UPDATE:\n        io.emit('lobbyEvent', action);\n        break;\n\n      case ROOM.ENTER:\n      case ROOM.EXIT:\n      case ROOM.SUBMIT_MOVE:\n      case ROOM.END_GAME:\n        io.emit('roomEvent', action);\n        break;\n\n      case GAME.START:\n      case GAME.SELECT:\n      case GAME.END:\n        io.emit('gameEvent', action);\n        break;\n\n\n      default:\n      return dispatch(action);\n    }\n  };\n};\n\n// function Socket () {\n//   this.io = socketIOClient.connect('ws://localhost:3001');\n//\n//   this.io\n//     .on('connect', () => console.log('howdy'))\n//     .on(LOBBY.UPDATE, (data) => store.dispatch(ACTION.LOBBY.update(data)))\n//     .on(LOBBY.ADD_ROOM, (data) => store.dispatch(ACTION.LOBBY.update(data)))\n//     .on('recieveMove', data => {\n//       console.log(data);\n//     });\n// }\n//\n// const socket = new Socket();\n\nexport default socketMiddleware;\n"]},"metadata":{},"sourceType":"module"}