{"ast":null,"code":"//'use strict';\nimport { cellType, phaseLayouts } from './util';\n/*\n\nREFACTOR CHANGES:\nLeap.js -> Game.js\n\t<Leap> -> <GameController>\nboard.js -> leap.js\n\n\nBITWISE:\n\nBOARD:\nbit\t\t\t\titem\n0-1\t\t\t\tcellType\t{regular, phase} x {highlight, no highlight}\n2-3\t\t\tcellState\t\t{00: empty, 10: SPECIAL, 01: p1, 11: p2, }   NOTE, if '10' for bits 1 and 2, then it should be a SPECIAL THING???  lmao what if a piece can be moved by either player for a few turns?\n4\t\t\t\t\tisCloned\n5-9\t\t\t\tkey\t\t\t\tIf piece on cell, this is index to reach it\n\nboard[i] = (key << 4 | isCloned << 3 | cellState << 1 | cellType);\nfor i = row * SIZE + col \t\twhere row, col wtr a given piece\n\nPIECE INDEX:\nbit \t\t\titem\n0-2\t\t\t\tcol\n3-(5,6)\t\trow\n\nboard[i] = (row << 4 | col);\nfor i = SIZE*SIZE + key\t\t\twhere\n\n\nhow to store moves\nmoves[i] = [ 0 <= board_index < SIZE*SIZE, ... , ... ] all possible moves for associated piece.\nfor i = SIZE*SIZE\n\n\nindex = cell number\nkey = piece index\n\n*/\n\nvar BOARD_SIZE, BOARD_AREA, BIT_SIZE, BIT_MAX_PI, BIT_INDEX_SHIFT, BIT_AREA;\nconst PLAYER_ONE = 4;\nconst PLAYER_TWO = 12;\n\nfunction getBitShift(b) {\n  return b >> 1 ? 1 + getBitShift(b >> 1) : 1;\n}\n\nfunction Board(player, len, phaseLayout) {\n  //no args passed mean it will be a copy.\n  if (player) {\n    this.player = player;\n    BOARD_SIZE = len;\n    BOARD_AREA = BOARD_SIZE ** 2;\n    BIT_SIZE = 2 ** getBitShift(BOARD_SIZE - 1);\n    BIT_MAX_PI = 2 * BIT_SIZE;\n    BIT_INDEX_SHIFT = getBitShift(BOARD_AREA - 1);\n    BIT_AREA = 2 ** BIT_INDEX_SHIFT;\n    this.init(phaseLayout);\n  }\n}\n\nBoard.prototype.init = function (layout) {\n  this.pAmount = {\n    [PLAYER_ONE]: BOARD_SIZE,\n    [PLAYER_TWO]: BOARD_SIZE\n  };\n  this.continuedMove = false;\n  (this.board = []).length = BOARD_AREA + 4 * BOARD_SIZE;\n  (this.moves = []).length = 4 * BOARD_SIZE;\n  this.board.fill(0, 0, BOARD_AREA - 1);\n  this.bufferSize = 1; //how many rows between the pieces' starting location and the nearest phases\n\n  let pi = 0; //piece Index (ID)\n\n  const lastRow = (BOARD_SIZE - 1) * BOARD_SIZE;\n\n  const calcPhases = index => {\n    let k = 0;\n\n    while (k < phaseLayouts[layout].length) {\n      if ((index ^ phaseLayouts[layout][k]) === 0) return 1;\n      k++;\n    }\n\n    return 0;\n  };\n\n  this.clearMoves();\n\n  for (let i = 0; i < BOARD_SIZE; i++) {\n    this.board[i] = pi << 5 | PLAYER_ONE; //00000 0 01 00\n\n    this.initPiece(pi, i);\n    this.board[i + lastRow] = pi + BIT_MAX_PI << 5 | PLAYER_TWO; //100000 0 11 00\n\n    this.initPiece(pi + BIT_MAX_PI, i + lastRow);\n    pi++;\n\n    for (let j = 1 + this.bufferSize; j < BOARD_SIZE - 1 - this.bufferSize; j++) {\n      this.board[i + j * BOARD_SIZE] |= calcPhases(i + j * BOARD_SIZE);\n    }\n  }\n};\n\nBoard.prototype.initPiece = function (key, index) {\n  this.board[BOARD_AREA + key] = index;\n};\n\nBoard.prototype.copy = function () {\n  const board = new Board();\n  const n = BOARD_AREA + 4 * BOARD_SIZE;\n  (board.board = []).length = n;\n  (board.moves = []).length = this.moves.length; //copy over the board info (including piece directory)\n\n  for (let i = 0; i < n; i++) board.board[i] = this.board[i];\n\n  board.player = this.player;\n  board.continuedMove = this.continuedMove;\n  board.clearMoves();\n  return board;\n}; // moves[pi] = [0000000 0000000] --> [board index of captured piece + board index of destination cell]\n\n\nBoard.prototype.addMove = function (from, to, captured) {\n  captured = captured || 0;\n  const pi = this.board[from] >> 5;\n  this.moves[pi].push((captured << BIT_INDEX_SHIFT) + to);\n};\n\nBoard.prototype.clearMoves = function (pi) {\n  if (pi !== undefined) {\n    this.moves[pi] = [];\n    return;\n  }\n\n  for (let i = 0; i < 4 * BOARD_SIZE; i++) this.moves[i] = [];\n};\n\nBoard.prototype.highlightMoves = function (piece) {\n  const nMoves = this.moves[piece].length;\n\n  for (let i = 0; i < nMoves; i++) {\n    let to = this.moves[piece][i] & BIT_AREA - 1;\n    this.board[to] |= 2;\n  }\n};\n\nBoard.prototype.removeHighlight = function () {\n  for (let i = 0; i < BOARD_AREA; i++) {\n    if (this.board[i] & 2) this.board[i] = this.board[i] ^ 2;\n  }\n};\n/*==========\t\t\t\t\t\t\t\t\t\t\tCLONE\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n//Assume special tiles won't appear on spawn rows\n\n\nBoard.prototype.makeClone = function (from, to) {\n  const player = this.player;\n  this.pAmount[player]++;\n  const c = player === 12 ? BIT_MAX_PI : 0;\n  let key; //Find first empty slot\n\n  for (key = BOARD_SIZE + c; key < 2 * BOARD_SIZE + c; key++) {\n    if (this.board[BOARD_AREA + key] === undefined) {\n      this.board[BOARD_AREA + key] = to;\n      this.board[to] = key << 5 | player | 16;\n      this.board[from] |= 16;\n      break;\n    }\n  }\n};\n\nBoard.prototype.onCloningCell = function (from) {\n  const onRow = from / BOARD_SIZE;\n  const piece = this.board[from];\n  const onBoundaryColumn = (from + 1) % BOARD_SIZE < 2;\n  const onBoundaryRow = (onRow + 1) % BOARD_SIZE < 2; //To clone: NOT be on boundary column, BE on boundary row, NOT be cloned yet\n\n  if (onBoundaryColumn || !onBoundaryRow || piece & 16) return false;\n  const spawnRow = piece >> 5 & BIT_MAX_PI ? BOARD_SIZE - 1 : 0;\n  return onRow ^ spawnRow;\n}; //Assumes valid move\n\n\nBoard.prototype.isCloneMove = function (from, to) {\n  //if on cloning cell, suffice to show if destination is on spawn row\n  const spawnRow = this.board[from] >> 5 & BIT_MAX_PI ? BOARD_SIZE - 1 : 0;\n  return this.onCloningCell(from) && Math.floor(to / BOARD_SIZE) === spawnRow;\n};\n/*==========\t\t\t\t\t\t\t\t\t\t\tMOVE LOGIC\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n\n\nBoard.prototype.canLeap = function (from, adj, bypass) {\n  const to = this.getInverseIndex(from); //DOES NOT CONSIDER SPECIAL PIECE '10'\n\n  if (this.getPlayer(to)) return;\n  const inv = this.getInverseIndex(adj);\n  const phaseAdj = this.getPlayer(adj);\n  const phaseFar = this.getPlayer(inv);\n\n  if ((phaseAdj ^ phaseFar ^ this.player) === 8) {\n    if (bypass) return true;else this.addMove(from, to, phaseAdj ? adj : inv);\n  } //if neighbor cell is a phase, leap_cell clear, and (enemy piece on phaseAdj XOR enemy piece on phaseFar)\n\n};\n\nBoard.prototype.canJump = function (from, direction, bypass) {\n  //if adj cell occupied, jumpCell in bounds, jumpCell clear, and jumpCell has enemy piece\n  const adj = from + direction;\n  const to = adj + direction;\n\n  if (this.inBounds(to) && !this.getPlayer(to)) {\n    if (bypass) return true;else this.addMove(from, to, adj);\n  }\n};\n\nBoard.prototype.isPhaseMove = function (from, to, captured) {\n  const bothPhases = this.board[from] & this.board[to] & 1;\n  return !captured && bothPhases && this.getInverseIndex(from) === to;\n};\n\nBoard.prototype.canPhase = function (from, to, bypass) {\n  const isPhase = this.board[from] & 1;\n  const isDestinationEmpty = !(this.board[to] & 4); //1 if player piece\n\n  if (isPhase && isDestinationEmpty) {\n    if (bypass) return true;else this.addMove(from, to);\n  }\n}; //reaching this function implies selected piece can be cloned, so piece is on a bounding row\n\n\nBoard.prototype.getSpawnCells = function (from, bypass) {\n  const spawnRow = from / BOARD_SIZE ^ BOARD_SIZE - 1;\n\n  for (let col = 1; col < BOARD_SIZE - 1; col++) {\n    let to = spawnRow * BOARD_SIZE + col;\n    let spawnCellEmpty = !(this.board[to] & 4); //if spawnCell doesn't have a player on it\n\n    if (spawnCellEmpty) {\n      if (bypass) return true;else this.addMove(from, to);\n    }\n  }\n};\n\nBoard.prototype.getMovesInDirection = function (from, direction, bypass) {\n  //check adjacent cells of piece p wrt the boundary\n  const adj = from + direction;\n  const isPhase = this.board[adj] & 1;\n  if (isPhase && this.canLeap(from, adj, bypass)) return true;\n\n  if ((this.getPlayer(adj) ^ this.player) === 8) {\n    if (this.canJump(from, direction, bypass)) return true;\n  } else if (bypass) return true;else this.addMove(from, adj);\n}; //bypass: if you want to see if this piece is able to move\n\n\nBoard.prototype.getMoves = function (from, bypass) {\n  const bCol = (from + 1) % BOARD_SIZE < 2 ? (from + 1) % BOARD_SIZE : undefined;\n\n  for (let r = -1; r < 2; r++) {\n    for (let c = -1 + (bCol === 1 ? 1 : 0); c < 2 - (bCol === 0 ? 1 : 0); c++) {\n      let direction = r * BOARD_SIZE + c;\n      let adj = from + direction; //enemy or empty cell\n\n      let validDirection = this.getPlayer(adj) ^ this.player && this.inBounds(adj) && direction;\n      if (validDirection && this.getMovesInDirection(from, direction, bypass)) return true;\n    }\n  }\n\n  const inv = this.getInverseIndex(from); // phase condition\n\n  if (!this.isRedundantMove(from, inv) && this.canPhase(from, inv, bypass)) return true; // clone condition\n\n  if (!(this.board[from] & 16) && this.onCloningCell(from) && this.getSpawnCells(from, bypass)) return true;\n};\n\nBoard.prototype.getAllMoves = function (player) {\n  const c = player === 12 ? BIT_MAX_PI : 0;\n\n  for (let key = c; key < 2 * BOARD_SIZE + c; key++) {\n    let from = this.board[BOARD_AREA + key];\n    if (!(from === undefined || from < 0)) this.getMoves(from);\n  }\n}; //Performs move. returns true if caught piece in process, else false\n//NOTE: it is impossible to capture a piece at board index 0\n\n\nBoard.prototype.doMove = function (from, to) {\n  //CACHE this.board HERE. ITS A VERY HOT FUNCTION lmao (. Y .)\n  if (this.isCloneMove(from, to)) {\n    this.makeClone(from, to);\n    this.removeHighlight();\n    this.clearMoves();\n    return;\n  }\n\n  const pi = this.board[from] >> 5;\n  const capturedPiece = this.getCapturedPiece(pi, to);\n  this.removeHighlight();\n  this.clearMoves();\n  const piece = pi << 5 | this.board[from] & 16 | this.player;\n\n  if ((this.board[to] & 12) === 8) {\n    //SPECIAL PIECE *any player can move.... but how is TODO*\n    this.board[to] |= pi << 5;\n  } else {\n    //We can assume this cell is empty\n    this.board[to] |= piece;\n  }\n\n  if (capturedPiece) {\n    const ci = this.board[capturedPiece] >> 5;\n    this.board[capturedPiece] &= 3;\n    this.board[BOARD_AREA + ci] = ~this.board[BOARD_AREA + ci]; //He DED\n\n    this.pAmount[this.player & 8]--; //if Leap, then we get the direction by the difference between captured index and adjacent movement cell\n\n    const capturedAdjToDestination = -9 <= to - capturedPiece && to - capturedPiece <= 9;\n    const capturedDirection = capturedAdjToDestination ? to - capturedPiece : capturedPiece - from; //if can continue move in direction\n\n    let adj = to + capturedDirection;\n    if (this.board[adj] & 1) this.canLeap(to, adj);\n    if (this.getPlayer(adj) ^ this.player === 2) this.canJump(to, capturedDirection);\n  }\n\n  this.board[from] &= 3; //keep only cell data\n\n  this.board[BOARD_AREA + pi] = to; //const isLeap = capturedPiece && alreadyPhased;\n\n  const canPhase = this.board[to] & 1 && !this.isPhaseMove(from, to, capturedPiece);\n  const canClone = this.onCloningCell(to) && !this.onCloningCell(from); //If can clone or is on phase that piece hasn't just travelled through\n\n  if (canPhase) this.canPhase(to, this.getInverseIndex(to));\n  if (canClone) this.getSpawnCells(to); //if not a continued move, change player\n\n  if (!this.moves[pi].length) this.switchPlayer();else this.continuedMove = true; //if true then this.player wins\n\n  return !this.pAmount[this.player & 8];\n};\n/*==========\t\t\t\t\t\t\t\t\t\t\tREFERENCES\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n\n\nBoard.prototype.getPlayer = function (index) {\n  const pid = this.board[index] & 12;\n  return pid === 4 || pid === 12 ? pid : 0;\n};\n\nBoard.prototype.getCapturedPiece = function (pid, to) {\n  const nMoves = this.moves[pid].length;\n\n  for (let i = 0; i < nMoves; i++) {\n    let move = this.moves[pid][i];\n    let capturedPiece = move >> BIT_INDEX_SHIFT;\n    if ((move & BIT_AREA - 1) === to && capturedPiece) return capturedPiece;\n  }\n}; //ONLY WORKS on NxN boards and phase group orders of 2\n\n\nBoard.prototype.getInverseIndex = function (index) {\n  return BOARD_AREA - 1 - index;\n};\n/*==========\t\t\t\t\t\t\t\t\t\t\tUTILITY\t\t\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n\n\nBoard.prototype.inBounds = function (index) {\n  return 0 <= index && index < BOARD_AREA;\n};\n\nBoard.prototype.switchPlayer = function () {\n  this.player ^= 8;\n  this.continuedMove = false;\n  return this.player;\n};\n\nBoard.prototype.isRedundantMove = function (from, to) {\n  const pi = this.board[from] >> 5;\n  const n = this.moves[pi].length;\n\n  for (let i = 0; i < n; i++) {\n    if ((this.moves[pi][i] & BIT_AREA - 1) === to) return true;\n  }\n\n  return false;\n}; //Player has no more moves when (1): all player's pieces are dead (2): every piece has no moves\n\n\nBoard.prototype.movesLeft = function (player) {\n  const c = player === 12 ? BIT_MAX_PI : 0;\n\n  for (let key = c; key < 2 * BOARD_SIZE + c; key++) {\n    let piece = this.board[BOARD_AREA + key];\n    if (!(piece < 0 || piece === undefined) && this.getMoves(piece, true)) return true;\n  }\n\n  return false;\n};\n\nBoard.prototype.validMove = function (piece, index) {\n  const n = this.moves[piece].length;\n\n  for (let i = 0; i < n; i++) {\n    if ((this.moves[piece][i] & BIT_AREA - 1) === index) return true;\n  }\n\n  return false;\n};\n\nBoard.prototype.randomMove = function () {};\n\nexport default Board;","map":{"version":3,"sources":["/Users/bacchus/git/Leap/src/js/board.js"],"names":["cellType","phaseLayouts","BOARD_SIZE","BOARD_AREA","BIT_SIZE","BIT_MAX_PI","BIT_INDEX_SHIFT","BIT_AREA","PLAYER_ONE","PLAYER_TWO","getBitShift","b","Board","player","len","phaseLayout","init","prototype","layout","pAmount","continuedMove","board","length","moves","fill","bufferSize","pi","lastRow","calcPhases","index","k","clearMoves","i","initPiece","j","key","copy","n","addMove","from","to","captured","push","undefined","highlightMoves","piece","nMoves","removeHighlight","makeClone","c","onCloningCell","onRow","onBoundaryColumn","onBoundaryRow","spawnRow","isCloneMove","Math","floor","canLeap","adj","bypass","getInverseIndex","getPlayer","inv","phaseAdj","phaseFar","canJump","direction","inBounds","isPhaseMove","bothPhases","canPhase","isPhase","isDestinationEmpty","getSpawnCells","col","spawnCellEmpty","getMovesInDirection","getMoves","bCol","r","validDirection","isRedundantMove","getAllMoves","doMove","capturedPiece","getCapturedPiece","ci","capturedAdjToDestination","capturedDirection","canClone","switchPlayer","pid","move","movesLeft","validMove","randomMove"],"mappings":"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","sourcesContent":["//'use strict';\nimport {cellType, phaseLayouts} from './util';\n\n/*\n\nREFACTOR CHANGES:\nLeap.js -> Game.js\n\t<Leap> -> <GameController>\nboard.js -> leap.js\n\n\nBITWISE:\n\nBOARD:\nbit\t\t\t\titem\n0-1\t\t\t\tcellType\t{regular, phase} x {highlight, no highlight}\n2-3\t\t\tcellState\t\t{00: empty, 10: SPECIAL, 01: p1, 11: p2, }   NOTE, if '10' for bits 1 and 2, then it should be a SPECIAL THING???  lmao what if a piece can be moved by either player for a few turns?\n4\t\t\t\t\tisCloned\n5-9\t\t\t\tkey\t\t\t\tIf piece on cell, this is index to reach it\n\nboard[i] = (key << 4 | isCloned << 3 | cellState << 1 | cellType);\nfor i = row * SIZE + col \t\twhere row, col wtr a given piece\n\nPIECE INDEX:\nbit \t\t\titem\n0-2\t\t\t\tcol\n3-(5,6)\t\trow\n\nboard[i] = (row << 4 | col);\nfor i = SIZE*SIZE + key\t\t\twhere\n\n\nhow to store moves\nmoves[i] = [ 0 <= board_index < SIZE*SIZE, ... , ... ] all possible moves for associated piece.\nfor i = SIZE*SIZE\n\n\nindex = cell number\nkey = piece index\n\n*/\nvar BOARD_SIZE, BOARD_AREA, BIT_SIZE, BIT_MAX_PI, BIT_INDEX_SHIFT, BIT_AREA;\nconst PLAYER_ONE = 4\nconst PLAYER_TWO = 12;\n\nfunction getBitShift(b) {\n  return (b >> 1) ? (1 + getBitShift(b >> 1)) : 1;\n}\n\n\nfunction Board(player, len, phaseLayout) {\n\t//no args passed mean it will be a copy.\n\tif (player) {\n\t\tthis.player = player;\n\t\tBOARD_SIZE = len;\n\t\tBOARD_AREA = BOARD_SIZE**2;\n\t\tBIT_SIZE = 2**getBitShift(BOARD_SIZE-1);\n\t\tBIT_MAX_PI = 2*BIT_SIZE;\n\t\tBIT_INDEX_SHIFT = getBitShift(BOARD_AREA-1);\n\t\tBIT_AREA = 2**BIT_INDEX_SHIFT;\n\n\t\tthis.init(phaseLayout);\n\t}\n}\n\nBoard.prototype.init = function (layout) {\n\tthis.pAmount = {\n\t\t[PLAYER_ONE]: BOARD_SIZE,\n\t\t[PLAYER_TWO]: BOARD_SIZE\n\t};\n\tthis.continuedMove = false;\n\t(this.board = []).length = BOARD_AREA + 4*BOARD_SIZE;\n\t(this.moves = []).length = 4*BOARD_SIZE;\n\tthis.board.fill(0, 0, BOARD_AREA-1);\n\tthis.bufferSize = 1;\t//how many rows between the pieces' starting location and the nearest phases\n\n  let pi=0; //piece Index (ID)\n\tconst lastRow = (BOARD_SIZE-1)*BOARD_SIZE;\n\n\tconst calcPhases = (index) => {\n\t\tlet k = 0;\n\t\twhile(k<phaseLayouts[layout].length) {\n\t\t\tif ( (index^phaseLayouts[layout][k]) === 0 ) return 1;\n\t\t\tk++;\n\t\t}\n\t\treturn 0;\n\t};\n\tthis.clearMoves();\n\tfor (let i=0; i<BOARD_SIZE; i++) {\n\t\tthis.board[i] = ( (pi << 5) | PLAYER_ONE); //00000 0 01 00\n\t\tthis.initPiece(pi, i);\n\n\t\tthis.board[i + lastRow] = ( (pi + BIT_MAX_PI << 5) | PLAYER_TWO); //100000 0 11 00\n\t\tthis.initPiece(pi + BIT_MAX_PI, i + lastRow);\n\t\tpi++;\n\n\t\tfor (let j=1+this.bufferSize; j<(BOARD_SIZE-1)-this.bufferSize; j++) {\n\t\t\tthis.board[i + j*BOARD_SIZE] |= calcPhases(i+j*BOARD_SIZE);\n\t\t}\n\t}\n}\n\nBoard.prototype.initPiece = function (key, index) {\n\tthis.board[BOARD_AREA + key] = index;\n}\n\nBoard.prototype.copy = function () {\n\tconst board = new Board();\n\tconst n = BOARD_AREA + 4*BOARD_SIZE;\n\t(board.board = []).length = n;\n\t(board.moves = []).length = this.moves.length;\n\n\t//copy over the board info (including piece directory)\n\tfor (let i=0; i<n; i++) board.board[i] = this.board[i];\n\n\tboard.player = this.player;\n\tboard.continuedMove = this.continuedMove;\n\tboard.clearMoves();\n\treturn board;\n}\n\n\n// moves[pi] = [0000000 0000000] --> [board index of captured piece + board index of destination cell]\nBoard.prototype.addMove = function (from, to, captured) {\n\tcaptured = captured || 0;\n\tconst pi = (this.board[from] >> 5);\n\tthis.moves[pi].push( (captured << (BIT_INDEX_SHIFT) ) + to );\n}\n\nBoard.prototype.clearMoves = function (pi) {\n\tif (pi !== undefined) {\n\t\tthis.moves[pi] = [];\n\t\treturn;\n\t}\n\tfor (let i=0; i<4*BOARD_SIZE; i++) this.moves[i] = [];\n}\n\n\n\nBoard.prototype.highlightMoves = function (piece) {\n\tconst nMoves = this.moves[piece].length;\n\tfor (let i=0; i<nMoves; i++) {\n\t\tlet to = ( this.moves[piece][i] & (BIT_AREA - 1) );\n\t\tthis.board[to] |= 2;\n\t}\n}\n\nBoard.prototype.removeHighlight = function () {\n\tfor (let i=0; i<BOARD_AREA; i++) {\n\t\tif (this.board[i] & 2) (this.board[i] = this.board[i] ^ 2);\n\t}\n}\n\n\n\n/*==========\t\t\t\t\t\t\t\t\t\t\tCLONE\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n\n//Assume special tiles won't appear on spawn rows\nBoard.prototype.makeClone = function (from, to) {\n\tconst player = this.player;\n\tthis.pAmount[player]++;\n\tconst c = (player === 12) ? BIT_MAX_PI : 0;\n\tlet key;\n\t//Find first empty slot\n\tfor (key= BOARD_SIZE+c; key< 2*BOARD_SIZE+c; key++) {\n\t\tif (this.board[BOARD_AREA + key] === undefined) {\n\t\t\tthis.board[BOARD_AREA + key] = to;\n\t\t\tthis.board[to] = (key << 5) | player | 16;\n\t\t\tthis.board[from] |= 16;\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nBoard.prototype.onCloningCell = function (from) {\n\tconst onRow = from/BOARD_SIZE\n\tconst piece = this.board[from];\n\tconst onBoundaryColumn = (from+1)%BOARD_SIZE < 2;\n\tconst onBoundaryRow = (onRow + 1)%BOARD_SIZE < 2;\n\n\t//To clone: NOT be on boundary column, BE on boundary row, NOT be cloned yet\n\tif (onBoundaryColumn || !onBoundaryRow || (piece & 16) ) return false;\n\n\tconst spawnRow = ( (piece >> 5) & BIT_MAX_PI ) ? (BOARD_SIZE-1) : 0;\n\treturn (onRow ^ spawnRow);\n}\n//Assumes valid move\nBoard.prototype.isCloneMove = function (from, to) {\n\t//if on cloning cell, suffice to show if destination is on spawn row\n\tconst spawnRow = ( (this.board[from] >> 5) & BIT_MAX_PI ) ? (BOARD_SIZE - 1) : 0;\n\treturn this.onCloningCell(from) && (Math.floor(to/BOARD_SIZE) === spawnRow);\n}\n\n/*==========\t\t\t\t\t\t\t\t\t\t\tMOVE LOGIC\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n\nBoard.prototype.canLeap = function (from, adj, bypass) {\n\tconst to = this.getInverseIndex(from);\n\n\t//DOES NOT CONSIDER SPECIAL PIECE '10'\n\tif (this.getPlayer(to)) return;\n\n\tconst inv = this.getInverseIndex(adj);\n\tconst phaseAdj = this.getPlayer(adj);\n\tconst phaseFar = this.getPlayer(inv);\n\n\tif ( (phaseAdj ^ phaseFar ^ this.player) === 8 ) {\n\t\tif (bypass) return true;\n\t\telse this.addMove(from, to, (phaseAdj ? adj : inv));\n\t}\n\t//if neighbor cell is a phase, leap_cell clear, and (enemy piece on phaseAdj XOR enemy piece on phaseFar)\n}\n\nBoard.prototype.canJump = function (from, direction, bypass) {\n\t//if adj cell occupied, jumpCell in bounds, jumpCell clear, and jumpCell has enemy piece\n\tconst adj = from+direction;\n\tconst to = adj+direction;\n\tif (this.inBounds(to) && !this.getPlayer(to)) {\n\t\tif (bypass) return true;\n\t\telse this.addMove(from, to, adj);\n\t}\n}\n\nBoard.prototype.isPhaseMove = function (from, to, captured) {\n\tconst bothPhases = (this.board[from] & this.board[to]) & 1;\n\treturn !captured && bothPhases && this.getInverseIndex(from) === to;\n}\n\nBoard.prototype.canPhase = function (from, to, bypass) {\n\tconst isPhase = (this.board[from] & 1);\n\tconst isDestinationEmpty = !(this.board[to] & 4); //1 if player piece\n\tif (isPhase && isDestinationEmpty) {\n\t\tif (bypass) return true;\n\t\telse this.addMove(from, to);\n\t}\n}\n\n//reaching this function implies selected piece can be cloned, so piece is on a bounding row\nBoard.prototype.getSpawnCells = function (from, bypass) {\n\tconst spawnRow = ( from/BOARD_SIZE ^ (BOARD_SIZE-1) );\n\tfor (let col=1; col<BOARD_SIZE-1;col++) {\n\t\tlet to = spawnRow*BOARD_SIZE + col;\n\t\tlet spawnCellEmpty = !(this.board[to] & 4);\n\n\t\t//if spawnCell doesn't have a player on it\n\t\tif (spawnCellEmpty) {\n\t\t\tif (bypass) return true;\n\t\t\telse this.addMove(from, to);\n\t\t}\n\t}\n}\n\nBoard.prototype.getMovesInDirection = function (from, direction, bypass) {\n\t//check adjacent cells of piece p wrt the boundary\n\tconst adj = from+direction;\n\tconst isPhase = this.board[adj] & 1;\n\n\tif (isPhase && this.canLeap(from, adj, bypass)) return true;\n\n\tif ( (this.getPlayer(adj) ^ this.player) === 8) {\n\t\tif (this.canJump(from, direction, bypass) ) return true;\n \t}\n\telse if (bypass) return true;\n\telse this.addMove(from, adj);\n}\n\n//bypass: if you want to see if this piece is able to move\nBoard.prototype.getMoves = function (from, bypass) {\n\n\tconst bCol = (from+1)%BOARD_SIZE < 2 ? (from+1)%BOARD_SIZE : undefined;\n\tfor (let r=-1; r<2; r++) {\n\t\tfor (let c=-1+(bCol === 1 ? 1 : 0); c<2-(bCol === 0 ? 1 : 0); c++) {\n\t\t\tlet direction = (r*BOARD_SIZE) + c;\n\t\t\tlet adj = from+direction;\n\t\t\t//enemy or empty cell\n\t\t\tlet validDirection = ( this.getPlayer(adj) ^ this.player ) && this.inBounds(adj) && (direction);\n\t\t\tif ( validDirection && this.getMovesInDirection(from, direction, bypass) ) return true;\n\t\t}\n\t}\n\tconst inv = this.getInverseIndex(from);\n\t// phase condition\n\tif ( !this.isRedundantMove(from, inv) && this.canPhase(from, inv, bypass) ) return true;\n\t// clone condition\n\tif (!(this.board[from] & 16) && this.onCloningCell(from) && this.getSpawnCells(from, bypass)) return true;\n}\n\nBoard.prototype.getAllMoves = function (player) {\n\tconst c = (player === 12) ? BIT_MAX_PI : 0;\n\tfor (let key=c; key < 2*BOARD_SIZE + c; key++) {\n\t\tlet from = this.board[BOARD_AREA + key];\n\t\tif (!(from === undefined || from < 0)) this.getMoves(from);\n\t}\n}\n\n//Performs move. returns true if caught piece in process, else false\n//NOTE: it is impossible to capture a piece at board index 0\nBoard.prototype.doMove = function (from, to) {\n\t//CACHE this.board HERE. ITS A VERY HOT FUNCTION lmao (. Y .)\n\tif (this.isCloneMove(from, to)) {\n\t\tthis.makeClone(from, to);\n\t\tthis.removeHighlight();\n\t\tthis.clearMoves();\n\t\treturn;\n\t}\n\tconst pi = this.board[from] >> 5;\n\tconst capturedPiece = this.getCapturedPiece(pi, to);\n\tthis.removeHighlight();\n\tthis.clearMoves();\n\n\tconst piece = (pi << 5) | (this.board[from] & 16) | this.player;\n\n\tif ( (this.board[to] & 12) === 8 ) {\n\t\t//SPECIAL PIECE *any player can move.... but how is TODO*\n\t\tthis.board[to] |= (pi << 5);\n\t} else {\n\t\t//We can assume this cell is empty\n\t\tthis.board[to] |= piece;\n\t}\n\n\tif (capturedPiece) {\n\t\tconst ci = this.board[capturedPiece] >> 5;\n\t\tthis.board[capturedPiece] &= 3;\n\t\tthis.board[BOARD_AREA + ci] = ~this.board[BOARD_AREA + ci]; //He DED\n\t\tthis.pAmount[(this.player & 8)]--;\n\t\t//if Leap, then we get the direction by the difference between captured index and adjacent movement cell\n\t\tconst capturedAdjToDestination = (-9 <= (to-capturedPiece) && (to-capturedPiece) <= 9);\n\t\tconst capturedDirection = capturedAdjToDestination ? (to-capturedPiece) : (capturedPiece - from);\n\t\t//if can continue move in direction\n\t\tlet adj = to+capturedDirection;\n\t\tif ( this.board[adj] & 1 ) this.canLeap(to, adj);\n\t\tif ( this.getPlayer(adj) ^ this.player === 2) this.canJump(to, capturedDirection);\n\t}\n\tthis.board[from] &= 3; //keep only cell data\n\tthis.board[BOARD_AREA + pi] = to;\n\n\t//const isLeap = capturedPiece && alreadyPhased;\n\tconst canPhase = (this.board[to] & 1) && !this.isPhaseMove(from, to, capturedPiece);\n\tconst canClone = this.onCloningCell(to) && !this.onCloningCell(from);\n\t//If can clone or is on phase that piece hasn't just travelled through\n\tif ( canPhase ) this.canPhase(to, this.getInverseIndex(to));\n\tif ( canClone )\tthis.getSpawnCells(to);\n\n\t//if not a continued move, change player\n\tif(!this.moves[pi].length) this.switchPlayer();\n\telse this.continuedMove = true;\n\n\t//if true then this.player wins\n\treturn !this.pAmount[(this.player & 8)];\n}\n\n\n\n/*==========\t\t\t\t\t\t\t\t\t\t\tREFERENCES\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n\nBoard.prototype.getPlayer = function (index) {\n\tconst pid = (this.board[index] & 12);\n\treturn (pid === 4 || pid === 12) ? pid : 0;\n}\n\nBoard.prototype.getCapturedPiece = function (pid, to) {\n\tconst nMoves = this.moves[pid].length;\n\tfor (let i=0; i< nMoves; i++) {\n\t\tlet move = this.moves[pid][i];\n\t\tlet capturedPiece = move >> (BIT_INDEX_SHIFT);\n\t\tif ( (move & (BIT_AREA - 1)) === to  && capturedPiece) return capturedPiece;\n\t}\n}\n\n//ONLY WORKS on NxN boards and phase group orders of 2\nBoard.prototype.getInverseIndex = function (index) {\n\treturn (BOARD_AREA - 1) - index;\n}\n\n/*==========\t\t\t\t\t\t\t\t\t\t\tUTILITY\t\t\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n\nBoard.prototype.inBounds = function (index) {\n\treturn 0 <= index && index < BOARD_AREA;\n}\n\nBoard.prototype.switchPlayer = function () {\n\tthis.player ^= 8;\n\tthis.continuedMove = false;\n\treturn this.player;\n}\n\nBoard.prototype.isRedundantMove = function (from, to) {\n\tconst pi = (this.board[from] >> 5);\n\tconst n = this.moves[pi].length;\n\tfor (let i=0; i<n; i++) {\n\t\tif ( (this.moves[pi][i] & (BIT_AREA-1)) === to ) return true;\n\t}\n\treturn false;\n}\n\n//Player has no more moves when (1): all player's pieces are dead (2): every piece has no moves\nBoard.prototype.movesLeft = function (player) {\n\tconst c = (player === 12) ? BIT_MAX_PI : 0;\n\tfor (let key=c; key < 2*BOARD_SIZE + c; key++) {\n\t\tlet piece = this.board[BOARD_AREA + key];\n\t\tif ( !(piece < 0 || piece === undefined) && this.getMoves(piece, true) ) return true;\n\t}\n\treturn false;\n}\n\nBoard.prototype.validMove = function (piece, index) {\n\tconst n = this.moves[piece].length;\n\tfor (let i=0; i<n; i++) {\n\t\tif ( (this.moves[piece][i] & (BIT_AREA - 1)) === index ) return true;\n\t}\n\treturn false;\n}\n\nBoard.prototype.randomMove = function () {\n\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}