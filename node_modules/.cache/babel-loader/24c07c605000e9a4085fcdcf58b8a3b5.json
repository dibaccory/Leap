{"ast":null,"code":"import _objectSpread from \"/Users/bacchus/git/Leap/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport Leap from '../assets/leap';\nexport const getMe = state => state.root.me;\nexport const getIsLoggedIn = state => state.root.isLoggedIn;\nexport const getRooms = state => state.rooms;\nexport const getLobbyRooms = state => {\n  const rooms = state.rooms;\n  if (!Object.keys(rooms).length) return {};\n  return state.views[state.root.activeView].rooms.reduce((obj, room) => _objectSpread({}, obj, {\n    [room]: rooms[room]\n  }), {});\n};\nexport const getActiveRoom = state => {\n  const view = state.views[state.root.activeView];\n  return view.activeRoom;\n}; //TODO: do emit instead and grab from server\n\nexport const getRoom = state => state.rooms[getActiveRoom(state)];\nexport const getUsers = state => getRoom(state).users;\nexport const getGame = state => new Leap().set(getRoom(state).game);\nexport const getHost = state => getRoom(state).host;\nexport const getUserPlaymode = state => {\n  const player = getRoom(state).player;\n  const id = getMe(state).id;\n  if (player.one === id) return 4;else if (player.two === id) return 12;else return 8;\n}; //LOCAL\n\nconst isCachedMoveForThisRoom = state => state.rooms[getActiveRoom(state)] === state.root.cachedGame.room;\n\nexport const getMoveSelectionsForActiveGame = state => isCachedMoveForThisRoom(state) ? state.root.cachedGame.move : null;\nexport const getMoveStatusForActiveGame = state => isCachedMoveForThisRoom(state) ? state.root.cachedGame.isMoveReadyToSubmit : false;","map":{"version":3,"sources":["/Users/bacchus/git/Leap/client/src/selectors/index.js"],"names":["Leap","getMe","state","root","me","getIsLoggedIn","isLoggedIn","getRooms","rooms","getLobbyRooms","Object","keys","length","views","activeView","reduce","obj","room","getActiveRoom","view","activeRoom","getRoom","getUsers","users","getGame","set","game","getHost","host","getUserPlaymode","player","id","one","two","isCachedMoveForThisRoom","cachedGame","getMoveSelectionsForActiveGame","move","getMoveStatusForActiveGame","isMoveReadyToSubmit"],"mappings":";AAAA,OAAOA,IAAP,MAAiB,gBAAjB;AAEA,OAAO,MAAMC,KAAK,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,EAAlC;AACP,OAAO,MAAMC,aAAa,GAAGH,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWG,UAA1C;AACP,OAAO,MAAMC,QAAQ,GAAGL,KAAK,IAAIA,KAAK,CAACM,KAAhC;AAEP,OAAO,MAAMC,aAAa,GAAGP,KAAK,IAAI;AACpC,QAAMM,KAAK,GAAGN,KAAK,CAACM,KAApB;AACA,MAAG,CAACE,MAAM,CAACC,IAAP,CAAYH,KAAZ,EAAmBI,MAAvB,EAA+B,OAAO,EAAP;AAC/B,SAAOV,KAAK,CAACW,KAAN,CAAYX,KAAK,CAACC,IAAN,CAAWW,UAAvB,EAAmCN,KAAnC,CAAyCO,MAAzC,CAAiD,CAACC,GAAD,EAAKC,IAAL,uBAAmBD,GAAnB;AAAwB,KAACC,IAAD,GAAQT,KAAK,CAACS,IAAD;AAArC,IAAjD,EAAgG,EAAhG,CAAP;AACD,CAJM;AAMP,OAAO,MAAMC,aAAa,GAAGhB,KAAK,IAAI;AACpC,QAAMiB,IAAI,GAAGjB,KAAK,CAACW,KAAN,CAAYX,KAAK,CAACC,IAAN,CAAWW,UAAvB,CAAb;AACA,SAAOK,IAAI,CAACC,UAAZ;AACD,CAHM,C,CAKP;;AACA,OAAO,MAAMC,OAAO,GAAGnB,KAAK,IAAIA,KAAK,CAACM,KAAN,CAAYU,aAAa,CAAChB,KAAD,CAAzB,CAAzB;AACP,OAAO,MAAMoB,QAAQ,GAAGpB,KAAK,IAAImB,OAAO,CAACnB,KAAD,CAAP,CAAeqB,KAAzC;AACP,OAAO,MAAMC,OAAO,GAAGtB,KAAK,IAAI,IAAIF,IAAJ,GAAWyB,GAAX,CAAeJ,OAAO,CAACnB,KAAD,CAAP,CAAewB,IAA9B,CAAzB;AACP,OAAO,MAAMC,OAAO,GAAGzB,KAAK,IAAImB,OAAO,CAACnB,KAAD,CAAP,CAAe0B,IAAxC;AAGP,OAAO,MAAMC,eAAe,GAAG3B,KAAK,IAAI;AACtC,QAAM4B,MAAM,GAAGT,OAAO,CAACnB,KAAD,CAAP,CAAe4B,MAA9B;AACA,QAAMC,EAAE,GAAG9B,KAAK,CAACC,KAAD,CAAL,CAAa6B,EAAxB;AACA,MAAID,MAAM,CAACE,GAAP,KAAeD,EAAnB,EAAuB,OAAO,CAAP,CAAvB,KACK,IAAGD,MAAM,CAACG,GAAP,KAAeF,EAAlB,EAAsB,OAAO,EAAP,CAAtB,KACA,OAAO,CAAP;AACN,CANM,C,CAQP;;AACA,MAAMG,uBAAuB,GAAGhC,KAAK,IAAKA,KAAK,CAACM,KAAN,CAAYU,aAAa,CAAChB,KAAD,CAAzB,MAAsCA,KAAK,CAACC,IAAN,CAAWgC,UAAX,CAAsBlB,IAAtG;;AACA,OAAO,MAAMmB,8BAA8B,GAAGlC,KAAK,IAAIgC,uBAAuB,CAAChC,KAAD,CAAvB,GAAiCA,KAAK,CAACC,IAAN,CAAWgC,UAAX,CAAsBE,IAAvD,GAA8D,IAA9G;AACP,OAAO,MAAMC,0BAA0B,GAAGpC,KAAK,IAAIgC,uBAAuB,CAAChC,KAAD,CAAvB,GAAiCA,KAAK,CAACC,IAAN,CAAWgC,UAAX,CAAsBI,mBAAvD,GAA6E,KAAzH","sourcesContent":["import Leap from '../assets/leap';\n\nexport const getMe = state => state.root.me;\nexport const getIsLoggedIn = state => state.root.isLoggedIn;\nexport const getRooms = state => state.rooms;\n\nexport const getLobbyRooms = state => {\n  const rooms = state.rooms;\n  if(!Object.keys(rooms).length) return {};\n  return state.views[state.root.activeView].rooms.reduce( (obj,room) => ({...obj, [room]: rooms[room]}), {} );\n};\n\nexport const getActiveRoom = state => {\n  const view = state.views[state.root.activeView];\n  return view.activeRoom;\n}\n\n//TODO: do emit instead and grab from server\nexport const getRoom = state => state.rooms[getActiveRoom(state)];\nexport const getUsers = state => getRoom(state).users;\nexport const getGame = state => new Leap().set(getRoom(state).game);\nexport const getHost = state => getRoom(state).host;\n\n\nexport const getUserPlaymode = state => {\n  const player = getRoom(state).player;\n  const id = getMe(state).id\n  if (player.one === id) return 4;\n  else if(player.two === id) return 12;\n  else return 8;\n};\n\n//LOCAL\nconst isCachedMoveForThisRoom = state => (state.rooms[getActiveRoom(state)] === state.root.cachedGame.room);\nexport const getMoveSelectionsForActiveGame = state => isCachedMoveForThisRoom(state) ? state.root.cachedGame.move : null;\nexport const getMoveStatusForActiveGame = state => isCachedMoveForThisRoom(state) ? state.root.cachedGame.isMoveReadyToSubmit : false;\n"]},"metadata":{},"sourceType":"module"}