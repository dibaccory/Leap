{"ast":null,"code":"\"use strict\";\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar msgpack = __importStar(require(\"./msgpack\"));\n\nvar strong_events_1 = require(\"strong-events\");\n\nvar Connection_1 = require(\"./Connection\");\n\nvar Serializer_1 = require(\"./serializer/Serializer\");\n\nvar Protocol_1 = require(\"./Protocol\");\n\nvar Room =\n/** @class */\nfunction () {\n  function Room(name, rootSchema) {\n    var _this = this; // Public signals\n\n\n    this.onJoin = strong_events_1.createSignal();\n    this.onStateChange = strong_events_1.createSignal();\n    this.onMessage = strong_events_1.createSignal();\n    this.onError = strong_events_1.createSignal();\n    this.onLeave = strong_events_1.createSignal();\n    this.hasJoined = false;\n    this.id = null;\n    this.name = name;\n\n    if (rootSchema) {\n      this.serializer = new (Serializer_1.getSerializer(\"schema\"))();\n      this.rootSchema = rootSchema;\n      this.serializer.state = new rootSchema();\n    } else {\n      // TODO: remove default serializer. it should arrive only after JOIN_ROOM.\n      this.serializer = new (Serializer_1.getSerializer(\"fossil-delta\"))();\n    }\n\n    this.onError(function (message) {\n      return console.error(message);\n    });\n    this.onLeave(function () {\n      return _this.removeAllListeners();\n    });\n  }\n\n  Room.prototype.connect = function (endpoint) {\n    var _this = this;\n\n    this.connection = new Connection_1.Connection(endpoint, false);\n    this.connection.reconnectEnabled = false;\n    this.connection.onmessage = this.onMessageCallback.bind(this);\n\n    this.connection.onclose = function (e) {\n      if (!_this.hasJoined) {\n        console.error(\"Room connection was closed unexpectedly (\" + e.code + \"): \" + e.reason);\n\n        _this.onError.invoke(e.reason);\n\n        return;\n      }\n\n      _this.onLeave.invoke(e.code);\n    };\n\n    this.connection.onerror = function (e) {\n      console.warn(\"Room, onError (\" + e.code + \"): \" + e.reason);\n\n      _this.onError.invoke(e.reason);\n    };\n\n    this.connection.open();\n  };\n\n  Room.prototype.leave = function (consented) {\n    if (consented === void 0) {\n      consented = true;\n    }\n\n    if (this.connection) {\n      if (consented) {\n        this.connection.send([Protocol_1.Protocol.LEAVE_ROOM]);\n      } else {\n        this.connection.close();\n      }\n    } else {\n      this.onLeave.invoke(4000); // \"consented\" code\n    }\n  };\n\n  Room.prototype.send = function (data) {\n    this.connection.send([Protocol_1.Protocol.ROOM_DATA, data]);\n  };\n\n  Object.defineProperty(Room.prototype, \"state\", {\n    get: function () {\n      return this.serializer.getState();\n    },\n    enumerable: true,\n    configurable: true\n  }); // TODO: deprecate / move somewhere else\n  // this method is useful only for FossilDeltaSerializer\n\n  Room.prototype.listen = function (segments, callback, immediate) {\n    if (this.serializerId === \"schema\") {\n      console.error(\"'\" + this.serializerId + \"' serializer doesn't support .listen() method.\");\n      return;\n    } else if (!this.serializerId) {\n      console.warn(\"room.Listen() should be called after room.onJoin has been called (DEPRECATION WARNING)\");\n    }\n\n    return this.serializer.api.listen(segments, callback, immediate);\n  }; // TODO: deprecate / move somewhere else\n  // this method is useful only for FossilDeltaSerializer\n\n\n  Room.prototype.removeListener = function (listener) {\n    return this.serializer.api.removeListener(listener);\n  };\n\n  Room.prototype.removeAllListeners = function () {\n    if (this.serializer) {\n      this.serializer.teardown();\n    }\n\n    this.onJoin.clear();\n    this.onStateChange.clear();\n    this.onMessage.clear();\n    this.onError.clear();\n    this.onLeave.clear();\n  };\n\n  Room.prototype.onMessageCallback = function (event) {\n    if (!this.previousCode) {\n      var view = new DataView(event.data);\n      var code = view.getUint8(0);\n\n      if (code === Protocol_1.Protocol.JOIN_ROOM) {\n        var offset = 1;\n        this.serializerId = Protocol_1.utf8Read(view, offset);\n        offset += Protocol_1.utf8Length(this.serializerId); // get serializer implementation\n\n        var serializer = Serializer_1.getSerializer(this.serializerId);\n\n        if (!serializer) {\n          throw new Error(\"missing serializer: \" + this.serializerId);\n        } // TODO: remove this check\n\n\n        if (this.serializerId !== \"fossil-delta\" && !this.rootSchema) {\n          this.serializer = new serializer();\n        }\n\n        if (view.buffer.byteLength > offset && this.serializer.handshake) {\n          var bytes = Array.from(new Uint8Array(view.buffer.slice(offset)));\n          this.serializer.handshake(bytes);\n        }\n\n        this.hasJoined = true;\n        this.onJoin.invoke();\n      } else if (code === Protocol_1.Protocol.JOIN_ERROR) {\n        this.onError.invoke(Protocol_1.utf8Read(view, 1));\n      } else if (code === Protocol_1.Protocol.LEAVE_ROOM) {\n        this.leave();\n      } else if (code === Protocol_1.Protocol.ROOM_DATA_SCHEMA) {\n        var bytes = Array.from(new Uint8Array(event.data));\n\n        var context_1 = this.serializer.getState().constructor._context;\n\n        var type = context_1.get(bytes[1]);\n        var message = new type();\n        message.decode(bytes, {\n          offset: 2\n        });\n        this.onMessage.invoke(message);\n      } else {\n        this.previousCode = code;\n      }\n    } else {\n      if (this.previousCode === Protocol_1.Protocol.ROOM_STATE) {\n        // TODO: improve here!\n        this.setState(Array.from(new Uint8Array(event.data)));\n      } else if (this.previousCode === Protocol_1.Protocol.ROOM_STATE_PATCH) {\n        this.patch(Array.from(new Uint8Array(event.data)));\n      } else if (this.previousCode === Protocol_1.Protocol.ROOM_DATA) {\n        this.onMessage.invoke(msgpack.decode(event.data));\n      }\n\n      this.previousCode = undefined;\n    }\n  };\n\n  Room.prototype.setState = function (encodedState) {\n    this.serializer.setState(encodedState);\n    this.onStateChange.invoke(this.serializer.getState());\n  };\n\n  Room.prototype.patch = function (binaryPatch) {\n    this.serializer.patch(binaryPatch);\n    this.onStateChange.invoke(this.serializer.getState());\n  };\n\n  return Room;\n}();\n\nexports.Room = Room;","map":{"version":3,"sources":["/Users/bacchus/git/Leap/node_modules/colyseus.js/lib/Room.js"],"names":["__importStar","mod","__esModule","result","k","Object","hasOwnProperty","call","defineProperty","exports","value","msgpack","require","strong_events_1","Connection_1","Serializer_1","Protocol_1","Room","name","rootSchema","_this","onJoin","createSignal","onStateChange","onMessage","onError","onLeave","hasJoined","id","serializer","getSerializer","state","message","console","error","removeAllListeners","prototype","connect","endpoint","connection","Connection","reconnectEnabled","onmessage","onMessageCallback","bind","onclose","e","code","reason","invoke","onerror","warn","open","leave","consented","send","Protocol","LEAVE_ROOM","close","data","ROOM_DATA","get","getState","enumerable","configurable","listen","segments","callback","immediate","serializerId","api","removeListener","listener","teardown","clear","event","previousCode","view","DataView","getUint8","JOIN_ROOM","offset","utf8Read","utf8Length","Error","buffer","byteLength","handshake","bytes","Array","from","Uint8Array","slice","JOIN_ERROR","ROOM_DATA_SCHEMA","context_1","constructor","_context","type","decode","ROOM_STATE","setState","ROOM_STATE_PATCH","patch","undefined","encodedState","binaryPatch"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar msgpack = __importStar(require(\"./msgpack\"));\nvar strong_events_1 = require(\"strong-events\");\nvar Connection_1 = require(\"./Connection\");\nvar Serializer_1 = require(\"./serializer/Serializer\");\nvar Protocol_1 = require(\"./Protocol\");\nvar Room = /** @class */ (function () {\n    function Room(name, rootSchema) {\n        var _this = this;\n        // Public signals\n        this.onJoin = strong_events_1.createSignal();\n        this.onStateChange = strong_events_1.createSignal();\n        this.onMessage = strong_events_1.createSignal();\n        this.onError = strong_events_1.createSignal();\n        this.onLeave = strong_events_1.createSignal();\n        this.hasJoined = false;\n        this.id = null;\n        this.name = name;\n        if (rootSchema) {\n            this.serializer = new (Serializer_1.getSerializer(\"schema\"));\n            this.rootSchema = rootSchema;\n            this.serializer.state = new rootSchema();\n        }\n        else {\n            // TODO: remove default serializer. it should arrive only after JOIN_ROOM.\n            this.serializer = new (Serializer_1.getSerializer(\"fossil-delta\"));\n        }\n        this.onError(function (message) { return console.error(message); });\n        this.onLeave(function () { return _this.removeAllListeners(); });\n    }\n    Room.prototype.connect = function (endpoint) {\n        var _this = this;\n        this.connection = new Connection_1.Connection(endpoint, false);\n        this.connection.reconnectEnabled = false;\n        this.connection.onmessage = this.onMessageCallback.bind(this);\n        this.connection.onclose = function (e) {\n            if (!_this.hasJoined) {\n                console.error(\"Room connection was closed unexpectedly (\" + e.code + \"): \" + e.reason);\n                _this.onError.invoke(e.reason);\n                return;\n            }\n            _this.onLeave.invoke(e.code);\n        };\n        this.connection.onerror = function (e) {\n            console.warn(\"Room, onError (\" + e.code + \"): \" + e.reason);\n            _this.onError.invoke(e.reason);\n        };\n        this.connection.open();\n    };\n    Room.prototype.leave = function (consented) {\n        if (consented === void 0) { consented = true; }\n        if (this.connection) {\n            if (consented) {\n                this.connection.send([Protocol_1.Protocol.LEAVE_ROOM]);\n            }\n            else {\n                this.connection.close();\n            }\n        }\n        else {\n            this.onLeave.invoke(4000); // \"consented\" code\n        }\n    };\n    Room.prototype.send = function (data) {\n        this.connection.send([Protocol_1.Protocol.ROOM_DATA, data]);\n    };\n    Object.defineProperty(Room.prototype, \"state\", {\n        get: function () {\n            return this.serializer.getState();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // TODO: deprecate / move somewhere else\n    // this method is useful only for FossilDeltaSerializer\n    Room.prototype.listen = function (segments, callback, immediate) {\n        if (this.serializerId === \"schema\") {\n            console.error(\"'\" + this.serializerId + \"' serializer doesn't support .listen() method.\");\n            return;\n        }\n        else if (!this.serializerId) {\n            console.warn(\"room.Listen() should be called after room.onJoin has been called (DEPRECATION WARNING)\");\n        }\n        return this.serializer.api.listen(segments, callback, immediate);\n    };\n    // TODO: deprecate / move somewhere else\n    // this method is useful only for FossilDeltaSerializer\n    Room.prototype.removeListener = function (listener) {\n        return this.serializer.api.removeListener(listener);\n    };\n    Room.prototype.removeAllListeners = function () {\n        if (this.serializer) {\n            this.serializer.teardown();\n        }\n        this.onJoin.clear();\n        this.onStateChange.clear();\n        this.onMessage.clear();\n        this.onError.clear();\n        this.onLeave.clear();\n    };\n    Room.prototype.onMessageCallback = function (event) {\n        if (!this.previousCode) {\n            var view = new DataView(event.data);\n            var code = view.getUint8(0);\n            if (code === Protocol_1.Protocol.JOIN_ROOM) {\n                var offset = 1;\n                this.serializerId = Protocol_1.utf8Read(view, offset);\n                offset += Protocol_1.utf8Length(this.serializerId);\n                // get serializer implementation\n                var serializer = Serializer_1.getSerializer(this.serializerId);\n                if (!serializer) {\n                    throw new Error(\"missing serializer: \" + this.serializerId);\n                }\n                // TODO: remove this check\n                if (this.serializerId !== \"fossil-delta\" && !this.rootSchema) {\n                    this.serializer = new serializer();\n                }\n                if (view.buffer.byteLength > offset && this.serializer.handshake) {\n                    var bytes = Array.from(new Uint8Array(view.buffer.slice(offset)));\n                    this.serializer.handshake(bytes);\n                }\n                this.hasJoined = true;\n                this.onJoin.invoke();\n            }\n            else if (code === Protocol_1.Protocol.JOIN_ERROR) {\n                this.onError.invoke(Protocol_1.utf8Read(view, 1));\n            }\n            else if (code === Protocol_1.Protocol.LEAVE_ROOM) {\n                this.leave();\n            }\n            else if (code === Protocol_1.Protocol.ROOM_DATA_SCHEMA) {\n                var bytes = Array.from(new Uint8Array(event.data));\n                var context_1 = this.serializer.getState().constructor._context;\n                var type = context_1.get(bytes[1]);\n                var message = new type();\n                message.decode(bytes, { offset: 2 });\n                this.onMessage.invoke(message);\n            }\n            else {\n                this.previousCode = code;\n            }\n        }\n        else {\n            if (this.previousCode === Protocol_1.Protocol.ROOM_STATE) {\n                // TODO: improve here!\n                this.setState(Array.from(new Uint8Array(event.data)));\n            }\n            else if (this.previousCode === Protocol_1.Protocol.ROOM_STATE_PATCH) {\n                this.patch(Array.from(new Uint8Array(event.data)));\n            }\n            else if (this.previousCode === Protocol_1.Protocol.ROOM_DATA) {\n                this.onMessage.invoke(msgpack.decode(event.data));\n            }\n            this.previousCode = undefined;\n        }\n    };\n    Room.prototype.setState = function (encodedState) {\n        this.serializer.setState(encodedState);\n        this.onStateChange.invoke(this.serializer.getState());\n    };\n    Room.prototype.patch = function (binaryPatch) {\n        this.serializer.patch(binaryPatch);\n        this.onStateChange.invoke(this.serializer.getState());\n    };\n    return Room;\n}());\nexports.Room = Room;\n"]},"metadata":{},"sourceType":"script"}