{"ast":null,"code":"var _jsxFileName = \"/Users/bacchus/git/Leap/client/src/containers/Room/index.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bool, array, func, string, number, object } from 'prop-types';\nimport { getUsers, getGame, getHost, getMe, getMoveSelectionsForActiveGame, getMoveStatusForActiveGame } from '../../selectors/';\nimport { bindActionCreators } from 'redux';\nimport { submitMove, enter, exit } from '../../actions/room';\nimport Game from '../../components/Game';\n\nconst Room = ({\n  active,\n  roomID,\n  me,\n  users,\n  host,\n  game,\n  move,\n  isMoveReadyToSubmit\n}) => {\n  move = move || {\n    to: undefined,\n    from: undefined,\n    captured: undefined\n  };\n  if (active) enterRoom(me, roomID);\n  return React.createElement(\"div\", {\n    className: \"room-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(Game, {\n    game: game,\n    move: move,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: () => {\n      isMoveReadyToSubmit ? submitMove(game, move) : console.log('boopies');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, \"Play\"));\n}; //<PlayerHeader user={}/>\n//\n//<PlayerHeader user={}/>\n\n\nRoom.propTypes = {\n  me: object,\n  users: object.isRequired,\n  host: string.isRequired,\n  //userID string?\n  game: object.isRequired,\n  move: object,\n  isMoveReadyToSubmit: bool\n}; //TODO: make selectors\n\nconst mapStateToProps = state => ({\n  me: getMe(state),\n  users: getUsers(state),\n  host: getHost(state),\n  game: getGame(state),\n  move: getMoveSelectionsForActiveGame(state),\n  isMoveReadyToSubmit: getMoveStatusForActiveGame(state) //errorMessage: getErrorMessage(state),\n  //modalMessage: getModalMessage(state),\n\n});\n\nconst actions = {\n  submitMove,\n  enter,\n  exit\n};\n\nconst mapDispatchToProps = dispatch => bindActionCreators(actions, dispatch);\n\nexport default connect(mapStateToProps)(Room);","map":{"version":3,"sources":["/Users/bacchus/git/Leap/client/src/containers/Room/index.js"],"names":["React","Component","connect","bool","array","func","string","number","object","getUsers","getGame","getHost","getMe","getMoveSelectionsForActiveGame","getMoveStatusForActiveGame","bindActionCreators","submitMove","enter","exit","Game","Room","active","roomID","me","users","host","game","move","isMoveReadyToSubmit","to","undefined","from","captured","enterRoom","console","log","propTypes","isRequired","mapStateToProps","state","actions","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,IAAtB,EAA4BC,MAA5B,EAAoCC,MAApC,EAA4CC,MAA5C,QAA0D,YAA1D;AACA,SAASC,QAAT,EAAmBC,OAAnB,EAA4BC,OAA5B,EAAqCC,KAArC,EAA4CC,8BAA5C,EAA4EC,0BAA5E,QAA8G,kBAA9G;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,UAAT,EAAqBC,KAArB,EAA4BC,IAA5B,QAAwC,oBAAxC;AACA,OAAOC,IAAP,MAAiB,uBAAjB;;AAEA,MAAMC,IAAI,GAAG,CAAC;AACZC,EAAAA,MADY;AAEZC,EAAAA,MAFY;AAGZC,EAAAA,EAHY;AAIZC,EAAAA,KAJY;AAKZC,EAAAA,IALY;AAMZC,EAAAA,IANY;AAOZC,EAAAA,IAPY;AAQZC,EAAAA;AARY,CAAD,KASP;AACJD,EAAAA,IAAI,GAAGA,IAAI,IAAI;AAACE,IAAAA,EAAE,EAAEC,SAAL;AAAgBC,IAAAA,IAAI,EAAED,SAAtB;AAAiCE,IAAAA,QAAQ,EAAEF;AAA3C,GAAf;AACA,MAAIT,MAAJ,EAAYY,SAAS,CAACV,EAAD,EAAKD,MAAL,CAAT;AACZ,SACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAEI,IAAZ;AAAkB,IAAA,IAAI,EAAEC,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAQ,IAAA,OAAO,EAAE,MAAM;AAACC,MAAAA,mBAAmB,GAAGZ,UAAU,CAACU,IAAD,EAAOC,IAAP,CAAb,GAA2BO,OAAO,CAACC,GAAR,CAAY,SAAZ,CAA9C;AAAqE,KAA7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,CADF;AAMD,CAlBD,C,CAmBA;AACA;AACA;;;AACAf,IAAI,CAACgB,SAAL,GAAiB;AACfb,EAAAA,EAAE,EAAEf,MADW;AAEfgB,EAAAA,KAAK,EAAEhB,MAAM,CAAC6B,UAFC;AAGfZ,EAAAA,IAAI,EAAEnB,MAAM,CAAC+B,UAHE;AAGU;AACzBX,EAAAA,IAAI,EAAElB,MAAM,CAAC6B,UAJE;AAKfV,EAAAA,IAAI,EAAEnB,MALS;AAMfoB,EAAAA,mBAAmB,EAAEzB;AANN,CAAjB,C,CAQA;;AACA,MAAMmC,eAAe,GAAGC,KAAK,KAAK;AAChChB,EAAAA,EAAE,EAAEX,KAAK,CAAC2B,KAAD,CADuB;AAEhCf,EAAAA,KAAK,EAAEf,QAAQ,CAAC8B,KAAD,CAFiB;AAGhCd,EAAAA,IAAI,EAAEd,OAAO,CAAC4B,KAAD,CAHmB;AAIhCb,EAAAA,IAAI,EAAEhB,OAAO,CAAC6B,KAAD,CAJmB;AAKhCZ,EAAAA,IAAI,EAAEd,8BAA8B,CAAC0B,KAAD,CALJ;AAMhCX,EAAAA,mBAAmB,EAAEd,0BAA0B,CAACyB,KAAD,CANf,CAOhC;AACA;;AARgC,CAAL,CAA7B;;AAWA,MAAMC,OAAO,GAAG;AACdxB,EAAAA,UADc;AAEdC,EAAAA,KAFc;AAGdC,EAAAA;AAHc,CAAhB;;AAMA,MAAMuB,kBAAkB,GAAGC,QAAQ,IAAI3B,kBAAkB,CAACyB,OAAD,EAAUE,QAAV,CAAzD;;AAEA,eAAexC,OAAO,CAACoC,eAAD,CAAP,CAAyBlB,IAAzB,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bool, array, func, string, number, object } from 'prop-types';\nimport { getUsers, getGame, getHost, getMe, getMoveSelectionsForActiveGame, getMoveStatusForActiveGame } from '../../selectors/';\nimport { bindActionCreators } from 'redux';\nimport { submitMove, enter, exit } from '../../actions/room';\nimport Game from '../../components/Game';\n\nconst Room = ({\n  active,\n  roomID,\n  me,\n  users,\n  host,\n  game,\n  move,\n  isMoveReadyToSubmit,\n}) => {\n  move = move || {to: undefined, from: undefined, captured: undefined};\n  if (active) enterRoom(me, roomID);\n  return (\n    <div className=\"room-container\">\n      <Game game={game} move={move}/>\n      <button onClick={() => {isMoveReadyToSubmit ? submitMove(game, move): console.log('boopies')} }>Play</button>\n    </div>\n  );\n}\n//<PlayerHeader user={}/>\n//\n//<PlayerHeader user={}/>\nRoom.propTypes = {\n  me: object,\n  users: object.isRequired,\n  host: string.isRequired, //userID string?\n  game: object.isRequired,\n  move: object,\n  isMoveReadyToSubmit: bool,\n};\n//TODO: make selectors\nconst mapStateToProps = state => ({\n  me: getMe(state),\n  users: getUsers(state),\n  host: getHost(state),\n  game: getGame(state),\n  move: getMoveSelectionsForActiveGame(state),\n  isMoveReadyToSubmit: getMoveStatusForActiveGame(state),\n  //errorMessage: getErrorMessage(state),\n  //modalMessage: getModalMessage(state),\n});\n\nconst actions = {\n  submitMove,\n  enter,\n  exit,\n};\n\nconst mapDispatchToProps = dispatch => bindActionCreators(actions, dispatch);\n\nexport default connect(mapStateToProps)(Room);\n"]},"metadata":{},"sourceType":"module"}