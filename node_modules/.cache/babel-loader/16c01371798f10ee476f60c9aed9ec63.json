{"ast":null,"code":"var util = require('./util.js'); //single, phase, jump, super-jump\n\n/*\nadj: adjacent\nphase: change portal side\nleap: capture piece while jumping through a portal\njitch: jump, then phase\nswump: switch, then jump\n}\n\nREFACTOR CHANGES:\nLeap.js -> Game.js\n\t<Leap> -> <GameController>\nboard.js -> leap.js\n\n\nBITWISE:\n\nBOARD:\nbit\t\t\t\titem\n0-1\t\t\t\tcellType\t{regular, phase} x {highlight, no highlight}\n2-3\t\t\tcellState\t\t{00: empty, 10: SPECIAL, 01: p1, 11: p2, }   NOTE, if '10' for bits 1 and 2, then it should be a SPECIAL THING???  lmao what if a piece can be moved by either player for a few turns?\n4\t\t\t\t\tisCloned\n5-9\t\t\t\tkey\t\t\t\tIf piece on cell, this is index to reach it\n\nboard[i] = (key << 4 | isCloned << 3 | cellState << 1 | cellType);\nfor i = row * SIZE + col \t\twhere row, col wtr a given piece\n\nPIECE INDEX:\nbit \t\t\titem\n0-2\t\t\t\tcol\n3-(5,6)\t\trow\n\nboard[i] = (row << 4 | col);\nfor i = SIZE*SIZE + key\t\t\twhere\n\n\nhow to store moves\nmoves[i] = [ 0 <= board_index < SIZE*SIZE, ... , ... ] all possible moves for associated piece.\nfor i = SIZE*SIZE + key\n\n\n\nindex = cell number\nkey = piece index\n\n*/\n//can I generate layouts on seeds? lmao\n\n\nfunction Board(len, phaseLayout) {\n  function getBitShift(b) {\n    return b >> 1 ? 1 + getBitShift(b >> 1) : -1;\n  }\n\n  this.p1 = 4;\n  this.p2 = 12;\n  this.len = len;\n  this.area = len * len;\n  this.BIT_SHIFT = getBitShift(len);\n  this.BIT_LENGTH = 2 ** this.BIT_SHIFT - 1;\n  (this.board = []).length = this.area;\n  (this.moves = []).length = 4 * len;\n  this.board.fill(0);\n  this.bufferSize = 1; //how many rows between the pieces' starting location and the nearest phases\n\n  this.init(phaseLayout); //this.update();\n}\n\nBoard.prototype.init = function (layout) {\n  let pi = 0; //piece Index (ID)\n\n  const len = this.len;\n\n  const calcPhases = index => {\n    let k = 0;\n\n    while (k < util.phaseLayouts[layout].length) {\n      if ((index ^ util.phaseLayouts[layout][k]) === 0) return 1;\n      k++;\n    }\n\n    return 0;\n  };\n\n  for (let i = 0; i < len; i++) {\n    this.board[i] = pi << 5 | this.p1; //00000 0 01 00\n\n    this.initPiece(pi);\n    this.board[i + (len - 1) * len] = pi + 2 * len << 5 | this.p2; //10000 0 11 00\n\n    this.initPiece(pi + 2 * len);\n    pi++;\n\n    for (let j = 1 + this.bufferSize; j < len - 1 - this.bufferSize; j++) {\n      this.board[i + j * len] |= calcPhases(i + j * len);\n    }\n  }\n};\n\nBoard.prototype.initPiece = function (pi) {\n  this.moves[pi] = [];\n};\n\nBoard.prototype.getPlayer = function (row, col) {\n  return this.board[row * this.len + col];\n};\n\nBoard.prototype.update = function (newPiece) {\n  if (newPiece) {\n    //find out which player this piece belongs to then add it within that player's key range (00000)\n    this.board = this.board.map(row => row.map((cell, j) => {\n      if (cell.who != null) {\n        //increment all pi in board after piecesSeparator by one\n        if (cell.who >= this.piecesSeparator) cell.who++; //if piece alive, keep on board\n\n        return this.pieces[cell.who].alive ? {\n          who: cell.who,\n          move: false\n        } : {\n          who: null,\n          move: false\n        };\n      } else return {\n        who: null,\n        move: false\n      };\n    }));\n  } else {\n    this.board = this.board.map(row => row.map((cell, j) => cell.who != null ? this.pieces[cell.who].alive ? {\n      who: cell.who,\n      move: false\n    } : {\n      who: null,\n      move: false\n    } : {\n      who: null,\n      move: false\n    }));\n  }\n};\n/*==========\t\t\t\t\t\t\t\t\t\t\tCLONE\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n//Calls every time a clone is made\n\n\nBoard.prototype.insertAtSeparationIndex = function () {\n  for (let pi = this.piecesSeparator; pi < this.pieces.length; pi++) {\n    //Finds index that separates p1 and p2 pieces\n    if (this.pieces[pi].player !== this.p2) {\n      this.piecesSeparator = pi; //update\n\n      return pi;\n    }\n  }\n};\n\nBoard.prototype.makeClone = function (pi, row, col) {\n  /*\n  getPlayer bit\n  */\n  this.board[row * this.len + col] |= this.getPlayer(row, col);\n  this.updateBoard(true);\n  this.board[row][col].who = this.piecesSeparator;\n  return true;\n};\n\nBoard.prototype.canClone = function (pi) {\n  let p = this.pieces[pi];\n  return !p.cloned && p.col < 7 && p.col > 0 && (p.player === this.p1 && !p.row || p.player === this.p2 && p.row === 7);\n};\n\nBoard.prototype.isCloneSpawn = function (pi, row, col) {\n  return this.canClone(pi) && this.board[row][col].who === null;\n};\n/*==========\t\t\t\t\t\t\t\t\t\t\tMOVES\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n// Board.prototype.getPlayer = function (pi) {\n// \treturn this.pieces[pi].player;\n// }\n\n\nBoard.prototype.isLeap = function (p, rowIncr, colIncr, isPhase, cellAdj, bypassCondition) {\n  //if neighbor cell is a phase, leap_cell clear, and (enemy piece on phaseAdj XOR enemy piece on phaseFar)\n  let destinationCell = this.board[7 - p.row][7 - p.col];\n\n  if (isPhase && !destinationCell.who) {\n    let phaseAdj = cellAdj.who;\n    let phaseFar = this.board[7 - (p.row + rowIncr)][7 - (p.col + colIncr)].who;\n\n    if ((phaseAdj || phaseFar) && !(phaseAdj && phaseFar)) {\n      //xor filter. Only one may be true\n      let capt = phaseAdj ? phaseAdj : phaseFar; //if 0, add to destinationCell.move, if 1,\n\n      if (bypassCondition) return true;else destinationCell.move = capt;\n    }\n  }\n};\n\nBoard.prototype.isJump = function (p, rowIncr, colIncr, cellAdj, bypassCondition) {\n  //if adj cell occupied, jumpCell in bounds, jumpCell clear, and jumpCell has enemy piece\n  if (util.inBounds(p.row + rowIncr * 2, p.col + colIncr * 2)) {\n    let destinationCell = this.board[p.row + rowIncr * 2][p.col + colIncr * 2];\n\n    if (this.getPlayer(cellAdj.who) !== p.player && destinationCell.who === null) {\n      if (bypassCondition % 3) return true;else destinationCell.move = cellAdj.who;\n    }\n  }\n};\n\nBoard.prototype.isPhase = function (i, bypassCondition) {\n  let row = 7 - (i >> this.BIT_SHIFT) << this.BIT_SHIFT,\n      col = 7 - (i & this.BIT_LENGTH),\n      len = this.len - 1;\n  let isPhase = util.cellType(row, col) > 1;\n  let canPhase = this.board[len - row];\n  let destinationCell = this.board[7 - p.row][7 - p.col];\n\n  if (isPhase && destinationCell.who === null) {\n    if (bypassCondition % 3) return true;else destinationCell.move = true;\n  }\n};\n\nBoard.prototype.getCloneSpawns = function (p, bypassCondition) {\n  let row = p.player === this.p1 ? 7 : 0;\n\n  for (let col = 1; col < 7; col++) {\n    let destinationCell = this.board[row][col];\n\n    if (destinationCell.who === null) {\n      if (bypassCondition % 3) return true;else destinationCell.move = true;\n    }\n  }\n};\n\nBoard.prototype.getMovesInDirection = function (p, bypassCondition, r, c) {\n  //check adjacent cells of piece p wrt the boundary\n  if (util.inBounds(p.row + r, p.col + c) && (r || c)) {\n    let cellAdj = this.board[p.row + r][p.col + c];\n    let isPhase = util.cellType(p.row + r, p.col + c) > 1;\n    if (this.isLeap(p, r, c, isPhase, cellAdj, bypassCondition)) return true;\n\n    if (cellAdj.who !== null) {\n      if (this.isJump(p, r, c, cellAdj, bypassCondition)) return true;\n    } else if (bypassCondition % 3 % 2) return true; //adjacent moves\n    else if (!bypassCondition) cellAdj.move = true;\n  }\n\n  return false;\n};\n/* bypassCondition (HIGHLIGHT BYPASS CONDITION):\n\t\tundefined - default (Store all),\n\t\t1 - bypass all,\n\t\t2 - bypass continuable moves,\n\t\t3 - store continuable moves\n*/\n\n\nBoard.prototype.getMoves = function (index, bypassCondition, r, c) {\n  if (this.isPhase(index, bypassCondition)) return true;\n  if (this.canClone(index) && this.getCloneSpawns(index, bypassCondition)) return true;\n\n  if (r != null && c != null) {\n    //if move continuation\n    if (this.getMovesInDirection(index, bypassCondition, r, c)) return true;\n  } else {\n    for (r = -1; r < 2; r++) for (c = -1; c < 2; c++) {\n      //initial moves\n      if (this.getMovesInDirection(index, bypassCondition, r, c)) return true;\n    }\n  }\n\n  return false;\n}; //Performs move. returns true if caught piece in process, else false\n\n\nBoard.prototype.doMove = function (pi, row, col) {\n  let p = this.pieces[pi]; //begin move\n\n  this.board[p.row][p.col].who = null;\n  let destinationCell = this.board[row][col];\n  let caught = typeof destinationCell.move === \"number\" ? destinationCell.move : false; //caught piece index\n  // moveDirection is defined if and only if any of the following is true (for moving piece p):\n\n  let moveDirection; // (1) p caught a piece\n\n  if (caught) {\n    let c = this.pieces[caught];\n    c.alive = false;\n    this.board[c.row][c.col].who = null; //return direction of move\n    //If leap, then c adjacent at start XOR c adjacent at end\n    //Check adjacency of moving piece to captured piece on starting position and ending position\n\n    let cellAdjStartPos = Math.abs(c.row - p.row) < 2 && Math.abs(c.col - p.col) < 2;\n    let cellAdjEndPos = Math.abs(row - c.row) < 2 && Math.abs(col - c.col) < 2;\n    moveDirection = cellAdjStartPos && cellAdjEndPos ? {\n      rowIncr: Math.sign(row - c.row),\n      colIncr: Math.sign(col - c.col)\n    } //jump\n    : cellAdjStartPos ? {\n      rowIncr: Math.sign(c.row - p.row),\n      colIncr: Math.sign(c.col - p.row)\n    } //leap-> piece adj to capture on start\n    : {\n      rowIncr: Math.sign(row - c.row),\n      colIncr: Math.sign(col - c.col)\n    };\n  } // (2) p LANDS on a phase cell. That is, this move is not a phase.\n  else if (!this.samePhase(p, {\n      row: row,\n      col: col\n    })) moveDirection = {\n      rowIncr: 0,\n      colIncr: 0\n    }; //end move\n\n\n  this.board[row][col].who = pi;\n  p.row = row;\n  p.col = col; // (3) p is able to be cloned\n\n  if (this.canClone(pi)) moveDirection = {\n    rowIncr: 0,\n    colIncr: 0\n  };\n  this.updateBoard();\n  return moveDirection;\n};\n/*==========\t\t\t\t\t\t\t\t\t\t\tINTEGRITY\t\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n\n\nBoard.prototype.samePhase = function (from, to) {\n  let isDestinationPhase = util.cellType(to.row, to.col);\n  return isDestinationPhase > 1 && isDestinationPhase === util.cellType(from.row, from.col);\n};\n\nBoard.prototype.canContinueMove = function (pi, dir) {\n  return dir ? this.getMoves(pi, 2, dir.rowIncr, dir.colIncr) : false;\n};\n\nBoard.prototype.hasMoves = function (pi) {\n  return this.getMoves(pi, 1);\n}; //Player has no more moves when (1): all player's pieces are dead (2): every piece has no moves\n\n\nBoard.prototype.movesLeft = function (player) {\n  for (let pi = 0; pi < this.pieces.length; pi++) {\n    let p = this.pieces[pi];\n\n    if (p.alive && p.player === player) {\n      if (this.hasMoves(pi)) return true;\n    }\n  }\n\n  return false;\n};\n\nBoard.prototype.validMove = function (row, col) {\n  return this.board[row][col].move;\n};\n\nmodule.exports = Board;","map":{"version":3,"sources":["/Users/bacchus/git/Leap/src/js/board.js"],"names":["util","require","Board","len","phaseLayout","getBitShift","b","p1","p2","area","BIT_SHIFT","BIT_LENGTH","board","length","moves","fill","bufferSize","init","prototype","layout","pi","calcPhases","index","k","phaseLayouts","i","initPiece","j","getPlayer","row","col","update","newPiece","map","cell","who","piecesSeparator","pieces","alive","move","insertAtSeparationIndex","player","makeClone","updateBoard","canClone","p","cloned","isCloneSpawn","isLeap","rowIncr","colIncr","isPhase","cellAdj","bypassCondition","destinationCell","phaseAdj","phaseFar","capt","isJump","inBounds","cellType","canPhase","getCloneSpawns","getMovesInDirection","r","c","getMoves","doMove","caught","moveDirection","cellAdjStartPos","Math","abs","cellAdjEndPos","sign","samePhase","from","to","isDestinationPhase","canContinueMove","dir","hasMoves","movesLeft","validMove","module","exports"],"mappings":"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","sourcesContent":["var util = require('./util.js');\n//single, phase, jump, super-jump\n/*\nadj: adjacent\nphase: change portal side\nleap: capture piece while jumping through a portal\njitch: jump, then phase\nswump: switch, then jump\n}\n\nREFACTOR CHANGES:\nLeap.js -> Game.js\n\t<Leap> -> <GameController>\nboard.js -> leap.js\n\n\nBITWISE:\n\nBOARD:\nbit\t\t\t\titem\n0-1\t\t\t\tcellType\t{regular, phase} x {highlight, no highlight}\n2-3\t\t\tcellState\t\t{00: empty, 10: SPECIAL, 01: p1, 11: p2, }   NOTE, if '10' for bits 1 and 2, then it should be a SPECIAL THING???  lmao what if a piece can be moved by either player for a few turns?\n4\t\t\t\t\tisCloned\n5-9\t\t\t\tkey\t\t\t\tIf piece on cell, this is index to reach it\n\nboard[i] = (key << 4 | isCloned << 3 | cellState << 1 | cellType);\nfor i = row * SIZE + col \t\twhere row, col wtr a given piece\n\nPIECE INDEX:\nbit \t\t\titem\n0-2\t\t\t\tcol\n3-(5,6)\t\trow\n\nboard[i] = (row << 4 | col);\nfor i = SIZE*SIZE + key\t\t\twhere\n\n\nhow to store moves\nmoves[i] = [ 0 <= board_index < SIZE*SIZE, ... , ... ] all possible moves for associated piece.\nfor i = SIZE*SIZE + key\n\n\n\nindex = cell number\nkey = piece index\n\n*/\n\n\n//can I generate layouts on seeds? lmao\n\n\nfunction Board(len, phaseLayout) {\n\tfunction getBitShift(b) {\n\t\treturn (b >> 1) ? (1 + getBitShift(b >> 1)) : -1;\n\t}\n\tthis.p1 = 4;\n\tthis.p2 = 12;\n\n\tthis.len = len;\n\tthis.area = len*len;\n\tthis.BIT_SHIFT = getBitShift(len);\n\tthis.BIT_LENGTH = 2**this.BIT_SHIFT - 1;\n\n\t(this.board = []).length = this.area;\n\t(this.moves = []).length = 4*len;\n\n\tthis.board.fill(0);\n\tthis.bufferSize = 1;\t//how many rows between the pieces' starting location and the nearest phases\n\tthis.init(phaseLayout);\n\t//this.update();\n}\n\n\n\nBoard.prototype.init = function (layout) {\n    let pi=0; //piece Index (ID)\n\t\tconst len = this.len;\n\n\t\tconst calcPhases = (index) => {\n\t\t\tlet k = 0;\n\t\t\twhile(k<util.phaseLayouts[layout].length) {\n\t\t\t\tif ( (index^util.phaseLayouts[layout][k]) === 0 ) return 1;\n\t\t\t\tk++;\n\t\t\t}\n\t\t\treturn 0;\n\t\t};\n\n\t\tfor(let i=0; i<len; i++) {\n\t\t\tthis.board[i] = ( (pi << 5) | this.p1); //00000 0 01 00\n\t\t\tthis.initPiece(pi);\n\t\t\tthis.board[i + (len-1)*len] = ( (pi + 2*len << 5) | this.p2); //10000 0 11 00\n\t\t\tthis.initPiece(pi + 2*len);\n\t\t\tpi++;\n\n\t\t\tfor(let j=1+this.bufferSize; j<len-1-this.bufferSize; j++) {\n\t\t\t\tthis.board[i + j*len] |= calcPhases(i+j*len);\n\t\t\t}\n\t\t}\n}\n\nBoard.prototype.initPiece = function (pi) {\n\tthis.moves[pi] = [];\n}\n\nBoard.prototype.getPlayer = function (row, col) {\n\treturn this.board[row*this.len + col];\n}\n\nBoard.prototype.update = function (newPiece) {\n\tif (newPiece) {\n\t\t//find out which player this piece belongs to then add it within that player's key range (00000)\n\t\tthis.board = this.board.map(row => row.map((cell, j) => {\n\t\t\tif (cell.who != null) { //increment all pi in board after piecesSeparator by one\n\t\t\t\tif (cell.who >= this.piecesSeparator) cell.who++;\n\t\t\t\t//if piece alive, keep on board\n\t\t\t\treturn this.pieces[cell.who].alive ? {who: cell.who, move:false} : {who: null, move:false};\n\t\t\t} else return {who: null, move: false};\n\t\t}));\n\t} else {\n\t\tthis.board = this.board.map(row => row.map((cell, j) =>\n\t\t\t(cell.who != null)\n\t\t\t? (this.pieces[cell.who].alive\n\t\t\t\t? {who: cell.who, move:false}\n\t\t\t\t: {who: null, move:false})\n\t\t\t: {who: null, move: false}\n\t\t));\n\t}\n}\n\n\n\n/*==========\t\t\t\t\t\t\t\t\t\t\tCLONE\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n\n//Calls every time a clone is made\nBoard.prototype.insertAtSeparationIndex = function () {\n\tfor(let pi=this.piecesSeparator; pi<this.pieces.length; pi++) {\n\t\t//Finds index that separates p1 and p2 pieces\n\t\tif(this.pieces[pi].player !== this.p2) {\n\t\t\tthis.piecesSeparator = pi; //update\n\t\t\treturn pi;\n\t\t}\n\t}\n}\n\nBoard.prototype.makeClone = function (pi, row, col) {\n\t/*\n\tgetPlayer bit\n\t*/\n\tthis.board[row*this.len + col] |= this.getPlayer(row, col)\n\tthis.updateBoard(true);\n\tthis.board[row][col].who = this.piecesSeparator;\n\treturn true;\n}\n\nBoard.prototype.canClone = function (pi) {\n\tlet p = this.pieces[pi];\n\treturn (!p.cloned && p.col < 7 && p.col > 0\n\t\t&& ( (p.player === this.p1 && !p.row)\n\t\t|| (p.player === this.p2 && p.row === 7) ));\n}\n\nBoard.prototype.isCloneSpawn = function (pi, row, col) {\n\treturn this.canClone(pi) && this.board[row][col].who === null;\n}\n\n/*==========\t\t\t\t\t\t\t\t\t\t\tMOVES\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n\n// Board.prototype.getPlayer = function (pi) {\n// \treturn this.pieces[pi].player;\n// }\n\nBoard.prototype.isLeap = function (p, rowIncr, colIncr, isPhase, cellAdj, bypassCondition) {\n\t//if neighbor cell is a phase, leap_cell clear, and (enemy piece on phaseAdj XOR enemy piece on phaseFar)\n\tlet destinationCell = this.board[7 - p.row][7 - p.col];\n\tif(isPhase && !destinationCell.who) {\n\t\tlet phaseAdj = cellAdj.who;\n\t\tlet phaseFar = this.board[7 - (p.row + rowIncr)][7 - (p.col + colIncr)].who;\n\t\tif((phaseAdj || phaseFar) && !(phaseAdj && phaseFar)) { //xor filter. Only one may be true\n\t\t\tlet capt = phaseAdj ? phaseAdj : phaseFar;\n\t\t\t//if 0, add to destinationCell.move, if 1,\n\t\t\tif (bypassCondition) return true;\n\t\t\telse destinationCell.move = capt;\n\t\t}\n\t}\n}\n\nBoard.prototype.isJump = function (p, rowIncr, colIncr, cellAdj, bypassCondition) {\n\t//if adj cell occupied, jumpCell in bounds, jumpCell clear, and jumpCell has enemy piece\n\tif(util.inBounds(p.row + rowIncr*2, p.col + colIncr*2)) {\n\t\tlet destinationCell = this.board[p.row + rowIncr*2][p.col + colIncr*2];\n\t\tif (this.getPlayer(cellAdj.who) !== p.player && destinationCell.who === null) {\n\t\t\tif(bypassCondition%3) return true;\n\t\t\telse destinationCell.move = cellAdj.who;\n\t\t}\n\t}\n}\n\nBoard.prototype.isPhase = function (i, bypassCondition) {\n\tlet row = ((7 - (i >> this.BIT_SHIFT)) << this.BIT_SHIFT ), col = 7 - (i & this.BIT_LENGTH), len= this.len - 1;\n\tlet isPhase = util.cellType(row, col) > 1;\n\tlet canPhase = this.board[len - row];\n\tlet destinationCell = this.board[7 - p.row][7 - p.col];\n\tif(isPhase && destinationCell.who === null) {\n\t\tif (bypassCondition%3) return true;\n\t\telse destinationCell.move = true;\n\t}\n}\n\nBoard.prototype.getCloneSpawns = function (p, bypassCondition) {\n\tlet row = p.player === this.p1 ? 7 : 0;\n\tfor(let col=1; col<7;col++) {\n\t\tlet destinationCell = this.board[row][col];\n\t\tif (destinationCell.who === null) {\n\t\t\tif (bypassCondition%3) return true;\n\t\t\telse destinationCell.move = true;\n\t\t}\n\t}\n}\n\nBoard.prototype.getMovesInDirection = function (p, bypassCondition, r, c) {\n\t//check adjacent cells of piece p wrt the boundary\n\tif(util.inBounds(p.row + r, p.col + c) && (r || c)) {\n\t\tlet cellAdj = this.board[p.row + r][p.col + c];\n\t\tlet isPhase = util.cellType(p.row + r, p.col + c) > 1;\n\n\t\tif (this.isLeap(p, r, c, isPhase, cellAdj, bypassCondition)) return true;\n\t\tif (cellAdj.who !== null) {\n\t\t\tif (this.isJump(p, r, c, cellAdj, bypassCondition)) return true;\n\t\t}\n\t\telse if (bypassCondition%3%2) return true;\t//adjacent moves\n\t\telse if (!bypassCondition) cellAdj.move = true;\n\t}\n\treturn false;\n}\n\n/* bypassCondition (HIGHLIGHT BYPASS CONDITION):\n\t\tundefined - default (Store all),\n\t\t1 - bypass all,\n\t\t2 - bypass continuable moves,\n\t\t3 - store continuable moves\n*/\nBoard.prototype.getMoves = function (index, bypassCondition, r, c) {\n\n\tif (this.isPhase(index, bypassCondition)) return true;\n\tif (this.canClone(index) && this.getCloneSpawns(index, bypassCondition)) return true;\n\n\tif (r != null && c != null) { //if move continuation\n\t\tif (this.getMovesInDirection(index, bypassCondition, r, c)) return true;\n\t} else {\n\t\tfor(r=-1;r<2;r++) for(c=-1;c<2; c++) { //initial moves\n\t\t\tif (this.getMovesInDirection(index, bypassCondition, r, c)) return true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n//Performs move. returns true if caught piece in process, else false\nBoard.prototype.doMove = function (pi, row, col) {\n\tlet p = this.pieces[pi];\n\t//begin move\n\tthis.board[p.row][p.col].who = null;\n\n\tlet destinationCell = this.board[row][col];\n\tlet caught = typeof(destinationCell.move) === \"number\" ? destinationCell.move : false; //caught piece index\n\t// moveDirection is defined if and only if any of the following is true (for moving piece p):\n\tlet moveDirection;\n\t\t// (1) p caught a piece\n\tif (caught) {\n\t\tlet c = this.pieces[caught];\n\t\tc.alive = false;\n\t\tthis.board[c.row][c.col].who = null;\n\t\t//return direction of move\n\t\t//If leap, then c adjacent at start XOR c adjacent at end\n\t\t//Check adjacency of moving piece to captured piece on starting position and ending position\n\t\tlet cellAdjStartPos = Math.abs(c.row - p.row) < 2 && Math.abs(c.col - p.col) < 2;\n\t\tlet cellAdjEndPos = Math.abs(row - c.row) < 2 && Math.abs(col - c.col) < 2;\n\n\t\tmoveDirection = (cellAdjStartPos && cellAdjEndPos)\n\t\t\t? {rowIncr: Math.sign(row-c.row), colIncr: Math.sign(col-c.col)}\t//jump\n\t\t\t: (cellAdjStartPos\n\t\t\t\t? {rowIncr: Math.sign(c.row-p.row), colIncr: Math.sign(c.col-p.row)}\t//leap-> piece adj to capture on start\n\t\t\t\t: {rowIncr: Math.sign(row-c.row), colIncr: Math.sign(col-c.col)});\n\t}\t// (2) p LANDS on a phase cell. That is, this move is not a phase.\n\telse if (!this.samePhase(p,{row: row, col: col}))\tmoveDirection = {rowIncr: 0, colIncr: 0};\n\n\t//end move\n\tthis.board[row][col].who = pi;\n\tp.row = row;\n\tp.col = col;\n\n\t\t// (3) p is able to be cloned\n\tif (this.canClone(pi)) moveDirection = {rowIncr: 0, colIncr:0};\n\tthis.updateBoard();\n\treturn moveDirection;\n}\n\n/*==========\t\t\t\t\t\t\t\t\t\t\tINTEGRITY\t\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n\nBoard.prototype.samePhase = function (from, to) {\n\tlet isDestinationPhase = util.cellType(to.row, to.col);\n\treturn isDestinationPhase > 1 && isDestinationPhase === util.cellType(from.row, from.col);\n}\n\nBoard.prototype.canContinueMove = function (pi, dir) {\n\n\treturn dir ? this.getMoves(pi, 2, dir.rowIncr, dir.colIncr) : false;\n}\n\nBoard.prototype.hasMoves = function (pi) {\n\treturn this.getMoves(pi, 1);\n}\n\n//Player has no more moves when (1): all player's pieces are dead (2): every piece has no moves\nBoard.prototype.movesLeft = function (player) {\n\tfor(let pi=0; pi < this.pieces.length; pi++) {\n\t\tlet p = this.pieces[pi];\n\t\tif(p.alive && p.player === player) {\n\t\t\tif(this.hasMoves(pi)) return true;\n\t\t}\n\t}\n\treturn false;\n}\n\nBoard.prototype.validMove = function (row, col) {\n\treturn this.board[row][col].move;\n}\n\nmodule.exports = Board;\n"]},"metadata":{},"sourceType":"module"}