{"ast":null,"code":"var _jsxFileName = \"/Users/bacchus/git/Leap/client/src/App.js\";\nimport React from 'react';\nimport * as io from \"socket.io-client\";\nimport crypto from 'crypto';\nimport './css/App.css';\nimport './lib/fa/css/all.min.css';\nimport { CSSTransition } from 'react-transition-group';\nimport Settings from './Settings';\nimport Leap from './game/Leap';\nimport Menu from './Menu';\nconst CONFIG = {\n  difficulty: 0,\n  online: true,\n  port: 3001,\n  player: {},\n  size: 8\n};\n\nclass App extends React.Component {\n  // add back   <Menu/>\n  //If roomURL isn't empty, then Multiplayer\n  //go to roomURL.\n  constructor() {\n    super();\n    this.socket = io.connect(`http://localhost:${CONFIG.port}`);\n    this.socket.on('connect', () => {\n      this.socket.emit('lobbyLoad');\n    });\n    var name;\n\n    do {\n      name = prompt(\"username?\");\n    } while (!name);\n\n    const player = {\n      name: name,\n      bot: false,\n      color: 'white'\n    };\n    this.socket.on('lobbyLoadSuccess', games => {\n      let lobby = [];\n\n      for (const id in games) {\n        lobby.push(React.createElement(\"button\", {\n          key: id,\n          onClick: () => this.enterGame(id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        }, \"Game with \", games[id].host));\n      }\n\n      this.setState({\n        lobby: lobby\n      });\n    });\n    this.socket.emit('login', player);\n    CONFIG.player = player;\n    this.state = {\n      player: player,\n      inGame: '',\n      lobby: []\n    };\n    this.socket.emit('lobbyLoad'); //console.log(this.state.lobby);\n  }\n\n  componentDidMount() {}\n\n  enterGame(id) {\n    this.setState({\n      inGame: id\n    });\n  }\n\n  createGame() {\n    const id = crypto.randomBytes(10).toString('hex');\n    console.log(id);\n    this.socket.emit('gameCreate', {\n      id: id,\n      whitelist: false,\n      host: this.state.player.name,\n      hostGoesFirst: true,\n      users: {}\n    });\n    this.enterGame(id);\n  }\n\n  exitGame() {}\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(Settings, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), this.state.inGame ? React.createElement(Leap, {\n      io: this.socket,\n      gameid: this.state.inGame,\n      config: CONFIG,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"gameroonis\", this.state.lobby.length > 0 && this.state.lobby), React.createElement(\"button\", {\n      className: \"start-game-btn\",\n      onClick: () => this.createGame(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Create new game\")));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/bacchus/git/Leap/client/src/App.js"],"names":["React","io","crypto","CSSTransition","Settings","Leap","Menu","CONFIG","difficulty","online","port","player","size","App","Component","constructor","socket","connect","on","emit","name","prompt","bot","color","games","lobby","id","push","enterGame","host","setState","state","inGame","componentDidMount","createGame","randomBytes","toString","console","log","whitelist","hostGoesFirst","users","exitGame","render","length"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as io from \"socket.io-client\";\nimport crypto from 'crypto';\nimport './css/App.css';\nimport './lib/fa/css/all.min.css';\nimport { CSSTransition } from 'react-transition-group';\nimport Settings from './Settings';\nimport Leap from './game/Leap';\nimport Menu from './Menu';\n\nconst CONFIG = {\n  difficulty: 0,\n  online: true,\n  port: 3001,\n  player: {},\n  size: 8,\n};\n\nclass App extends React.Component {\n  // add back   <Menu/>\n  //If roomURL isn't empty, then Multiplayer\n  //go to roomURL.\n  constructor () {\n    super();\n    this.socket = io.connect(`http://localhost:${CONFIG.port}`);\n    this.socket.on('connect', () => {\n      this.socket.emit('lobbyLoad');\n    });\n    var name;\n    do { name = prompt(\"username?\");}while(!name);\n    const player = {\n      name: name,\n      bot: false,\n      color: 'white',\n    };\n\n    this.socket.on('lobbyLoadSuccess', games => {\n      let lobby = [];\n      for (const id in games) {\n        lobby.push(\n          <button\n            key= {id}\n            onClick={ () => this.enterGame(id) }>\n            Game with { games[id].host }\n          </button>\n        );\n      }\n      this.setState({lobby: lobby});\n    });\n\n    this.socket.emit('login', player);\n    CONFIG.player = player;\n    this.state = {\n      player: player,\n      inGame: '',\n      lobby: [],\n    };\n    this.socket.emit('lobbyLoad');\n\n    //console.log(this.state.lobby);\n\n  }\n\n\n  componentDidMount () {\n\n  }\n\n  enterGame(id) {\n    this.setState({inGame: id});\n  }\n\n  createGame() {\n    const id =  crypto.randomBytes(10).toString('hex');\n    console.log(id);\n    this.socket.emit('gameCreate', {\n      id: id,\n      whitelist: false,\n      host: this.state.player.name,\n      hostGoesFirst: true,\n      users : {},\n    });\n\n    this.enterGame(id);\n  }\n\n\n  exitGame() {\n\n  }\n\n\n  render () {\n\n    return (\n      <div className=\"App\">\n        <Settings/>\n        { this.state.inGame ? (\n          <Leap io={this.socket} gameid= { this.state.inGame } config={ CONFIG }/>\n        ) : (\n          <div>\n            <div>\n              gameroonis\n              { (this.state.lobby.length > 0) && this.state.lobby }\n            </div>\n            <button\n              className='start-game-btn'\n              onClick={ () => this.createGame() }>\n              Create new game\n            </button>\n          </div>)}\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}