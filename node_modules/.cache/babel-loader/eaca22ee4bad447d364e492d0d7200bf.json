{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar compare_1 = require(\"./compare\");\n\nvar StateContainer =\n/** @class */\nfunction () {\n  function StateContainer(state) {\n    this.listeners = [];\n    this.matcherPlaceholders = {\n      \":id\": /^([a-zA-Z0-9\\-_]+)$/,\n      \":number\": /^([0-9]+)$/,\n      \":string\": /^(\\w+)$/,\n      \":axis\": /^([xyz])$/,\n      \":*\": /(.*)/\n    };\n    this.state = state;\n    this.reset();\n  }\n\n  StateContainer.prototype.set = function (newState) {\n    var patches = compare_1.compare(this.state, newState);\n    this.state = newState;\n    this.checkPatches(patches, this.listeners, this.defaultListener);\n    return patches;\n  };\n\n  StateContainer.prototype.registerPlaceholder = function (placeholder, matcher) {\n    this.matcherPlaceholders[placeholder] = matcher;\n  };\n\n  StateContainer.prototype.listen = function (segments, callback, immediate) {\n    var _this = this;\n\n    var rules;\n\n    if (typeof segments === \"function\") {\n      rules = [];\n      callback = segments;\n    } else {\n      rules = segments.split(\"/\");\n    }\n\n    if (callback.length > 1) {\n      console.warn(\".listen() accepts only one parameter.\");\n    }\n\n    var listener = {\n      callback: callback,\n      rawRules: rules,\n      rules: rules.map(function (segment) {\n        if (typeof segment === \"string\") {\n          // replace placeholder matchers\n          return segment.indexOf(\":\") === 0 ? _this.matcherPlaceholders[segment] || _this.matcherPlaceholders[\":*\"] : new RegExp(\"^\" + segment + \"$\");\n        } else {\n          return segment;\n        }\n      })\n    };\n\n    if (rules.length === 0) {\n      this.defaultListener = listener;\n    } else {\n      this.listeners.push(listener);\n    } // immediatelly try to trigger this listener.\n\n\n    if (immediate) {\n      this.checkPatches(compare_1.compare({}, this.state), [listener]);\n    }\n\n    return listener;\n  };\n\n  StateContainer.prototype.removeListener = function (listener) {\n    for (var i = this.listeners.length - 1; i >= 0; i--) {\n      if (this.listeners[i] === listener) {\n        this.listeners.splice(i, 1);\n      }\n    }\n  };\n\n  StateContainer.prototype.removeAllListeners = function () {\n    this.reset();\n  };\n\n  StateContainer.prototype.checkPatches = function (patches, listeners, defaultListener) {\n    for (var j = 0, len = listeners.length; j < len; j++) {\n      var listener = listeners[j];\n\n      for (var i = patches.length - 1; i >= 0; i--) {\n        var pathVariables = listener && this.getPathVariables(patches[i], listener);\n\n        if (pathVariables) {\n          listener.callback({\n            path: pathVariables,\n            rawPath: patches[i].path,\n            operation: patches[i].operation,\n            value: patches[i].value\n          });\n          patches[i].matched = true;\n        }\n      }\n    } // trigger default listener callback with each unmatched patch\n\n\n    if (defaultListener) {\n      for (var i = patches.length - 1; i >= 0; i--) {\n        if (!patches[i].matched) {\n          defaultListener.callback(patches[i]);\n        }\n      }\n    }\n  };\n\n  StateContainer.prototype.getPathVariables = function (patch, listener) {\n    // skip if rules count differ from patch\n    if (patch.path.length !== listener.rules.length) {\n      return false;\n    }\n\n    var path = {};\n\n    for (var i = 0, len = listener.rules.length; i < len; i++) {\n      var matches = patch.path[i].match(listener.rules[i]);\n\n      if (!matches || matches.length === 0 || matches.length > 2) {\n        return false;\n      } else if (listener.rawRules[i].substr(0, 1) === \":\") {\n        path[listener.rawRules[i].substr(1)] = matches[1];\n      }\n    }\n\n    return path;\n  };\n\n  StateContainer.prototype.reset = function () {\n    this.listeners = [];\n  };\n\n  return StateContainer;\n}();\n\nexports.StateContainer = StateContainer;","map":{"version":3,"sources":["/Users/bacchus/git/Leap/node_modules/@gamestdio/state-listener/lib/StateContainer.js"],"names":["Object","defineProperty","exports","value","compare_1","require","StateContainer","state","listeners","matcherPlaceholders","reset","prototype","set","newState","patches","compare","checkPatches","defaultListener","registerPlaceholder","placeholder","matcher","listen","segments","callback","immediate","_this","rules","split","length","console","warn","listener","rawRules","map","segment","indexOf","RegExp","push","removeListener","i","splice","removeAllListeners","j","len","pathVariables","getPathVariables","path","rawPath","operation","matched","patch","matches","match","substr"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar compare_1 = require(\"./compare\");\nvar StateContainer = /** @class */ (function () {\n    function StateContainer(state) {\n        this.listeners = [];\n        this.matcherPlaceholders = {\n            \":id\": /^([a-zA-Z0-9\\-_]+)$/,\n            \":number\": /^([0-9]+)$/,\n            \":string\": /^(\\w+)$/,\n            \":axis\": /^([xyz])$/,\n            \":*\": /(.*)/,\n        };\n        this.state = state;\n        this.reset();\n    }\n    StateContainer.prototype.set = function (newState) {\n        var patches = compare_1.compare(this.state, newState);\n        this.state = newState;\n        this.checkPatches(patches, this.listeners, this.defaultListener);\n        return patches;\n    };\n    StateContainer.prototype.registerPlaceholder = function (placeholder, matcher) {\n        this.matcherPlaceholders[placeholder] = matcher;\n    };\n    StateContainer.prototype.listen = function (segments, callback, immediate) {\n        var _this = this;\n        var rules;\n        if (typeof (segments) === \"function\") {\n            rules = [];\n            callback = segments;\n        }\n        else {\n            rules = segments.split(\"/\");\n        }\n        if (callback.length > 1) {\n            console.warn(\".listen() accepts only one parameter.\");\n        }\n        var listener = {\n            callback: callback,\n            rawRules: rules,\n            rules: rules.map(function (segment) {\n                if (typeof (segment) === \"string\") {\n                    // replace placeholder matchers\n                    return (segment.indexOf(\":\") === 0)\n                        ? _this.matcherPlaceholders[segment] || _this.matcherPlaceholders[\":*\"]\n                        : new RegExp(\"^\" + segment + \"$\");\n                }\n                else {\n                    return segment;\n                }\n            })\n        };\n        if (rules.length === 0) {\n            this.defaultListener = listener;\n        }\n        else {\n            this.listeners.push(listener);\n        }\n        // immediatelly try to trigger this listener.\n        if (immediate) {\n            this.checkPatches(compare_1.compare({}, this.state), [listener]);\n        }\n        return listener;\n    };\n    StateContainer.prototype.removeListener = function (listener) {\n        for (var i = this.listeners.length - 1; i >= 0; i--) {\n            if (this.listeners[i] === listener) {\n                this.listeners.splice(i, 1);\n            }\n        }\n    };\n    StateContainer.prototype.removeAllListeners = function () {\n        this.reset();\n    };\n    StateContainer.prototype.checkPatches = function (patches, listeners, defaultListener) {\n        for (var j = 0, len = listeners.length; j < len; j++) {\n            var listener = listeners[j];\n            for (var i = patches.length - 1; i >= 0; i--) {\n                var pathVariables = listener && this.getPathVariables(patches[i], listener);\n                if (pathVariables) {\n                    listener.callback({\n                        path: pathVariables,\n                        rawPath: patches[i].path,\n                        operation: patches[i].operation,\n                        value: patches[i].value\n                    });\n                    patches[i].matched = true;\n                }\n            }\n        }\n        // trigger default listener callback with each unmatched patch\n        if (defaultListener) {\n            for (var i = patches.length - 1; i >= 0; i--) {\n                if (!patches[i].matched) {\n                    defaultListener.callback(patches[i]);\n                }\n            }\n        }\n    };\n    StateContainer.prototype.getPathVariables = function (patch, listener) {\n        // skip if rules count differ from patch\n        if (patch.path.length !== listener.rules.length) {\n            return false;\n        }\n        var path = {};\n        for (var i = 0, len = listener.rules.length; i < len; i++) {\n            var matches = patch.path[i].match(listener.rules[i]);\n            if (!matches || matches.length === 0 || matches.length > 2) {\n                return false;\n            }\n            else if (listener.rawRules[i].substr(0, 1) === \":\") {\n                path[listener.rawRules[i].substr(1)] = matches[1];\n            }\n        }\n        return path;\n    };\n    StateContainer.prototype.reset = function () {\n        this.listeners = [];\n    };\n    return StateContainer;\n}());\nexports.StateContainer = StateContainer;\n"]},"metadata":{},"sourceType":"script"}