{"ast":null,"code":"var _jsxFileName = \"/Users/bacchus/git/Leap/client/src/containers/Lobby/Lobby.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Room from '../Room';\nimport crypto from 'crypto';\nimport { getLobbyRooms, getActiveRoom } from '../../selectors/';\nimport { lobbyUpdate, lobbyToggleScroll } from '../../actions/lobby';\nimport { array, string } from 'prop-types';\nimport './Lobby.css';\n\nconst Lobby = ({\n  id,\n  rooms,\n  activeRoom\n}) => {\n  /*\n   TODO: add actions\n    load Games through up/down arrows + or - state roomIndex\n  */\n  const roomKeys = Object.keys(rooms);\n  const activeRoomIndex = roomKeys.indexOf(activeRoom);\n  const size = roomKeys.length;\n  let loadedRooms = [];\n\n  if (size > 1) {\n    const prev = Math.abs((activeRoom - 1) % size);\n    const next = (activeRoom + 1) % size;\n\n    for (let i = -1; i < 2; i++) {\n      loadedRooms.push(React.createElement(Room, {\n        key: i + 1,\n        room: rooms[(activeRoom + i) % size].id,\n        active: !i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }));\n    }\n  } else {\n    loadedRooms.push(React.createElement(Room, {\n      key: 0,\n      room: rooms[activeRoom].id,\n      active: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }));\n  }\n\n  return React.createElement(\"div\", {\n    className: \"lobby-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, loadedRooms);\n};\n\nLobby.propTypes = {\n  rooms: array,\n  activeRoom: string\n}; //TODO: make selectors\n\nconst mapStateToProps = state => ({\n  rooms: getLobbyRooms(state),\n  activeRoom: getActiveRoom(state)\n});\n\nexport default connect(mapStateToProps)(Lobby);","map":{"version":3,"sources":["/Users/bacchus/git/Leap/client/src/containers/Lobby/Lobby.js"],"names":["React","connect","Room","crypto","getLobbyRooms","getActiveRoom","lobbyUpdate","lobbyToggleScroll","array","string","Lobby","id","rooms","activeRoom","roomKeys","Object","keys","activeRoomIndex","indexOf","size","length","loadedRooms","prev","Math","abs","next","i","push","propTypes","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,kBAA7C;AACA,SAASC,WAAT,EAAsBC,iBAAtB,QAA+C,qBAA/C;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,YAA9B;AAEA,OAAO,aAAP;;AAGA,MAAMC,KAAK,GAAG,CAAC;AAACC,EAAAA,EAAD;AAAKC,EAAAA,KAAL;AAAYC,EAAAA;AAAZ,CAAD,KAA6B;AAEzC;;;;AAIA,QAAMC,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAYJ,KAAZ,CAAjB;AACA,QAAMK,eAAe,GAAGH,QAAQ,CAACI,OAAT,CAAiBL,UAAjB,CAAxB;AACA,QAAMM,IAAI,GAAGL,QAAQ,CAACM,MAAtB;AACA,MAAIC,WAAW,GAAG,EAAlB;;AACA,MAAIF,IAAI,GAAG,CAAX,EAAc;AACZ,UAAMG,IAAI,GAAGC,IAAI,CAACC,GAAL,CAAU,CAACX,UAAU,GAAC,CAAZ,IAAeM,IAAzB,CAAb;AACA,UAAMM,IAAI,GAAG,CAACZ,UAAU,GAAC,CAAZ,IAAeM,IAA5B;;AACA,SAAK,IAAIO,CAAC,GAAC,CAAC,CAAZ,EAAeA,CAAC,GAAC,CAAjB,EAAoBA,CAAC,EAArB,EAAyB;AACvBL,MAAAA,WAAW,CAACM,IAAZ,CAAkB,oBAAC,IAAD;AAAM,QAAA,GAAG,EAAED,CAAC,GAAC,CAAb;AAAgB,QAAA,IAAI,EAAEd,KAAK,CAAC,CAACC,UAAU,GAACa,CAAZ,IAAeP,IAAhB,CAAL,CAA2BR,EAAjD;AAAqD,QAAA,MAAM,EAAE,CAACe,CAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAlB;AACD;AACF,GAND,MAMO;AACLL,IAAAA,WAAW,CAACM,IAAZ,CAAiB,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAE,CAAX;AAAc,MAAA,IAAI,EAAEf,KAAK,CAACC,UAAD,CAAL,CAAkBF,EAAtC;AAA0C,MAAA,MAAM,EAAE,IAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAjB;AACD;;AAGD,SACE;AAAK,IAAA,SAAS,EAAE,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIU,WADJ,CADF;AAMD,CA3BD;;AA6BAX,KAAK,CAACkB,SAAN,GAAkB;AAChBhB,EAAAA,KAAK,EAAEJ,KADS;AAEhBK,EAAAA,UAAU,EAAEJ;AAFI,CAAlB,C,CAKA;;AACA,MAAMoB,eAAe,GAAGC,KAAK,KAAK;AAChClB,EAAAA,KAAK,EAAER,aAAa,CAAC0B,KAAD,CADY;AAEhCjB,EAAAA,UAAU,EAAER,aAAa,CAACyB,KAAD;AAFO,CAAL,CAA7B;;AAMA,eAAe7B,OAAO,CAAC4B,eAAD,CAAP,CAAyBnB,KAAzB,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport Room from '../Room';\nimport crypto from 'crypto';\nimport { getLobbyRooms, getActiveRoom } from '../../selectors/';\nimport { lobbyUpdate, lobbyToggleScroll } from '../../actions/lobby';\nimport { array, string } from 'prop-types';\n\nimport './Lobby.css';\n\n\nconst Lobby = ({id, rooms, activeRoom}) => {\n\n  /*\n   TODO: add actions\n    load Games through up/down arrows + or - state roomIndex\n  */\n  const roomKeys = Object.keys(rooms);\n  const activeRoomIndex = roomKeys.indexOf(activeRoom);\n  const size = roomKeys.length;\n  let loadedRooms = [];\n  if (size > 1) {\n    const prev = Math.abs( (activeRoom-1)%size );\n    const next = (activeRoom+1)%size;\n    for (let i=-1; i<2; i++) {\n      loadedRooms.push( <Room key={i+1} room={rooms[(activeRoom+i)%size].id} active={!i} />);\n    }\n  } else {\n    loadedRooms.push(<Room key={0} room={rooms[activeRoom].id} active={true} />);\n  }\n\n\n  return (\n    <div className= \"lobby-container\">\n      { loadedRooms }\n    </div>\n  );\n\n};\n\nLobby.propTypes = {\n  rooms: array,\n  activeRoom: string,\n}\n\n//TODO: make selectors\nconst mapStateToProps = state => ({\n  rooms: getLobbyRooms(state),\n  activeRoom: getActiveRoom(state),\n\n})\n\nexport default connect(mapStateToProps)(Lobby);\n"]},"metadata":{},"sourceType":"module"}