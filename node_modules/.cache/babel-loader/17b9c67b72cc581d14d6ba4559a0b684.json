{"ast":null,"code":"var util = require('./util.js'); //single, phase, jump, super-jump\n\n/*\nadj: adjacent\nphase: change portal side\nleap: capture piece while jumping through a portal\njitch: jump, then phase\nswump: switch, then jump\n}\n*/\n\n/*\nLEGEND\npi = piece index in Board.pieces\np = piece Board.pieces[pi]\n*/\n\n/*\nPreviously, I assumed that if a uncloned piece reaches the end of the other player's side,\nthen that piece must duplicate before continuing the game. However, my assumption fails\nif the player's spawn row is full and hence I will give the player the option to choose.\n\nThis realization got me thinking about adding different game modes that\nmodify things like the board size, and side-wrapping.\n\nboard size: If board were 9x9, we can put a clone phaser in the center\nthat duplicates any non-clone pieces at most once.\n\nside wrapping: columns are cyclic: make board[row] = cyclic linked List?\n\n\n\nSpeaking of linked lists... Why am I not using them now?\nMaybe this is what I needed to store highlight;\n represent each of this.state.selected_piece's moves as a boolean for 'highlight' in\n this.board[row][col] = {who: p.player | null, highlight: true | false :: added in Board.get_moves(pi)}\n for some row,col,  and p = this.piece[pi]\n to Leap.set_piece(), add this.state.board.update_board()\n\n*/\n\n\nfunction Board(size, p1, p2) {\n  this.p1 = p1;\n  this.p2 = p2;\n  this.board = this.init_board(size);\n  this.pieces_separator = 8;\n  this.pieces = this.init_pieces(size, p1, p2);\n  this.update_board(); //add pieces to board\n} //TODO:\n//this.board[row][col] = {who: p.player | null, highlight: {row: some_row, col: some_col} | null:: added in Board.get_moves(pi)}\n//update occurs when (1) piece is cloned (pieces index may change)\n// and when (2) set_piece is called\n//To make highlight function properly, I'll have to call this.get_moves() from here.\n//It follows that I will have to remove other calls to this.get_moves()\n\n\nBoard.prototype.update_board = function () {\n  this.board.map(row => row.map((cell, j) => cell !== null ? this.pieces[cell].alive ? {\n    who: this.pieces[cell],\n    move: false\n  } : null : null));\n};\n\nBoard.prototype.init_board = function (size) {\n  let board = [],\n      player_two = [],\n      player_one = []; //TODO: fill as {who: pi (this.pieces index), highlight: null}\n\n  for (let i = 0; i < size; i++) {\n    player_two.push({\n      who: i,\n      move: false\n    });\n    player_one.push({\n      who: i + 8,\n      move: false\n    });\n  }\n\n  board.push(player_two);\n\n  for (let i = 1; i < size - 1; i++) board.push(Array(size).fill({\n    who: null,\n    move: false\n  }));\n\n  board.push(player_one);\n  return board;\n};\n\nBoard.prototype.init_pieces = function (size) {\n  let white_pieces = [];\n  let black_pieces = [];\n\n  for (let c = 0; c < size; c++) {\n    white_pieces.push({\n      player: this.p1,\n      cloned: false,\n      row: 7,\n      col: c,\n      alive: true\n    });\n    black_pieces.push({\n      player: this.p2,\n      cloned: false,\n      row: 0,\n      col: c,\n      alive: true\n    });\n  }\n\n  return black_pieces.concat(white_pieces);\n};\n/*==========\t\t\t\t\t\t\t\t\t\t\tCLONE\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n//Calls every time a clone is made\n\n\nBoard.prototype.insert_at_separation_index = function () {\n  for (let pi = this.pieces_separator; pi < this.pieces.length; pi++) {\n    //Finds index that separates p1 and p2 pieces\n    if (this.pieces[pi].player !== this.p1) {\n      this.pieces_separator = pi; //update\n\n      return pi;\n    }\n  }\n};\n\nBoard.prototype.make_clone = function (pi, row, col) {\n  this.pieces[pi].cloned = true; //row will only be 0 or 7, so we can use this to determine player and placement\n\n  let player = row ? this.p1 : this.p2;\n  let clone = {\n    player: player,\n    cloned: true,\n    row: row,\n    col: col,\n    alive: true\n  };\n  return this.pieces.splice(this.insert_at_separation_index(), 0, clone);\n};\n\nBoard.prototype.can_clone = function (pi) {\n  let p = this.pieces[pi];\n  return !p.cloned && p.col < 7 && p.col > 0 && (p.player === this.p1 && !p.row || p.player === this.p2 && p.row === 7);\n};\n/*==========\t\t\t\t\t\t\t\t\t\t\tMOVES\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n\n\nBoard.prototype.get_player = function (pi) {\n  return this.pieces[pi].player;\n};\n\nBoard.prototype.is_leap = function (p, row_incr, col_incr, is_phase, cell_adj) {\n  //if neighbor cell is a phase, leap_cell clear, and (enemy piece on phase_adj XOR enemy piece on phase_far)\n  let destination_cell = this.board[7 - p.row][7 - p.col];\n\n  if (is_phase && !destination_cell.who) {\n    let phase_adj = cell_adj.who;\n    let phase_far = this.board[7 - (p.row + row_incr)][7 - (p.col + col_incr)].who;\n\n    if ((phase_adj || phase_far) && !(phase_adj && phase_far)) {\n      //xor filter. Only one may be true\n      let capt = phase_adj ? phase_adj : phase_far;\n      destination_cell.move = capt; //return {row: 7 - p.row, col: 7 - p.col, captured_pi: capt};\n    }\n  }\n};\n\nBoard.prototype.is_jump = function (p, row_incr, col_incr, cell_adj) {\n  //if adj cell occupied, jump_cell in bounds, jump_cell clear, and jump_cell has enemy piece\n  let destination_cell = this.board[p.row + row_incr * 2][p.col + col_incr * 2];\n\n  if (util.in_bounds(p.row + row_incr * 2, p.col + col_incr * 2)) {\n    if (this.get_player(cell_adj.who) !== p.player && !destination_cell.who) {\n      destination_cell.move = cell_adj.who; //return {row: p.row + row_incr*2, col: p.col + col_incr*2, captured_pi: cell_adj};\n    }\n  }\n};\n\nBoard.prototype.is_phase = function (p) {\n  let is_phase = util.cell_type(p.row, p.col) > 1;\n  if (is_phase && !this.board[7 - p.row][7 - p.col]) return {\n    row: 7 - p.row,\n    col: 7 - p.col\n  };\n};\n\nBoard.prototype.is_clone_spawn = function (pi, row, col) {\n  if (this.can_clone(pi)) return this.board[row][col] === null;\n};\n\nBoard.prototype.get_clone_spawns = function (p) {\n  let row = p.player === this.p1 ? 0 : 7;\n  let clone_spawns = [];\n\n  for (let col = 1; col < 7; col++) {\n    if (this.board[row][col] === null) clone_spawns.push({\n      row: row,\n      col: col\n    });\n  }\n\n  return clone_spawns;\n};\n\nBoard.prototype.get_moves = function (pi) {\n  let adjs = [],\n      jumps = [],\n      leaps = [];\n  let p = this.pieces[pi]; //TODO: ref this.board[p.row + r][p.col + r].who, and set highlight = true for every destination\n\n  let phase, jump, leap;\n\n  for (let r = -1; r < 2; r++) {\n    for (let c = -1; c < 2; c++) {\n      //check adjacent cells of piece p wrt the boundary\n      if (util.in_bounds(p.row + r, p.col + c) && (r || c)) {\n        let cell_adj = this.board[p.row + r][p.col + c];\n        let is_phase = util.cell_type(p.row + r, p.col + c) > 1;\n        this.is_leap(p, r, c, is_phase, cell_adj);\n        if (cell_adj.who) this.is_jump(p, r, c, cell_adj);else cell_adj; //adjs.push({row: p.row + r, col: p.col + c});\t//adjacent moves\n\n        if (leap !== undefined) leaps.push(leap);\n        if (jump !== undefined) jumps.push(jump);\n      }\n    }\n  } //add key clone_spawns if piece can be cloned\n\n\n  let piece_moves = {\n    phase: this.is_phase(p),\n    adjs: adjs,\n    jumps: jumps,\n    leaps: leaps\n  };\n\n  if (this.can_clone(pi)) {\n    let clone_spawns = this.get_clone_spawns(p);\n    if (clone_spawns.length) piece_moves.clone_spawns = clone_spawns; //Check if spawn row has at least one empty cell\n  }\n\n  return piece_moves;\n}; //Performs move. returns true if captured piece in process, else false\n\n\nBoard.prototype.do_move = function (pi, row, col) {\n  let p = this.pieces[pi]; //If piece (is on super cell) can phase, extend player turn to allow option\n  //if (this.is_phase(p))\n\n  this.board[p.row][p.col] = null;\n  this.board[row][col] = pi;\n  p.row = row;\n  p.col = col; //if piece p contains captured piece\n\n  let c = p.captured_pi !== undefined ? this.pieces[p.captured_pi] : null;\n\n  if (c) {\n    c.alive = false;\n    this.board[c.row][c.col] = null; //return direction of move\n\n    return {\n      row_incr: Math.sign(p.row - c.row),\n      col_incr: Math.sign(p.col - c.col)\n    };\n  }\n};\n/*==========\t\t\t\t\t\t\t\t\t\t\tINTEGRITY\t\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n\n\nBoard.prototype.can_continue_move = function (pi) {\n  let moves = this.get_moves(pi); //TODO: Only check moves in the same direction as the initial move\n\n  moves.adjs = []; //return !parseInt(Object.values(a).reduce( (j,i) => i.length !== undefined ? i.length + j: j));\n\n  return !moves.every(t => t === [] || t === {} || t === null);\n};\n\nBoard.prototype.has_moves = function (pi) {\n  let moves = this.get_moves(pi); //return !parseInt(Object.values(a).reduce( (j,i) => i.length !== undefined ? i.length + j: j));\n\n  return !Object.values(moves).every(t => t === [] || t === {} || t === null);\n}; //Player has no more moves when (1): all player's pieces are dead (2): every piece has no moves\n\n\nBoard.prototype.moves_left = function (player) {\n  for (let pi = 0; pi < this.pieces.length; pi++) {\n    let p = this.pieces[pi];\n\n    if (p.alive && p.player === player) {\n      if (this.has_moves(pi)) return true;\n    }\n  }\n\n  return false;\n};\n\nBoard.prototype.valid_move = function (pi, row, col) {\n  let m = this.get_moves(pi); //** this.board[row][col].highlight\n\n  let moves = [];\n  moves = moves.concat(m.phase, m.adjs, m.jumps, m.leaps, m.clone_spawns);\n\n  for (let move of moves) {\n    if (!move) continue;\n    if (move.row === row && move.col === col) return true;\n  }\n\n  return false;\n};\n\nmodule.exports = Board;","map":{"version":3,"sources":["/Users/bacchus/git/Leap/src/js/board.js"],"names":["util","require","Board","size","p1","p2","board","init_board","pieces_separator","pieces","init_pieces","update_board","prototype","map","row","cell","j","alive","who","move","player_two","player_one","i","push","Array","fill","white_pieces","black_pieces","c","player","cloned","col","concat","insert_at_separation_index","pi","length","make_clone","clone","splice","can_clone","p","get_player","is_leap","row_incr","col_incr","is_phase","cell_adj","destination_cell","phase_adj","phase_far","capt","is_jump","in_bounds","cell_type","is_clone_spawn","get_clone_spawns","clone_spawns","get_moves","adjs","jumps","leaps","phase","jump","leap","r","undefined","piece_moves","do_move","captured_pi","Math","sign","can_continue_move","moves","every","t","has_moves","Object","values","moves_left","valid_move","m","module","exports"],"mappings":"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","sourcesContent":["var util = require('./util.js');\n//single, phase, jump, super-jump\n/*\nadj: adjacent\nphase: change portal side\nleap: capture piece while jumping through a portal\njitch: jump, then phase\nswump: switch, then jump\n}\n*/\n/*\nLEGEND\npi = piece index in Board.pieces\np = piece Board.pieces[pi]\n*/\n\n/*\nPreviously, I assumed that if a uncloned piece reaches the end of the other player's side,\nthen that piece must duplicate before continuing the game. However, my assumption fails\nif the player's spawn row is full and hence I will give the player the option to choose.\n\nThis realization got me thinking about adding different game modes that\nmodify things like the board size, and side-wrapping.\n\nboard size: If board were 9x9, we can put a clone phaser in the center\nthat duplicates any non-clone pieces at most once.\n\nside wrapping: columns are cyclic: make board[row] = cyclic linked List?\n\n\n\nSpeaking of linked lists... Why am I not using them now?\nMaybe this is what I needed to store highlight;\n represent each of this.state.selected_piece's moves as a boolean for 'highlight' in\n this.board[row][col] = {who: p.player | null, highlight: true | false :: added in Board.get_moves(pi)}\n for some row,col,  and p = this.piece[pi]\n to Leap.set_piece(), add this.state.board.update_board()\n\n*/\n\n\nfunction Board(size, p1, p2) {\n\tthis.p1 = p1;\n\tthis.p2 = p2;\n\tthis.board = this.init_board(size);\n\tthis.pieces_separator = 8;\n\tthis.pieces = this.init_pieces(size, p1, p2);\n\tthis.update_board(); //add pieces to board\n}\n\n//TODO:\n//this.board[row][col] = {who: p.player | null, highlight: {row: some_row, col: some_col} | null:: added in Board.get_moves(pi)}\n//update occurs when (1) piece is cloned (pieces index may change)\n// and when (2) set_piece is called\n//To make highlight function properly, I'll have to call this.get_moves() from here.\n//It follows that I will have to remove other calls to this.get_moves()\nBoard.prototype.update_board = function () {\n\tthis.board.map(row => row.map((cell, j) =>\n\t\tcell !== null ? (this.pieces[cell].alive ? {who: this.pieces[cell], move:false} : null) : null ));\n}\n\nBoard.prototype.init_board = function (size) {\n    let board = [], player_two = [], player_one = [];\n\t\t//TODO: fill as {who: pi (this.pieces index), highlight: null}\n\t\tfor (let i = 0; i < size; i++) {\n\t\t\tplayer_two.push({who: i, move: false});\n\t\t\tplayer_one.push({who: i+8, move: false});\n\t\t}\n\t\tboard.push(player_two);\n\t\tfor (let i = 1; i < size-1; i++) board.push(Array(size).fill({who: null, move: false}));\n\t\tboard.push(player_one);\n\n    return board;\n}\n\nBoard.prototype.init_pieces = function (size) {\n\tlet white_pieces = [];\n\tlet black_pieces = [];\n\tfor (let c = 0; c < size; c++) {\n\t\twhite_pieces.push({player: this.p1, cloned: false, row: 7, col: c, alive: true});\n\t\tblack_pieces.push({player: this.p2, cloned: false, row: 0, col: c, alive: true});\n\t}\n    return black_pieces.concat(white_pieces);\n}\n\n/*==========\t\t\t\t\t\t\t\t\t\t\tCLONE\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n\n//Calls every time a clone is made\nBoard.prototype.insert_at_separation_index = function () {\n\tfor(let pi=this.pieces_separator; pi<this.pieces.length; pi++) {\n\t\t//Finds index that separates p1 and p2 pieces\n\t\tif(this.pieces[pi].player !== this.p1) {\n\t\t\tthis.pieces_separator = pi; //update\n\t\t\treturn pi;\n\t\t}\n\t}\n}\n\nBoard.prototype.make_clone = function (pi, row, col) {\n\tthis.pieces[pi].cloned = true;\n\t//row will only be 0 or 7, so we can use this to determine player and placement\n\tlet player = row ? this.p1 : this.p2;\n\tlet clone = {player: player, cloned: true, row: row, col: col, alive: true};\n\treturn this.pieces.splice(this.insert_at_separation_index(),0, clone);\n}\n\nBoard.prototype.can_clone = function (pi) {\n\tlet p = this.pieces[pi];\n\treturn (!p.cloned && p.col < 7 && p.col > 0 && ( (p.player === this.p1 && !p.row) || (p.player === this.p2 && p.row === 7) ));\n}\n\n/*==========\t\t\t\t\t\t\t\t\t\t\tMOVES\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n\nBoard.prototype.get_player = function (pi) {\n\treturn this.pieces[pi].player;\n}\n\nBoard.prototype.is_leap = function (p, row_incr, col_incr, is_phase, cell_adj) {\n\t//if neighbor cell is a phase, leap_cell clear, and (enemy piece on phase_adj XOR enemy piece on phase_far)\n\tlet destination_cell = this.board[7 - p.row][7 - p.col];\n\tif(is_phase && !destination_cell.who) {\n\t\tlet phase_adj = cell_adj.who;\n\t\tlet phase_far = this.board[7 - (p.row + row_incr)][7 - (p.col + col_incr)].who;\n\t\tif((phase_adj || phase_far) && !(phase_adj && phase_far)) { //xor filter. Only one may be true\n\t\t\tlet capt = phase_adj ? phase_adj : phase_far;\n\t\t\tdestination_cell.move = capt;\n\t\t\t//return {row: 7 - p.row, col: 7 - p.col, captured_pi: capt};\n\t\t}\n\t}\n}\n\nBoard.prototype.is_jump = function (p, row_incr, col_incr, cell_adj) {\n\t//if adj cell occupied, jump_cell in bounds, jump_cell clear, and jump_cell has enemy piece\n\tlet destination_cell = this.board[p.row + row_incr*2][p.col + col_incr*2];\n\tif(util.in_bounds(p.row + row_incr*2, p.col + col_incr*2)) {\n\t\tif (this.get_player(cell_adj.who) !== p.player && !destination_cell.who) {\n\t\t\t\tdestination_cell.move = cell_adj.who;\n\t\t\t\t//return {row: p.row + row_incr*2, col: p.col + col_incr*2, captured_pi: cell_adj};\n\t\t}\n\t}\n}\n\nBoard.prototype.is_phase = function (p) {\n\tlet is_phase = util.cell_type(p.row, p.col) > 1;\n\tif(is_phase && !this.board[7 - p.row][7 - p.col]) return {row: 7 - p.row, col: 7 - p.col};\n}\n\nBoard.prototype.is_clone_spawn = function (pi, row, col) {\n\tif (this.can_clone(pi)) return (this.board[row][col] === null);\n}\n\nBoard.prototype.get_clone_spawns = function (p) {\n\tlet row = p.player === this.p1 ? 0 : 7;\n\n\tlet clone_spawns = [];\n\tfor(let col=1; col<7;col++) {\n\t\tif (this.board[row][col] === null) clone_spawns.push({row: row, col: col});\n\t}\n\treturn clone_spawns;\n}\n\nBoard.prototype.get_moves = function (pi) {\n\tlet adjs = [], jumps = [], leaps = [];\n\tlet p = this.pieces[pi];\n\n\n\t//TODO: ref this.board[p.row + r][p.col + r].who, and set highlight = true for every destination\n\n\tlet phase, jump, leap;\n\tfor(let r=-1;r<2;r++) {\n\t\tfor(let c=-1;c<2; c++) {\n\t\t\t//check adjacent cells of piece p wrt the boundary\n\t\t\tif(util.in_bounds(p.row + r, p.col + c) && (r || c)) {\n\t\t\t\tlet cell_adj = this.board[p.row + r][p.col + c];\n\t\t\t\tlet is_phase = util.cell_type(p.row + r, p.col + c) > 1;\n\n\t\t\t\tthis.is_leap(p, r, c, is_phase, cell_adj);\n\t\t\t\tif(cell_adj.who) this.is_jump(p, r, c, cell_adj);\n\t\t\t\telse cell_adj;//adjs.push({row: p.row + r, col: p.col + c});\t//adjacent moves\n\n\t\t\t\tif (leap !== undefined) leaps.push(leap);\n\t\t\t\tif (jump !== undefined) jumps.push(jump);\n\t\t\t}\n\t\t}\n\t}\n\n\t//add key clone_spawns if piece can be cloned\n\tlet piece_moves = {phase: this.is_phase(p), adjs: adjs, jumps: jumps, leaps: leaps};\n\tif (this.can_clone(pi)) {\n\t\tlet clone_spawns = this.get_clone_spawns(p);\n\t\tif (clone_spawns.length) piece_moves.clone_spawns = clone_spawns; //Check if spawn row has at least one empty cell\n\t}\n\treturn piece_moves;\n}\n\n//Performs move. returns true if captured piece in process, else false\nBoard.prototype.do_move = function (pi, row, col) {\n\tlet p = this.pieces[pi];\n\t//If piece (is on super cell) can phase, extend player turn to allow option\n\t//if (this.is_phase(p))\n\tthis.board[p.row][p.col] = null;\n\tthis.board[row][col] = pi;\n\tp.row = row;\n\tp.col = col;\n\n\t//if piece p contains captured piece\n\tlet c = p.captured_pi !== undefined ? this.pieces[p.captured_pi] : null;\n\tif (c) {\n\t\tc.alive = false;\n\t\tthis.board[c.row][c.col] = null;\n\n\t\t//return direction of move\n\t\treturn {row_incr: Math.sign(p.row-c.row), col_incr: Math.sign(p.col-c.col)};\n\t}\n}\n\n/*==========\t\t\t\t\t\t\t\t\t\t\tINTEGRITY\t\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n\nBoard.prototype.can_continue_move = function (pi) {\n\tlet moves = this.get_moves(pi);\n\t//TODO: Only check moves in the same direction as the initial move\n\tmoves.adjs = [];\n\t//return !parseInt(Object.values(a).reduce( (j,i) => i.length !== undefined ? i.length + j: j));\n\treturn !moves.every(t => t === [] || t === {} || t === null);\n}\n\nBoard.prototype.has_moves = function (pi) {\n\tlet moves = this.get_moves(pi);\n\t//return !parseInt(Object.values(a).reduce( (j,i) => i.length !== undefined ? i.length + j: j));\n\treturn !Object.values(moves).every(t => t === [] || t === {} || t === null);\n}\n\n//Player has no more moves when (1): all player's pieces are dead (2): every piece has no moves\nBoard.prototype.moves_left = function (player) {\n\tfor(let pi=0; pi < this.pieces.length; pi++) {\n\t\tlet p = this.pieces[pi];\n\t\tif(p.alive && p.player === player) {\n\t\t\tif(this.has_moves(pi)) return true;\n\t\t}\n\t}\n\treturn false;\n}\n\nBoard.prototype.valid_move = function (pi, row, col) {\n\tlet m = this.get_moves(pi); //** this.board[row][col].highlight\n\tlet moves = [];\n\tmoves = moves.concat(m.phase, m.adjs, m.jumps, m.leaps, m.clone_spawns);\n\tfor (let move of moves) {\n\t\tif (!move) continue;\n\t\tif (move.row === row && move.col === col) return true;\n\t}\n\treturn false;\n}\n\nmodule.exports = Board;\n"]},"metadata":{},"sourceType":"module"}