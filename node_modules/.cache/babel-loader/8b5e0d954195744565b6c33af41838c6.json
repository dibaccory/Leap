{"ast":null,"code":"import { cellType, phaseLayouts } from './util';\n/*\n\nREFACTOR CHANGES:\nLeap.js -> Game.js\n\t<Leap> -> <GameController>\nboard.js -> leap.js\n\n\nBITWISE:\n\nBOARD:\nbit\t\t\t\titem\n0-1\t\t\t\tcellType\t{regular, phase} x {highlight, no highlight}\n2-3\t\t\tcellState\t\t{00: empty, 10: SPECIAL, 01: p1, 11: p2, }   NOTE, if '10' for bits 1 and 2, then it should be a SPECIAL THING???  lmao what if a piece can be moved by either player for a few turns?\n4\t\t\t\t\tisCloned\n5-9\t\t\t\tkey\t\t\t\tIf piece on cell, this is index to reach it\n\nboard[i] = (key << 4 | isCloned << 3 | cellState << 1 | cellType);\nfor i = row * SIZE + col \t\twhere row, col wtr a given piece\n\nPIECE INDEX:\nbit \t\t\titem\n0-2\t\t\t\tcol\n3-(5,6)\t\trow\n\nboard[i] = (row << 4 | col);\nfor i = SIZE*SIZE + key\t\t\twhere\n\n\nhow to store moves\nmoves[i] = [ 0 <= board_index < SIZE*SIZE, ... , ... ] all possible moves for associated piece.\nfor i = SIZE*SIZE\n\n\nindex = cell number\nkey = piece index\n\n*/\n\nconst toIndex = (row, col) => (row << BIT_SHIFT) + col;\n\nconst getRow = index => index >> BIT_SHIFT;\n\nconst getCol = index => index & BIT_LENGTH - 1;\n\nfunction getBitShift(b) {\n  return b >> 1 ? 1 + getBitShift(b >> 1) : 0;\n}\n\nvar BOARD_SIZE, BOARD_AREA, BIT_SHIFT, BIT_LENGTH, BIT_AREA;\n\nfunction Board(len, phaseLayout) {\n  this.p1 = 4;\n  this.p2 = 12;\n  BOARD_SIZE = len;\n  BOARD_AREA = 2 ** BOARD_SIZE;\n  BIT_SHIFT = getBitShift(BOARD_SIZE);\n  BIT_LENGTH = 2 ** BIT_SHIFT;\n  BIT_AREA = 2 ** BIT_LENGTH;\n  (this.board = []).length = len;\n  (this.moves = []).length = 4 * len;\n  this.board.fill(0);\n  this.bufferSize = 1; //how many rows between the pieces' starting location and the nearest phases\n\n  this.init(phaseLayout); //this.update();\n}\n\nBoard.prototype.init = function (layout) {\n  let pi = 0; //piece Index (ID)\n\n  const len = BOARD_SIZE;\n\n  const calcPhases = index => {\n    let k = 0;\n\n    while (k < phaseLayouts[layout].length) {\n      if ((index ^ phaseLayouts[layout][k]) === 0) return 1;\n      k++;\n    }\n\n    return 0;\n  };\n\n  for (let i = 0; i < len; i++) {\n    this.board[i] = pi << 5 | this.p1; //00000 0 01 00\n\n    this.initPiece(pi);\n    this.board[i + (len - 1) * len] = pi + 2 * BIT_LENGTH << 5 | this.p2; //100000 0 11 00\n\n    this.initPiece(pi + 2 * len);\n    pi++;\n\n    for (let j = 1 + this.bufferSize; j < len - 1 - this.bufferSize; j++) {\n      this.board[i + j * len] |= calcPhases(i + j * len);\n    }\n  }\n};\n\nBoard.prototype.initPiece = function (pi) {\n  this.moves[pi] = [];\n};\n\nBoard.prototype.getPlayer = function (index) {\n  let pid = this.board[index] & 12;\n\n  switch (pid) {\n    case 12:\n      return this.p2;\n\n    case 4:\n      return this.p1;\n\n    default:\n      return 0;\n  } //return ( (this.board[index] & 12) < 12 ) ? this.p1 : this.p2;\n\n}; // moves[pi] = [0000000 0000000] --> [board index of captured piece + board index of destination cell]\n\n\nBoard.prototype.addMove = function (from, to, captured) {\n  captured = captured || 0;\n  let pi = this.board[from] >> 5;\n  this.moves[pi].push((captured << 2 * BIT_SHIFT) + to);\n};\n\nBoard.prototype.update = function (newPiece) {\n  if (newPiece) {\n    //find out which player this piece belongs to then add it within that player's key range (00000)\n    this.board = this.board.map(row => row.map((cell, j) => {\n      if (cell.who != null) {\n        //increment all pi in board after piecesSeparator by one\n        if (cell.who >= this.piecesSeparator) cell.who++; //if piece alive, keep on board\n\n        return this.pieces[cell.who].alive ? {\n          who: cell.who,\n          move: false\n        } : {\n          who: null,\n          move: false\n        };\n      } else return {\n        who: null,\n        move: false\n      };\n    }));\n  } else {\n    this.board = this.board.map(row => row.map((cell, j) => cell.who != null ? this.pieces[cell.who].alive ? {\n      who: cell.who,\n      move: false\n    } : {\n      who: null,\n      move: false\n    } : {\n      who: null,\n      move: false\n    }));\n  }\n};\n/*==========\t\t\t\t\t\t\t\t\t\t\tCLONE\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n\n\nBoard.prototype.makeClone = function (pi, row, col) {\n  /*\n  getPlayer bit\n  */\n  this.board[row * BOARD_SIZE + col] |= this.getPlayer(row, col);\n  this.updateBoard(true);\n  this.board[row][col].who = this.piecesSeparator;\n  return true;\n};\n\nBoard.prototype.canClone = function (i) {\n  let row = i / BIT_LENGTH,\n      piece = this.board[i];\n  let onBoundingColumn = (i + 1) % BIT_LENGTH < 2;\n  let onBoundingRow = (row + 1) % BIT_LENGTH < 2;\n  if (onBoundingColumn || !onBoundingRow || piece & 16) return false;\n  let spawnRow = ((piece >> 5 & 2 * BIT_LENGTH) - 1) / 2;\n  return row ^ spawnRow;\n};\n/* DEPRECIATED: not used\nBoard.prototype.isCloneSpawn = function (pi, row, col) {\n\treturn this.canClone(pi) && this.board[row][col].who === null;\n}\n*/\n\n/*==========\t\t\t\t\t\t\t\t\t\t\tMOVES\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n// Board.prototype.getPlayer = function (pi) {\n// \treturn this.pieces[pi].player;\n// }\n\n\nBoard.prototype.canLeap = function (from, adj, isPhase, bypassCondition) {\n  let to = this.getInverseIndex(from);\n\n  if (isPhase && !this.getPlayer(to)) {\n    let inv = this.getInverseIndex(adj);\n    let phaseAdj = this.getPlayer(adj) & 8;\n    let phaseFar = this.getPlayer(inv) & 8;\n\n    if (phaseAdj ^ phaseFar) {\n      if (bypassCondition) return true;\n      let captured = phaseAdj ? adj : inv;\n      this.addMove(from, to, captured);\n    }\n  } //if neighbor cell is a phase, leap_cell clear, and (enemy piece on phaseAdj XOR enemy piece on phaseFar)\n\n};\n\nBoard.prototype.isJump = function (from, adj, direction, bypassCondition) {\n  //if adj cell occupied, jumpCell in bounds, jumpCell clear, and jumpCell has enemy piece\n  let to = adj + direction;\n\n  if (this.inBounds(to)) {\n    if (this.getPlayer(adj) !== this.getPlayer(from) && !this.getPlayer(to)) {\n      if (bypassCondition % 3) return true;else this.addMove(from, to, adj);\n    }\n  }\n};\n\nBoard.prototype.canPhase = function (from, to, bypassCondition) {\n  //j = 7-row_index + 7-col_index\n  //let to = ( (len - row) << BIT_SHIFT ) + (len - col);\n  let isPhase = this.board[to] & 1;\n  let isDestinationEmpty = this.board[from] & 3; //1 if player piece\n\n  if (isPhase && isDestinationEmpty) {\n    if (bypassCondition % 3) return true;else this.addMove(from, to);\n  }\n}; //reaching this function implies selected piece can be cloned, so piece is on an bounding row\n\n\nBoard.prototype.getCloneSpawnCells = function (from, bypassCondition) {\n  let spawnRow = from / BIT_LENGTH ^ BIT_LENGTH - 1;\n\n  for (let col = 1; col < 7; col++) {\n    let to = spawnRow + col;\n    let spawnCell = this.board[to]; //if spawnCell doesn't have a player on it\n\n    if (!(spawnCell & 4)) {\n      if (bypassCondition % 3) return true;else this.addMove(from, to);\n    }\n  }\n};\n\nBoard.prototype.getMovesInDirection = function (from, adj, bypassCondition) {\n  //check adjacent cells of piece p wrt the boundary\n  let direction = adj - from;\n\n  if (this.inBounds(adj) && direction) {\n    let isPhase = this.board[adj] & 1;\n    if (this.getPlayer(adj) ^ this.getPlayer(from)) if (this.canLeap(from, adj, isPhase, bypassCondition)) return true;\n    if (this.isJump(from, adj, direction, bypassCondition)) return true;else if (bypassCondition % 3 % 2) return true; //adjacent moves\n    else if (!bypassCondition) this.addMove(from, adj);\n  }\n\n  return false;\n};\n/* bypassCondition (HIGHLIGHT BYPASS CONDITION):\n\t\tundefined - default (Store all),\n\t\t1 - bypass all,\n\t\t2 - bypass continuable moves,\n\t\t3 - store continuable moves\n*/\n\n\nBoard.prototype.getMoves = function (from, bypassCondition, r, c) {\n  let row = getRow(from),\n      col = getCol(from); // move continuation AND has a move in specified direction\n\n  if (bypassCondition === 2 && this.getMovesInDirection(from, toIndex(row + r, col + c), bypassCondition)) return true; // on a phase\n\n  if (this.canPhase(from, this.getInverseIndex(from), bypassCondition)) return true; // able to clone\n\n  if (this.canClone(from) && this.getCloneSpawnCells(from, bypassCondition)) return true; //step, jump, leap\n\n  for (r = -1; r < 2; r++) for (c = -1; c < 2; c++) {\n    let adj = toIndex(row + r, col + c);\n    if (this.getMovesInDirection(from, adj, bypassCondition)) return true;\n  }\n\n  return false;\n}; //Performs move. returns true if caught piece in process, else false\n//NOTE: it is impossible to capture a piece at board index 0\n\n\nBoard.prototype.doMove = function (pi, row, col) {\n  let p = this.pieces[pi]; //begin move\n\n  this.board[p.row][p.col].who = null;\n  let destinationCell = this.board[row][col];\n  let caught = typeof destinationCell.move === \"number\" ? destinationCell.move : false; //caught piece index\n  // moveDirection is defined if and only if any of the following is true (for moving piece p):\n\n  let moveDirection; // (1) p caught a piece\n\n  if (caught) {\n    let c = this.pieces[caught];\n    c.alive = false;\n    this.board[c.row][c.col].who = null; //return direction of move\n    //If leap, then c adjacent at start XOR c adjacent at end\n    //Check adjacency of moving piece to captured piece on starting position and ending position\n\n    let cellAdjStartPos = Math.abs(c.row - p.row) < 2 && Math.abs(c.col - p.col) < 2;\n    let cellAdjEndPos = Math.abs(row - c.row) < 2 && Math.abs(col - c.col) < 2;\n    moveDirection = cellAdjStartPos && cellAdjEndPos ? {\n      rowIncr: Math.sign(row - c.row),\n      colIncr: Math.sign(col - c.col)\n    } //jump\n    : cellAdjStartPos ? {\n      rowIncr: Math.sign(c.row - p.row),\n      colIncr: Math.sign(c.col - p.row)\n    } //leap-> piece adj to capture on start\n    : {\n      rowIncr: Math.sign(row - c.row),\n      colIncr: Math.sign(col - c.col)\n    };\n  } // (2) p LANDS on a phase cell. That is, this move is not a phase.\n  else if (!this.samePhase(p, {\n      row: row,\n      col: col\n    })) moveDirection = {\n      rowIncr: 0,\n      colIncr: 0\n    }; //end move\n\n\n  this.board[row][col].who = pi;\n  p.row = row;\n  p.col = col; // (3) p is able to be cloned\n\n  if (this.canClone(pi)) moveDirection = {\n    rowIncr: 0,\n    colIncr: 0\n  };\n  this.updateBoard();\n  return moveDirection;\n};\n\nBoard.prototype.highlightMoves = function (piece) {\n  this.removeHighlight();\n  let nMoves = this.moves[piece].length;\n\n  for (let i = 0; i < nMoves; i++) {\n    let destinationIndex = this.moves[piece][i] & BIT_AREA - 1;\n    this.board[destinationIndex] |= 2;\n  }\n};\n\nBoard.prototype.removeHighlight = function () {\n  for (let i = 0; i < BOARD_AREA; i++) {\n    if (this.board[i] & 2) this.board[i] = this.board[i] ^ 2;\n  }\n};\n/*==========\t\t\t\t\t\t\t\t\t\t\tINTEGRITY\t\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n\n\nBoard.prototype.getInverseIndex = function (index) {\n  let len = BOARD_SIZE - 1;\n  let row = index >> BIT_SHIFT,\n      col = index & BIT_LENGTH - 1;\n  return (len - row << BIT_SHIFT) + (len - col);\n}; //Don't need -> can use dest cell shit\n\n\nBoard.prototype.samePhase = function (from, to) {\n  let isDestinationPhase = cellType(to.row, to.col);\n  return isDestinationPhase > 1 && isDestinationPhase === cellType(from.row, from.col);\n};\n\nBoard.prototype.inBounds = function (index) {\n  return 0 <= index && index < BIT_AREA;\n};\n\nBoard.prototype.canContinueMove = function (pi, dir) {\n  return dir ? this.getMoves(pi, 2, dir.rowIncr, dir.colIncr) : false;\n};\n\nBoard.prototype.hasMoves = function (pi) {\n  return this.getMoves(pi, 1);\n}; //Player has no more moves when (1): all player's pieces are dead (2): every piece has no moves\n\n\nBoard.prototype.movesLeft = function (player) {\n  for (let pi = 0; pi < this.pieces.length; pi++) {\n    let p = this.pieces[pi];\n\n    if (p.alive && p.player === player) {\n      if (this.hasMoves(pi)) return true;\n    }\n  }\n\n  return false;\n};\n\nBoard.prototype.validMove = function (row, col) {\n  return this.board[row][col].move;\n};\n\nexport default Board;","map":{"version":3,"sources":["/Users/bacchus/git/Leap/src/js/board.js"],"names":["cellType","phaseLayouts","toIndex","row","col","BIT_SHIFT","getRow","index","getCol","BIT_LENGTH","getBitShift","b","BOARD_SIZE","BOARD_AREA","BIT_AREA","Board","len","phaseLayout","p1","p2","board","length","moves","fill","bufferSize","init","prototype","layout","pi","calcPhases","k","i","initPiece","j","getPlayer","pid","addMove","from","to","captured","push","update","newPiece","map","cell","who","piecesSeparator","pieces","alive","move","makeClone","updateBoard","canClone","piece","onBoundingColumn","onBoundingRow","spawnRow","canLeap","adj","isPhase","bypassCondition","getInverseIndex","inv","phaseAdj","phaseFar","isJump","direction","inBounds","canPhase","isDestinationEmpty","getCloneSpawnCells","spawnCell","getMovesInDirection","getMoves","r","c","doMove","p","destinationCell","caught","moveDirection","cellAdjStartPos","Math","abs","cellAdjEndPos","rowIncr","sign","colIncr","samePhase","highlightMoves","removeHighlight","nMoves","destinationIndex","isDestinationPhase","canContinueMove","dir","hasMoves","movesLeft","player","validMove"],"mappings":"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","sourcesContent":["import {cellType, phaseLayouts} from './util';\n/*\n\nREFACTOR CHANGES:\nLeap.js -> Game.js\n\t<Leap> -> <GameController>\nboard.js -> leap.js\n\n\nBITWISE:\n\nBOARD:\nbit\t\t\t\titem\n0-1\t\t\t\tcellType\t{regular, phase} x {highlight, no highlight}\n2-3\t\t\tcellState\t\t{00: empty, 10: SPECIAL, 01: p1, 11: p2, }   NOTE, if '10' for bits 1 and 2, then it should be a SPECIAL THING???  lmao what if a piece can be moved by either player for a few turns?\n4\t\t\t\t\tisCloned\n5-9\t\t\t\tkey\t\t\t\tIf piece on cell, this is index to reach it\n\nboard[i] = (key << 4 | isCloned << 3 | cellState << 1 | cellType);\nfor i = row * SIZE + col \t\twhere row, col wtr a given piece\n\nPIECE INDEX:\nbit \t\t\titem\n0-2\t\t\t\tcol\n3-(5,6)\t\trow\n\nboard[i] = (row << 4 | col);\nfor i = SIZE*SIZE + key\t\t\twhere\n\n\nhow to store moves\nmoves[i] = [ 0 <= board_index < SIZE*SIZE, ... , ... ] all possible moves for associated piece.\nfor i = SIZE*SIZE\n\n\nindex = cell number\nkey = piece index\n\n*/\nconst toIndex = (row, col) => (row << BIT_SHIFT) + col;\n\nconst getRow = (index) => (index >> BIT_SHIFT);\nconst getCol = (index) => (index & (BIT_LENGTH-1));\n\nfunction getBitShift(b) {\n  return (b >> 1) ? (1 + getBitShift(b >> 1)) : 0;\n}\nvar BOARD_SIZE, BOARD_AREA, BIT_SHIFT, BIT_LENGTH, BIT_AREA;\n\nfunction Board(len, phaseLayout) {\n\n\tthis.p1 = 4;\n\tthis.p2 = 12;\n\n\tBOARD_SIZE = len;\n\tBOARD_AREA = 2**BOARD_SIZE;\n\tBIT_SHIFT = getBitShift(BOARD_SIZE);\n\tBIT_LENGTH = 2**BIT_SHIFT;\n\tBIT_AREA = 2**BIT_LENGTH;\n\n\n\t(this.board = []).length = len;\n\t(this.moves = []).length = 4*len;\n\n\tthis.board.fill(0);\n\tthis.bufferSize = 1;\t//how many rows between the pieces' starting location and the nearest phases\n\tthis.init(phaseLayout);\n\t//this.update();\n}\n\n\n\nBoard.prototype.init = function (layout) {\n    let pi=0; //piece Index (ID)\n\t\tconst len = BOARD_SIZE;\n\n\t\tconst calcPhases = (index) => {\n\t\t\tlet k = 0;\n\t\t\twhile(k<phaseLayouts[layout].length) {\n\t\t\t\tif ( (index^phaseLayouts[layout][k]) === 0 ) return 1;\n\t\t\t\tk++;\n\t\t\t}\n\t\t\treturn 0;\n\t\t};\n\n\t\tfor(let i=0; i<len; i++) {\n\t\t\tthis.board[i] = ( (pi << 5) | this.p1); //00000 0 01 00\n\t\t\tthis.initPiece(pi);\n\t\t\tthis.board[i + (len-1)*len] = ( (pi + 2*BIT_LENGTH << 5) | this.p2); //100000 0 11 00\n\t\t\tthis.initPiece(pi + 2*len);\n\t\t\tpi++;\n\n\t\t\tfor(let j=1+this.bufferSize; j<len-1-this.bufferSize; j++) {\n\t\t\t\tthis.board[i + j*len] |= calcPhases(i+j*len);\n\t\t\t}\n\t\t}\n}\n\nBoard.prototype.initPiece = function (pi) {\n\tthis.moves[pi] = [];\n}\n\nBoard.prototype.getPlayer = function (index) {\n\tlet pid = (this.board[index] & 12);\n\tswitch (pid) {\n\t\tcase 12:\n\t\t\treturn this.p2;\n\t\tcase 4:\n\t\t\treturn this.p1;\n\t\tdefault:\n\t\t\treturn 0;\n\t}\n\t//return ( (this.board[index] & 12) < 12 ) ? this.p1 : this.p2;\n}\n\n// moves[pi] = [0000000 0000000] --> [board index of captured piece + board index of destination cell]\nBoard.prototype.addMove = function (from, to, captured) {\n\tcaptured = captured || 0;\n\tlet pi = (this.board[from] >> 5);\n\tthis.moves[pi].push( (captured << 2*BIT_SHIFT) + to );\n}\n\nBoard.prototype.update = function (newPiece) {\n\tif (newPiece) {\n\t\t//find out which player this piece belongs to then add it within that player's key range (00000)\n\t\tthis.board = this.board.map(row => row.map((cell, j) => {\n\t\t\tif (cell.who != null) { //increment all pi in board after piecesSeparator by one\n\t\t\t\tif (cell.who >= this.piecesSeparator) cell.who++;\n\t\t\t\t//if piece alive, keep on board\n\t\t\t\treturn this.pieces[cell.who].alive ? {who: cell.who, move:false} : {who: null, move:false};\n\t\t\t} else return {who: null, move: false};\n\t\t}));\n\t} else {\n\t\tthis.board = this.board.map(row => row.map((cell, j) =>\n\t\t\t(cell.who != null)\n\t\t\t? (this.pieces[cell.who].alive\n\t\t\t\t? {who: cell.who, move:false}\n\t\t\t\t: {who: null, move:false})\n\t\t\t: {who: null, move: false}\n\t\t));\n\t}\n}\n\n\n\n/*==========\t\t\t\t\t\t\t\t\t\t\tCLONE\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n\nBoard.prototype.makeClone = function (pi, row, col) {\n\t/*\n\tgetPlayer bit\n\t*/\n\tthis.board[row*BOARD_SIZE + col] |= this.getPlayer(row, col)\n\tthis.updateBoard(true);\n\tthis.board[row][col].who = this.piecesSeparator;\n\treturn true;\n}\n\nBoard.prototype.canClone = function (i) {\n\tlet row = i/BIT_LENGTH, piece = this.board[i];\n\tlet onBoundingColumn = (i+1)%BIT_LENGTH < 2;\n\tlet onBoundingRow = (row + 1)%BIT_LENGTH < 2;\n\n\tif(onBoundingColumn || !onBoundingRow || (piece & 16) ) return false;\n\n\tlet spawnRow = (( (piece >> 5) & 2*BIT_LENGTH ) - 1) / 2;\n\treturn (row ^ spawnRow);\n}\n\n/* DEPRECIATED: not used\nBoard.prototype.isCloneSpawn = function (pi, row, col) {\n\treturn this.canClone(pi) && this.board[row][col].who === null;\n}\n*/\n/*==========\t\t\t\t\t\t\t\t\t\t\tMOVES\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n\n// Board.prototype.getPlayer = function (pi) {\n// \treturn this.pieces[pi].player;\n// }\n\nBoard.prototype.canLeap = function (from, adj, isPhase, bypassCondition) {\n\tlet to = this.getInverseIndex(from);\n\tif( isPhase && !(this.getPlayer(to)) ) {\n\t\tlet inv = this.getInverseIndex(adj);\n\t\tlet phaseAdj = this.getPlayer(adj) & 8;\n\t\tlet phaseFar = this.getPlayer(inv) & 8;\n\n\t\tif( (phaseAdj ^ phaseFar) ) {\n\t\t\tif (bypassCondition) return true;\n\t\t\tlet captured = phaseAdj ? adj : inv;\n\t\t\tthis.addMove(from, to, captured);\n\t\t}\n\t}\n\t//if neighbor cell is a phase, leap_cell clear, and (enemy piece on phaseAdj XOR enemy piece on phaseFar)\n}\n\nBoard.prototype.isJump = function (from, adj, direction, bypassCondition) {\n\t//if adj cell occupied, jumpCell in bounds, jumpCell clear, and jumpCell has enemy piece\n\tlet to = adj+direction;\n\tif(this.inBounds(to)) {\n\t\tif (this.getPlayer(adj) !== this.getPlayer(from) && !this.getPlayer(to)) {\n\t\t\tif(bypassCondition%3) return true;\n\t\t\telse this.addMove(from, to, adj);\n\t\t}\n\t}\n}\n\nBoard.prototype.canPhase = function (from, to, bypassCondition) {\n\t//j = 7-row_index + 7-col_index\n\t//let to = ( (len - row) << BIT_SHIFT ) + (len - col);\n\tlet isPhase = (this.board[to] & 1);\n\tlet isDestinationEmpty = (this.board[from] & 3); //1 if player piece\n\tif(isPhase && isDestinationEmpty) {\n\t\tif (bypassCondition%3) return true;\n\t\telse this.addMove(from, to);\n\t}\n}\n\n//reaching this function implies selected piece can be cloned, so piece is on an bounding row\nBoard.prototype.getCloneSpawnCells = function (from, bypassCondition) {\n\tlet spawnRow = ( from/BIT_LENGTH ^ (BIT_LENGTH - 1) );\n\tfor(let col=1; col<7;col++) {\n\t\tlet to = spawnRow + col;\n\t\tlet spawnCell = this.board[to];\n\t\t//if spawnCell doesn't have a player on it\n\t\tif ( !(spawnCell & 4) ) {\n\t\t\tif (bypassCondition%3) return true;\n\t\t\telse this.addMove(from, to);\n\t\t}\n\t}\n}\n\nBoard.prototype.getMovesInDirection = function (from, adj, bypassCondition) {\n\t//check adjacent cells of piece p wrt the boundary\n\tlet direction = adj - from;\n\tif (this.inBounds(adj) && (direction)) {\n\t\tlet isPhase = this.board[adj] & 1;\n\n\t\tif ( this.getPlayer(adj) ^ this.getPlayer(from) )\n\t\tif (this.canLeap(from, adj, isPhase, bypassCondition)) return true;\n\t\tif (this.isJump(from, adj, direction, bypassCondition)) return true;\n\n\t\telse if (bypassCondition%3%2) return true;\t//adjacent moves\n\t\telse if (!bypassCondition) this.addMove(from, adj);\n\t}\n\treturn false;\n}\n\n/* bypassCondition (HIGHLIGHT BYPASS CONDITION):\n\t\tundefined - default (Store all),\n\t\t1 - bypass all,\n\t\t2 - bypass continuable moves,\n\t\t3 - store continuable moves\n*/\nBoard.prototype.getMoves = function (from, bypassCondition, r, c) {\n\tlet row = getRow(from), col = getCol(from);\n\t// move continuation AND has a move in specified direction\n\tif (bypassCondition === 2 && this.getMovesInDirection(from, toIndex(row + r, col + c), bypassCondition) ) return true;\n\t// on a phase\n\tif (this.canPhase(from, this.getInverseIndex(from), bypassCondition)) return true;\n\t// able to clone\n\tif (this.canClone(from) && this.getCloneSpawnCells(from, bypassCondition)) return true;\n\t//step, jump, leap\n\tfor(r=-1;r<2;r++) for(c=-1;c<2; c++) {\n\t\tlet adj = toIndex(row + r, col + c);\n\t\tif (this.getMovesInDirection(from, adj, bypassCondition)) return true;\n\t}\n\treturn false;\n}\n\n//Performs move. returns true if caught piece in process, else false\n//NOTE: it is impossible to capture a piece at board index 0\nBoard.prototype.doMove = function (pi, row, col) {\n\tlet p = this.pieces[pi];\n\t//begin move\n\tthis.board[p.row][p.col].who = null;\n\n\tlet destinationCell = this.board[row][col];\n\tlet caught = typeof(destinationCell.move) === \"number\" ? destinationCell.move : false; //caught piece index\n\t// moveDirection is defined if and only if any of the following is true (for moving piece p):\n\tlet moveDirection;\n\t\t// (1) p caught a piece\n\tif (caught) {\n\t\tlet c = this.pieces[caught];\n\t\tc.alive = false;\n\t\tthis.board[c.row][c.col].who = null;\n\t\t//return direction of move\n\t\t//If leap, then c adjacent at start XOR c adjacent at end\n\t\t//Check adjacency of moving piece to captured piece on starting position and ending position\n\t\tlet cellAdjStartPos = Math.abs(c.row - p.row) < 2 && Math.abs(c.col - p.col) < 2;\n\t\tlet cellAdjEndPos = Math.abs(row - c.row) < 2 && Math.abs(col - c.col) < 2;\n\n\t\tmoveDirection = (cellAdjStartPos && cellAdjEndPos)\n\t\t\t? {rowIncr: Math.sign(row-c.row), colIncr: Math.sign(col-c.col)}\t//jump\n\t\t\t: (cellAdjStartPos\n\t\t\t\t? {rowIncr: Math.sign(c.row-p.row), colIncr: Math.sign(c.col-p.row)}\t//leap-> piece adj to capture on start\n\t\t\t\t: {rowIncr: Math.sign(row-c.row), colIncr: Math.sign(col-c.col)});\n\t}\t// (2) p LANDS on a phase cell. That is, this move is not a phase.\n\telse if (!this.samePhase(p,{row: row, col: col}))\tmoveDirection = {rowIncr: 0, colIncr: 0};\n\n\t//end move\n\tthis.board[row][col].who = pi;\n\tp.row = row;\n\tp.col = col;\n\n\t\t// (3) p is able to be cloned\n\tif (this.canClone(pi)) moveDirection = {rowIncr: 0, colIncr:0};\n\tthis.updateBoard();\n\treturn moveDirection;\n}\n\nBoard.prototype.highlightMoves = function (piece) {\n\tthis.removeHighlight();\n\tlet nMoves = this.moves[piece].length;\n\tfor(let i=0; i<nMoves; i++) {\n\t\tlet destinationIndex = ( this.moves[piece][i] & (BIT_AREA - 1) );\n\t\tthis.board[destinationIndex] |= 2;\n\t}\n}\n\nBoard.prototype.removeHighlight = function () {\n\tfor(let i=0; i<BOARD_AREA; i++) {\n\t\tif(this.board[i] & 2) (this.board[i] = this.board[i] ^ 2);\n\t}\n}\n\n/*==========\t\t\t\t\t\t\t\t\t\t\tINTEGRITY\t\t\t\t\t\t\t\t\t\t\t\t\t==========*/\n\nBoard.prototype.getInverseIndex = function (index) {\n\tlet len = BOARD_SIZE - 1;\n\tlet row = (index >> BIT_SHIFT), col = (index & (BIT_LENGTH-1));\n\treturn ( (len - row) << BIT_SHIFT ) + (len - col);\n}\n\n//Don't need -> can use dest cell shit\nBoard.prototype.samePhase = function (from, to) {\n\tlet isDestinationPhase = cellType(to.row, to.col);\n\treturn isDestinationPhase > 1 && isDestinationPhase === cellType(from.row, from.col);\n}\n\nBoard.prototype.inBounds = function (index) {\n\treturn 0 <= index && index < BIT_AREA;\n}\n\nBoard.prototype.canContinueMove = function (pi, dir) {\n\treturn dir ? this.getMoves(pi, 2, dir.rowIncr, dir.colIncr) : false;\n}\n\nBoard.prototype.hasMoves = function (pi) {\n\treturn this.getMoves(pi, 1);\n}\n\n//Player has no more moves when (1): all player's pieces are dead (2): every piece has no moves\nBoard.prototype.movesLeft = function (player) {\n\tfor(let pi=0; pi < this.pieces.length; pi++) {\n\t\tlet p = this.pieces[pi];\n\t\tif(p.alive && p.player === player) {\n\t\t\tif(this.hasMoves(pi)) return true;\n\t\t}\n\t}\n\treturn false;\n}\n\nBoard.prototype.validMove = function (row, col) {\n\treturn this.board[row][col].move;\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}